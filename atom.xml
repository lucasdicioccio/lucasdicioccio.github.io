<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2020-12-24T12:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/postgrest-table.html
        </id>
        <title type="text">
            PostgREST Table
        </title>
        <updated>
            2024-05-01T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="help-box"&gt; &lt;h1&gt;Everything happens on your browser&lt;/h1&gt; &lt;p&gt;PostgREST not only exposes data over REST entities, it also provides an OpenAPI description.&lt;/p&gt; &lt;p&gt;Postgrest-table lets your browser load the OpenAPI description of a PostgREST service. Plus, this page let your browser understands further the selector syntax that PostgREST expects.&lt;/p&gt; &lt;p&gt;All interactions between this page and your PosgtREST instances are done via your browser. Hence, this service does not intercept any data.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Three families of columns&lt;/h1&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;PostgREST exposes &lt;em&gt;main&lt;/em&gt;entities from PostgreSQL tables and views.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PostgREST provides some support for &lt;em&gt;embedding&lt;/em&gt; via auto-detected foreign-keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Finally, Postgrest-Table (this page) allows you to &lt;em&gt;compute&lt;/em&gt; extra columns directly on your browser with a limited expression language.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Each family of column comes with its own set of limitations:&lt;/p&gt; &lt;p&gt;Only &lt;em&gt;main&lt;/em&gt; and &lt;em&gt;embedded&lt;/em&gt; data are part of CSV exports as PostgREST is in charge of formatting the CSV.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Computed&lt;/em&gt; data can only reference &lt;em&gt;main&lt;/em&gt; columns or previously-defined &lt;em&gt;computed&lt;/em&gt; columns (a naive way to avoid circular definitions).&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Computed columns&lt;/h1&gt; &lt;p&gt;We provide a limited language. Heavier queries should be turned into SQL views and exposed via PostgREST.&lt;/p&gt; &lt;h4&gt;Primitives&lt;/h4&gt; &lt;pre class="code"&gt;"hello"&lt;/pre&gt; &lt;pre class="code"&gt;42.0&lt;/pre&gt; &lt;pre class="code"&gt;["a", "b", "c"]&lt;/pre&gt; &lt;pre class="code"&gt;{"name":"just", "lastname":"leblanc"}&lt;/pre&gt; &lt;h4&gt;References&lt;/h4&gt; &lt;pre class="code"&gt;$row-number&lt;/pre&gt; &lt;pre class="code"&gt;$field:"firstname"&lt;/pre&gt; &lt;pre class="code"&gt;$computed-field:"fullname"&lt;/pre&gt; &lt;h4&gt;Json Extraction&lt;/h4&gt; &lt;pre class="code"&gt;object-lookup($field:"some-json-object", "key", "default-value")&lt;/pre&gt; &lt;pre class="code"&gt;array-lookup($field:"some-json-array", 0, "default-value")&lt;/pre&gt; &lt;h4&gt;Strings and html-generation&lt;/h4&gt; &lt;pre class="code"&gt;concat($field:"firstname", " ", $field:"lastname")&lt;/pre&gt; &lt;pre class="code"&gt;concat("hello ", $computed-field:"fullname")&lt;/pre&gt; &lt;pre class="code"&gt;stringify(1.42)&lt;/pre&gt; &lt;pre class="code"&gt;stringify(true)&lt;/pre&gt; &lt;pre class="code"&gt;image(concat("https://somesite/", $field:"icon", ".png")&lt;/pre&gt; &lt;pre class="code"&gt;link(concat("https://somesite/", $field:"uuid", "/", stringify(round($field:"id")))&lt;/pre&gt; &lt;pre class="code"&gt;progressbar(42.0)&lt;/pre&gt; &lt;pre class="code"&gt;colordot($computed-field:"some_css_color")&lt;/pre&gt; &lt;h4&gt;Computation&lt;/h4&gt; &lt;pre class="code"&gt;negate(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;inverse(100.0)&lt;/pre&gt; &lt;pre class="code"&gt;product(1.2, 3.0, $field:"factor")&lt;/pre&gt; &lt;pre class="code"&gt;sum(1.2, product(1.2, 3.0))&lt;/pre&gt; &lt;pre class="code"&gt;round(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;ceiling(1.2)&lt;/pre&gt; &lt;h4&gt;Logic and branching&lt;/h4&gt; &lt;pre class="code"&gt;conj(true, true)&lt;/pre&gt; &lt;pre class="code"&gt;disj(false, true)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:eq, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;branch("some-fallback", predicate(:eq, $field:"xyz", 1.3), "xyz-is-1.3")&lt;/pre&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Charts&lt;/h1&gt; &lt;p&gt;We leverage Vega-Lite to generate charts. Features implementation and the styling are still rough.&lt;/p&gt; &lt;p&gt;A chart can display computed columns, however if you end-up doing that often you should consider working on your SQL views.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Bookmarklets&lt;/h1&gt; &lt;p&gt;This page will auto-load a PostgREST spec if provided a &lt;span class="code"&gt;?postgrest=$url&lt;/span&gt; query param in the URL.&lt;/p&gt; &lt;p&gt;As a result, you can create a smart-booklet to load &lt;em&gt;Postgrest-Table&lt;/em&gt; in your browser by bookmarking the following code: &lt;pre class="code"&gt;javascript:location.href='https://postgrest-table.netlify.app?postgrest='+document.location.href;&lt;/pre&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Troubleshooting&lt;/h1&gt; &lt;p&gt;Netlify, which hosts this page, enables HTTPS. Hence, if you point to a plain HTTP PostgREST instance, your browser will detect an insecure connection attempt from. You can bypass this limitation by deactivating mixed-content blocking (often clicking a shield/lock icon after a failed connection attempt). Of course, it is better to secure your PostgREST endpoints.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Roadmap&lt;/h1&gt; &lt;p&gt;Albeit best effort, you can poke around and observe when we provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;more primitives for computed computations&lt;/li&gt; &lt;li&gt;more charting-interactions&lt;/li&gt; &lt;li&gt;more FKs-interactions&lt;/li&gt; &lt;li&gt;more and polished filters for more types (dates, jsonb, arrays, fts)&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Credits&lt;/h1&gt; &lt;p&gt;Made with passion thanks to:&lt;/p&gt; &lt;ul class="dependencies"&gt; &lt;li&gt;&lt;a href="https://postgrest.org/"&gt;PostgREST&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.purescript.org/"&gt;PureScript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="kk"&gt;Halogen&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://vega.github.io/"&gt;Vega&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vega@5.19.1"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@5.0.0"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.15.1"&gt;&lt;/script&gt; &lt;script src="/js/postgrest-table.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/postgrest-table.html" rel="alternate"/>
        <summary type="text">
            A no-code PostgREST table UI. You can point your browser to any PostgREST instance to inspect and explore data. I use it almost daily while doing local development. I used to host this service on Netlify but I'm considering upgrading the style, adding features, and a backend to save configurations, which goes through a pass of upgrades and hosting changes.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/photoclub-judgment-tips.html
        </id>
        <title type="text">
            Photo Competitions from the inside
        </title>
        <updated>
            2023-07-12T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Every year the photo-club I’m part of organizes an international &lt;a href="/hashtags/photo.html"&gt;&lt;span class="hashtag" data-hashtag="photo"&gt;#photo&lt;/span&gt;&lt;/a&gt; competition, &lt;a href="https://www.salondaguerre.paris/en/"&gt;Salon Daguerre&lt;/a&gt;. This year was the second time in a row I contribute to the organization of the Salon. My contribution is not much: I contribute as tech support. I attend the judgment but I do not take part in scoring images. I am around to fix the computer if something breaks. Since the technicals aspects always are flawless (haha), I get to spend time and observe how the photo contest is judged.&lt;/p&gt; &lt;p&gt;This article summarizes what I think could be of interest to contestants. First, this article discusses technical aspects of how photos are shown. Second, the articles discusses the judgment process, and finally I’ll give my personal opinion about the process and some strategies when preparing your entry. Disclaimer: everything in this article is specific to one competition and other competitions will have different rules.&lt;/p&gt; &lt;h1 id="technical-aspects"&gt;Technical aspects&lt;/h1&gt; &lt;p&gt;The main technical aspect influencing how judges will perceive photos is the way photos are shown. In our case, photos are shown on a screen. Judges sit in front of the screen in a same room.&lt;/p&gt; &lt;p&gt;Have you been to a TV shop? all those different TVs showing the same movie but you do not get the same feeling from one TV to another one. The same is true when looking at photos on a screen. Resolution, crispness, brightness, coloration etc. all vary. Our screen is calibrated. Although our screen is calibrated and we can somewhat reproduce the display experience, your screen may not. Also, keep in mind that your own screen and other factors are hard to control (e.g., the ambient light in the room).&lt;/p&gt; &lt;p&gt;The display resolution is set to the maximum-size of submitted photos, which happens to be 1920x1080 pixels so that a maximal photo takes the whole screen. Modern computers, TVs, laptop screens typically have higher resolution than HD. Our TV is 4K for instance (recall. HD is 1920x1080, 4K is 3840x2160) for something like one meter diagonal. Further, many people now consume photos on handheld devices, with screens much smaller than a TV like ours. Hence, it is better to assume that the screen and even individual pixels will be “larger” than you are used to for watching photos. If you prepare your photos on a small device (e.g., on a laptop or smaller), my recommendation is to watch how your pictures render on a large screen.&lt;/p&gt; &lt;p&gt;While you look at pictures on a TV-sized screen, keep in mind that screens will want to make their own brightness, crispness, what-have-you adjustments. Thus, go play in the settings and experience how your photo “degrades” along a range of settings. If you do this exercise you’ll realize that a good way to destroy your photo is to increase the sharpness cursor. Indeed, judges sit in front of the TV at some distance so that they can comfortably see the whole screen at a glance yet still see a fair amount of details.&lt;/p&gt; &lt;p&gt;If your photo does not match the maximal resolution of the contest, the photo is not arbitrarily stretched (for obvious reasons). Instead, the photo is centered and laid over a black background. Conversely, if your photo matches the maximal resolution, the TV-frame will be the immediate background. Like most TVs, ours has a dark frame. As a result, images with dark around corners will appear to blend in the background so that the exact frame size may not be clear to the viewer. If your composition uses proportions and is dark around borders, your image may lose impact. Alternatively, you might want to deliberately take the absence of clear border as an artistic choice. However keep in mind that this effect will not show in a gallery/catalogue (our catalogue historically has a gray background). To completely remove lisibility issues my recommendations are to do one of (or both): Expand the canvas of your photo to fill the maximal size with the color of your choice (note: pay attention to monochrome). Add a few-pixels of light border as a clear delimitation. With these, the border of your picture will become clear.&lt;/p&gt; &lt;p&gt;Only photos are shown. In particular, we do not show author names nor image titles. In particular, I want to stress that the title will not save an hard-to-understand photography by adding extra context or giving away some subtle hidden pun. You still want to spend some time on your titles as titles are shown in the catalogue if your entry is accepted.&lt;/p&gt; &lt;p&gt;Summarizing, the effort you owe yourself is to try your pictures on a TV screen with black background. Let’s now discuss the judgment process.&lt;/p&gt; &lt;h1 id="on-the-judgment-itself"&gt;On the judgment itself&lt;/h1&gt; &lt;p&gt;The judgment takes place in a couple of days. During these days, three judges have to gauge the merit of thousands of photos. That is, overall the average time &lt;a href="/hashtags/budget.html"&gt;&lt;span class="hashtag" data-hashtag="budget"&gt;#budget&lt;/span&gt;&lt;/a&gt; for a single photo is only a few seconds. However, judges are explicitly told they can pause and discuss if they want. Such discussions occur a handful of times over a judgment. Most of the photos, however, are voted for while judges operate at some “cruise speed”.&lt;/p&gt; &lt;p&gt;Sections are judged one by one (e.g., all “open-theme color”, then all “trees” photos). Photos of a same section are shown in a random order. Each photo is judged before the next photo is shown. Thus judges vote for a photo as a standalone artifact rather than by judging a photo as part of a whole. The judgment attributes a &lt;em&gt;score&lt;/em&gt; rather than a binary &lt;em&gt;accept/reject&lt;/em&gt; choice. The score is the sum of all grades given by individual judges. At the end of the section, photos are ranked by score and tie breaking may occur where it matters (i.e., at the top of the charts and at the accept/reject score boundary). The vast majority of photos need no tie-break and thus will be scored once with three grades.&lt;/p&gt; &lt;p&gt;Sections have rules. Read the rules. The two broad rules are about meeting the theme (e.g., “trees”, “open”) and constraints (e.g., “monochrome vs. color”). Mistakes occur, and you just lose a chance. Neither organizers, nor judges, nor you want to feel bad to disqualify a good photo because you misread whether a section is monochrome or not. Judging whether an image corresponds to a theme on subjects (e.g., “trees”) or technical (e.g., “negative space”) is not always a clear cut. Judges have to decide reasonably. However, if it is unclear whether a photo is in the theme they may decide to penalize your photo because the photo does not adhere well to the theme. What happens in general is some judge asks others about how they feel about a photo and some consensus emerges. However since this discussion takes time, judges end up expediting border-line and average photos. For a border-line photo to be accepted, it must be &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Avoid submitting series. The shuffling of photos destroys the consistency of photo series. Not only a photo may be accepted and another one may be rejected. But also the effect of seeing two related images with a dozen of unrelated image in between is not nice. If the series is “intellectual” (e.g., a same allegory with different subjects) the link will be too tenuous and you will have spent this effort for no reward. If the series is “graphical”, you leave the impression that you do not know what is your best entry and let the judges pick (boredom born from repetition may reduce your chances). My recommendation is: no series if the contest randomizes photo order. For contests which judge a body of work, of course do make series. An option could be to make a diptych or triptych photomontage, but keep in mind that your are pixel-constrained.&lt;/p&gt; &lt;p&gt;In summary in Salon Daguerre, you are submitting a collection of standalone photos rather than a body of work. Keep in mind that photos must fit the theme. The next section is more personal and contains suggestions of how to approach contests with similar rules than in our photo-club.&lt;/p&gt; &lt;h1 id="personal-opinion-and-strategies"&gt;Personal opinion and strategies&lt;/h1&gt; &lt;p&gt;As a spectator, you can see what photos get accepted on the catalogue, however you cannot see photos which were rejected. My vantage point allows me to form an opinion on what gets accepted versus what not.&lt;/p&gt; &lt;p&gt;First, I think that the judgment process is rather fair. Top-ranked photos emerge as “good photos”. Although judging thousands of photos in a few days seems like a difficult task, judges do a good job while keeping a rather fast rythm. I think there is a minimal amount of “luck” in the process. I’d say the first one or two dozens of photos in a series get votes that are a bit more contrasted (i.e., being pushed up or pushed down, but rarely changing the accept/reject decision). Further, since photos are shown in a random order, no-one can take advantage of this behavior.&lt;/p&gt; &lt;p&gt;Second, I would say that you can aim for two very different goals when participating to a photo contest like Salon Daguerre. A first goal would be to get top-ranked photos, another goal would be to get many accepted photo. For the first goal, top-ranked photos, you’ll need to focus on producing a few really good photos. For the second goal, you’ll &lt;a href="/hashtags/budget.html"&gt;&lt;span class="hashtag" data-hashtag="budget"&gt;#budget&lt;/span&gt;&lt;/a&gt; your time on producing multiple acceptably good photos.&lt;/p&gt; &lt;p&gt;My personal characterization of &lt;em&gt;good photos&lt;/em&gt; – which can get a high score – is as follows. From most important to less important:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;subject and story of the photos are clear &lt;/li&gt; &lt;li&gt;some novelty / originality / leaves some impression &lt;/li&gt; &lt;li&gt;technically good &lt;/li&gt; &lt;li&gt;fair amount of time has been spent on post-processing &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Whereas my personal characterization of photos that stand a good chance are to get &lt;em&gt;accepted&lt;/em&gt; is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;subject and story of the photos are clear &lt;/li&gt; &lt;li&gt;technically good &lt;/li&gt; &lt;li&gt;not “overdone” (see below) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Two characteristics are shared among accepted photos: the subject and the story of the photos are clear and they are technically good. An explanation is that the judgment-speed plays a major role and ten seconds staring at a photo does not allow an in-depth explanation. As a result, a photo where the subject is not clear will get disadvantaged. I would even say that a photo with alternative framing choices that could hypothetically work are at a disadvantage. If you put yourself in the shoes of the judge, you need to look at a photo and say “I cannot change anything”. Conversely, a photo that has technical flaws (e.g., poor framing, camera shake) or where a judge would say “I would have framed it this way instead” will get voted down.&lt;/p&gt; &lt;p&gt;Some photo belong to “canonical categories” (e.g., standard portraits, sports, animals, landscapes) and are generally welcome in multiple sections. Similarly, some photos have been done and done-again (e.g., partial desaturation, tone-mapped HDR, un-original scenic spots). For these photos, you less likely to rank high but you can still get a photo accepted if you bring an interesting twist. For these photos, keep in mind that the photo-shot has to be technically flawless but that only will not suffice.&lt;/p&gt; &lt;p&gt;In summary. Keep in mind that photos get judged fast. They need to leave a lasting impression as photos you remember and which are technically flawless.&lt;/p&gt; &lt;h1 id="conclusion"&gt;conclusion&lt;/h1&gt; &lt;p&gt;As a participant of photo contests, your reward is visibility and peer recognition. Participating as co-organizer, the reward I get is to be able to attend to photo judgments and build an intuition of what makes a “winning photo”. My recommendation is that if you participate to a photo contest do it with the intent to win from the start of the process. If you look at your catalogue of good photos and cherry-pick some you will not be putting the right amount of effort in selecting or processing the photo. Photos need to be technically good and give a lasting impression in a few seconds. At a same time, photos need no obvious flaws. In short, winning photos are simple to undersand, easy to remember, impossible to discard.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/photoclub-judgment-tips.html" rel="alternate"/>
        <summary type="text">
            Recently I was co-organizing [Salon Daguerre](https://www.salondaguerre.paris/en/), an international photo competition, as a tech helper. In this article I give you a sneak peek of how the judgment works.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/babywords.html
        </id>
        <title type="text">
            Daughter's words
        </title>
        <updated>
            2023-06-22T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div id="app"&gt; &lt;/div&gt; &lt;div class="rules"&gt; &lt;h2 id="each-day-a-new-challenging-word-to-guess"&gt;Each day a new challenging word to guess!&lt;/h2&gt; &lt;p&gt;The situation is: a small human who can barely speak tells you about something and you have to make sense of it. Small humans mispronounce words.&lt;/p&gt; &lt;h2 id="rules"&gt;Rules&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;you are given a word as pronounced by my daughter (can be a noun or a name) &lt;/li&gt; &lt;li&gt;you enter your guess about what my daughter meant &lt;/li&gt; &lt;li&gt;words are almost exclusively in French (désolé) &lt;/li&gt; &lt;li&gt;capital-casing is ignored, so if you try ‘Hello’ or ‘hello’ both are counted as the same word &lt;/li&gt; &lt;li&gt;no special character (e.g., “jean-pierre” should be written “jean pierre”) &lt;/li&gt; &lt;li&gt;verbs are infinitive &lt;/li&gt; &lt;li&gt;you can ask for a hint (it will cost you some tries) &lt;/li&gt; &lt;li&gt;you can give up (note: this is not a parenting advice) &lt;/li&gt; &lt;li&gt;come back from day to day, the list has a couple dozen words to find &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="credits"&gt;Credits&lt;/h2&gt; &lt;p&gt;Inspired by &lt;a href="https://www.nytimes.com/games/wordle/index.html"&gt;Wordle&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Written in &lt;a href="https://github.com/purescript-halogen/purescript-halogen"&gt;PureScript Halogen&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By &lt;a href="/about-me.html"&gt;Lucas DiCioccio&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="want-to-build-your-own"&gt;Want to build your own?&lt;/h2&gt; &lt;p&gt;I would love to know how your baby mispronounced some words, so if you follow through, please tell me. I can even reference your dataset here.&lt;/p&gt; &lt;p&gt;If you are tech-savvy, you can build your own &lt;code&gt;babywords.js&lt;/code&gt; dataset in the following format:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;GameData&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; questions ::&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Question&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; credits ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Question&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; spoken ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; actual ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; hint ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;We provide a &lt;a href="/raw/data/babywords.cmark__2.json"&gt;data sample&lt;/a&gt; .&lt;/p&gt; &lt;h3 id="option-1-serve-a-json-and-use-this-site"&gt;option-1 serve a JSON and use this site&lt;/h3&gt; &lt;p&gt;You can pass a special query-string parameter &lt;code&gt;?data-source=&amp;lt;url&amp;gt;&lt;/code&gt; to the URL of this page. Everything is done on the web-browser, hence the target URL must support CORS for GET requests on the JSON object.&lt;/p&gt; &lt;p&gt;&lt;a href="/babywords.html?data-source=/raw/data/babywords.cmark__2.json"&gt;https://dicioccio.fr/babywords.html?data-source=/raw/data/babywords.cmark__2.json&lt;/a&gt;&lt;/p&gt; &lt;h3 id="option-2-serve-the-js-and-the-json"&gt;option-2 serve the JS (and the JSON)&lt;/h3&gt; &lt;p&gt;You can embed &lt;code&gt;babyword.js&lt;/code&gt; with a parameter containing the URL at which data should be read. The script “hijacks” a &lt;code&gt;div&lt;/code&gt; with attribute &lt;code&gt;id=app&lt;/code&gt; so you need that too.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;/js/babywords.js&amp;quot; data-humdrum-arg=&amp;quot;/raw/data/babywords.cmark__test-data2.json&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you style the application in CSS.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script src="/js/babywords.js" data-humdrum-arg="/raw/data/babywords.cmark__real-data1.json"&gt;&lt;/script&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/babywords.html" rel="alternate"/>
        <summary type="text">
            A word game where you need to find what my daughter says. Each day a new word.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/2023-goals-mid-year.html
        </id>
        <title type="text">
            mid-year update
        </title>
        <updated>
            2023-06-21T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Happy summer.&lt;/p&gt; &lt;p&gt;It’s roughly half-time for this year and hence, besides planning to enjoy music at the &lt;a href="https://fr.wikipedia.org/wiki/F%C3%AAte_de_la_musique"&gt;Fête de la musique&lt;/a&gt;, now is a good time to reflect on my 2023 goals.&lt;/p&gt; &lt;p&gt;Let’s annotate my personal objectives. For the details, I’ll refer you to &lt;a href="/2023-goals.html"&gt;the relevant blog post&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="musical_note"&gt;🎵&lt;/span&gt; learning the Ukulele &lt;ul&gt; &lt;li&gt;I would say I’m on a good path to achieve this goal &lt;/li&gt; &lt;li&gt;I can say I can play a few songs, I’m a long way to mastery but I will at least play for kids at the daycare &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="pen"&gt;🖊️&lt;/span&gt; write roughly a substantial article per month &lt;ul&gt; &lt;li&gt;I’m definitely late on this one. The Ukulele took most of my spare time. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="camera"&gt;📷&lt;/span&gt; a photo-roll with around 30 photos I’m proud of &lt;ul&gt; &lt;li&gt;I think I have quite a few photos from my family trip to China. I haven’t taken the time to sort through them. Without much surprise, the photo-roll is gonna document time spent with my daughter. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="computer"&gt;💻&lt;/span&gt; a number of improvements to the blog-engine: &lt;ul&gt; &lt;li&gt;I’m also on a good path to achieve this goal. KitchenSink now has been documented in depth, and recently got the support for hashtags. Yay &lt;a href="/hashtags/goals.html"&gt;&lt;span class="hashtag" data-hashtag="goals"&gt;#goals&lt;/span&gt;&lt;/a&gt; . &lt;/li&gt; &lt;li&gt;I also have a PoC working for the federation-mode for the explorer but it’s probably bitrotten already. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="necktie"&gt;👔&lt;/span&gt; work-wise I’d like &lt;a href="https://echoeshq.com/"&gt;Echoes&lt;/a&gt; to jump in adoption to move to the next phase &lt;ul&gt; &lt;li&gt;Not commenting on the particular strategy/situation here &lt;span class="emoji" data-emoji="wink"&gt;😉&lt;/span&gt;. Tech-wise I’ve pushed quite a few changes and more to come as we fluidly adapt to load increases. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In summary, apart from the writing on this very blog, I’m doing quite ok on night-owl activities. I have enough draft material and ideas for a few articles already. What remains is time-budgetting.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/2023-goals-mid-year.html" rel="alternate"/>
        <summary type="text">
            Happy summer! reflecting on my yearly goals.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/triangular-decisions.html
        </id>
        <title type="text">
            Understanding decision under constraints with triangular decisions
        </title>
        <updated>
            2023-06-18T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;I want to start a series of articles on multi-criteria decisions. Since the topic is broad, I’d like to first write an article about decisions under constraints, starting with &lt;em&gt;triangular tradeoffs&lt;/em&gt;.&lt;/p&gt; &lt;h1 id="triangular-tradeoffs"&gt;Triangular tradeoffs&lt;/h1&gt; &lt;p&gt;Triangular tradeoffs are tradeoffs where you lay &lt;em&gt;options&lt;/em&gt; along the sides of a triangle, and you can only pick one corner of the triangle, leaving the opposite side unavailable (it also works if each corner is an option and you need to pick one side). You can construct a triangular trade-off with the template sentence &lt;code&gt;A,B,C - pick two&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Examples of triangular tradeoffs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Project_management_triangle"&gt;Good, Fast, Cheap&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;Consistent, Available, Partition-Tolerant&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://ricardoandlorena.com/lifestyle/money-time-energy"&gt;Energy, Money, Time&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://longform.asmartbear.com/docs/fulfillment/"&gt;Joy, Skill, Needs&lt;/a&gt; – pick two &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You probably have encountered such sentence because triangular tradeoffs arise in many contexts. The first example is a form of &lt;a href="/hashtags/project-management.html"&gt;&lt;span class="hashtag" data-hashtag="project-management"&gt;#project-management&lt;/span&gt;&lt;/a&gt; gimmick. The second example is the CAP-Theorem: an impossibility result in computer science. Whereas the two last ones are motivational frameworks to help us go on with our lives.&lt;/p&gt; &lt;p&gt;These tradeoffs have the same structure about three competing goals that we can place on triangle sides. The next section explains how to thing about triangular tradeoffs.&lt;/p&gt; &lt;h1 id="modeling-triangular-tradeoffs"&gt;modeling triangular tradeoffs&lt;/h1&gt; &lt;p&gt;The most direct representation of triangular tradeoffs is, well, to have a triangle: annotate the sides with the criteria and the &lt;em&gt;decision&lt;/em&gt; is which corner to pick. When picking a corner of a triangle, we actually chose an option which is explicitly characterized along two desireable criteria (e.g., Good and Cheap) while implicitly leaving out the third criteria (i.e., not Fast). Since a triangle has three corners, there are three possible choices. And we can illustrate the three possible choices in the following picture.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-triangle-01.png" alt="fast good cheap triangle" /&gt;&lt;/p&gt; &lt;p&gt;When we draw such a picture, we implicitly hide some information. In the triangle, each &lt;strong&gt;side represents a favorable outcome&lt;/strong&gt; of a decision. Thus, &lt;strong&gt;corner encodes a combination of independant criteria&lt;/strong&gt;. Goodness (Good or not), cost (Cheap or not), and time-to-delivery (Fast or not) are the three independant criteria.&lt;/p&gt; &lt;p&gt;Let’s give a numerical representation to each criteria, say &lt;code&gt;1&lt;/code&gt; represents the favorable outcome and &lt;code&gt;0&lt;/code&gt; represents the unfavorable outcome. For instance, &lt;code&gt;1&lt;/code&gt; is Good, and &lt;code&gt;0&lt;/code&gt; is not-Good. With this simple formalims we can then use a three-digit number like &lt;code&gt;011&lt;/code&gt; to represent various positions on the triangle. The first digit (leftmost) encodes cost, the second digit encodes goodness, and the third digit (rightmost) encodes time-to-delivery. Thus &lt;code&gt;101&lt;/code&gt; encodes &lt;code&gt;(Cheap, not-Good, Fast)&lt;/code&gt;. We can now annotate our triangle with these numbers, which is akin to giving a name to each corner:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-triangle-02.png" alt="fast good cheap triangle, annotated in binary format" /&gt;&lt;/p&gt; &lt;p&gt;In addition to giving a name to each corner, I’ve also colored each digit and the triangle-side according to the criteria they represent. The picture carries a lot of information: we started saying there are three options to chose from (each corner) and elaborated that we also chose from three criteria (individual digits). Decisions on corners or decisions on digits are inter-related: if we pick one corner we also pick three digits, the converse is true. Thus either way of deciding leads to the same result, but these decisions are different. This story becomes confusing and we are approaching the important lesson of this article. Let’s focus now on what is the relationship between deciding on corners and deciding on digits.&lt;/p&gt; &lt;h1 id="corners-or-three-digit-numbers"&gt;corners or three-digit numbers?&lt;/h1&gt; &lt;p&gt;In triangular decisions, there is some confusion about what we “chose”. Indeed, the decision we make when taking a corner of the triangle is related to (but different from) the decision we make when picking a single digit. Confusion arises due to the fact that, in the latter case, we are &lt;em&gt;deciding under constraints&lt;/em&gt;. Whereas, when picking a corner, the &lt;a href="/hashtags/constraints.html"&gt;&lt;span class="hashtag" data-hashtag="constraints"&gt;#constraints&lt;/span&gt;&lt;/a&gt; have already been resolved.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;“pick two”&lt;/strong&gt; of the triangular tradeoff template sentence actually is a constraint: we must pick a number &lt;strong&gt;so that the sum of the digits is two&lt;/strong&gt;. In contrast, &lt;strong&gt;“pick a corner”&lt;/strong&gt; is &lt;strong&gt;a shortcut to name configurations&lt;/strong&gt; which happens to have two connected sides: someone (the first human who draw a triangle) already solved the problem “the sum of digits is two” and provided us with a menu of three choices.&lt;/p&gt; &lt;p&gt;Recapitulating: with binary values to represent each of the three possible criteria, we have eight possible configurations. Further, we are given the constraint “pick two”. We formalize this constraint as &lt;code&gt;the sum of the digits is two&lt;/code&gt;. Doing so reduces the triangle tradeoff to “pick a corner” among three configurations. When &lt;a href="/decisions-are-not-outcomes.html"&gt;evaluating decisions&lt;/a&gt; this reduction of the decision space is welcome as we a smaller decision space facilitates the evaluation of a decision. What is important to internalize here is that &lt;strong&gt;the reduction in the number of configurations is not attributed to a “choice”, instead it is the application of constraints&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;We can generalize the shortcut-trick to problems having more than three binary criteria. For instance if you are used to playing board game you already know that a tetrahedron can encode “a,b,c,d – pick three” (much like a &lt;a href="https://en.wikipedia.org/wiki/Four-sided_die"&gt;four-sided die&lt;/a&gt; picks one out). Thus overall, what we want to study the general framework of applying constraints to reduce the size of a decision space.&lt;/p&gt; &lt;h1 id="deciding-under-constraints"&gt;deciding under constraints&lt;/h1&gt; &lt;p&gt;This section elaborates the general framework of decision under constraints.&lt;/p&gt; &lt;p&gt;Rather than a simple triangular decision, we are given a set of &lt;em&gt;atomic decisions&lt;/em&gt;. These are primitive decisions such as prices, delays, quality, or amounts of sugar cane. We are tasked to &lt;em&gt;decide&lt;/em&gt;. That is, among all the possible &lt;em&gt;configurations&lt;/em&gt;, we need to pick one configuration. Figuratively, we can represent a choice and (a subset of the possible configurations) as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-00.png" alt="choice configurations" /&gt;&lt;/p&gt; &lt;p&gt;In the above picture, we lay down all the small atomic decisions we have to make in gray circles, coloring these decisions means making a choice. Once we color all the circles (which I have not done in the picture because it is fastidious), we have settled on a particular configuration.&lt;/p&gt; &lt;p&gt;What makes a decision difficult is pairwise. On the first hand, the number of configurations grows exponentially with the number of atomic decisions. On the other hand, evaluating each single decision can cost much effort. Some real-world rules such as physics boundaries, personal preferences, or regulations, reduce the set of decisions we can make.&lt;/p&gt; &lt;p&gt;As the analysis of the triangular tradeoff as shown us, we have two ways to decide:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;either we make choices about one configuration in one-fell swoop &lt;/li&gt; &lt;li&gt;or we apply constraints, step back and decide on a reduced set of configurations &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following picture recapitulates these two paths. Top-left, we find our set of atomic decisions. When deciding directly (moving right) we end up with a particular configuration. Whereas we can also first apply some constraint, which means we are left to chose from a reduced set of “bundled” configurations.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-01.png" alt="direct choice pick vs choice reduction via constraints" /&gt;&lt;/p&gt; &lt;p&gt;The distinction between these two decision processes is tenuous: when we decide in one-fell swoop we shall still apply the constraints to arrive to a solution. When we have many constraints, nothing prevents to repeat the process. Indeed, decisions can also take more steps. At each decision step, applying some constraints bundles some configurations from the previous decision-step.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-02.png" alt="multi steps reductions" /&gt;&lt;/p&gt; &lt;p&gt;Other decision-making processes can exist as well if we change slightly the definition of “decision”. For instance, let’s extend the “decision” step with the added power to eliminate at least one-value. That is to say, we can make the decision to do a tiny bit of progress by reducing the set of candidates. Using, this decision repeatedly betweeen applications of some constraints also drive us towards a final decision. Potentially, the final decision happens when a single configuration is left over.&lt;/p&gt; &lt;p&gt;Further, we could extend this process so that a decision step could influence the constraints (e.g., re-ordering them or even creating new ones). Such a technique could allow to capture secondary goals when some condition on the left over combinations happens (e.g., when two options are acceptably performant, consider some risk-threshold before making a by-cost tie-break).&lt;/p&gt; &lt;p&gt;We can illustrate (two steps) of such a process as follows. &lt;img src="/gen/images/mcd-process-01.dot.png" alt="method" /&gt;&lt;/p&gt; &lt;p&gt;Summarizing, we’ve describes a pretty general decision-making process for decisions under constraints. This process is “recursive” (or fractal and prone to self-references if you prefer): the choice we make when pruning configuration or when picking a constraint for the next step, in itself, is a deicsion. This process is mechanical and deterministic as we can describe it with such graphs. Therefore, if our decision-making process were perfect, &lt;strong&gt;we should end up chosing the same configuration in either path&lt;/strong&gt;. On the opposite, we ultimately make &lt;em&gt;informed-guesses&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;An &lt;a href="/hashtags/informed-guess.html"&gt;&lt;span class="hashtag" data-hashtag="informed-guess"&gt;#informed-guess&lt;/span&gt;&lt;/a&gt; is a nice euphemism for instinct-based decisions. There is nothing wrong with such informed-guesses. Indeed, if we annotate the picture from my article about &lt;a href="/decisions-are-not-outcomes.html"&gt;“judging decisions, not outcomes”&lt;/a&gt;, we see that applying constraints to a problem will either reduce the enumeration difficulty or change the evaluation difficulty (e.g., because the constraint pruned some options which required some rare expertise before continuing).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-03.png" alt="direct choice pick vs choice reduction via constraints" /&gt;&lt;/p&gt; &lt;p&gt;Although there is nothing wrong with an informed guess, they are easy to conflate with a rushed decision. In appearance, the shortcut we took in triangular tradeoffs is beneficial because we started from eight configurations and ended up with three configurations. We discarded some solutions subject to related constraints. For instance, admit that “pick at most two” rather than “pick exactly two” is a valid representation of our business case. We then admit more than three solutions (we now have seven solutions). Solutions under the “pick at most two” constraint could be beneficial on other factors that you have not yet accounted for. As a result people tend to challenge solutions with their own interpretation of business rules. Such disagreement can be frustrating. In short, keep in mind that the solution “neither fast, nor cheap, nor good” actually exists and someone, somewhere, may be championing this solution as an alternative to yours. My recommendation against corporate-decisions paralysis is to document decision processed (e.g., via &lt;a href="/talks.html#design-doc-template"&gt;design docs&lt;/a&gt;) so that constraints and evaluation criteria are spelled out.&lt;/p&gt; &lt;h2 id="summary-and-conclusion"&gt;Summary and conclusion&lt;/h2&gt; &lt;p&gt;We discuss the process of deciding under constraints. Starting, from the example of triangular tradeoffs. Such problems asks people to make a pick among three options. These three options actually capture a &lt;em&gt;configuration&lt;/em&gt; among three distinct binary decisions (e.g., good or bad, fast or slow, cheap or expensive). Seemingly we should have to pick among eight configurations. The difference between the two approaches to a same problem is that we applied a constraint (“pick two”) and renamed to three possible configurations.&lt;/p&gt; &lt;p&gt;We then generalize the constraint-application step and sketch a decision-framework of iterative changes to an initial problem. The framework is pretty general and typically the goal is to restrict the number of configurations enough that some instinct-based decision becomes possible. In corporate context, this decision-process is often split among multiple people at various hierarchical ranks.&lt;/p&gt; &lt;p&gt;Real-world decision-making is messy: models capture a biased and sparse vision of reality. Further, our constraint-solving ability is also imperfect: we may misrepresent constraints and economical realities binds us. Ultimately, we make informed guess. In such situation, we need to remember that the final-decision often is an instinct-based decision or frustration will prevail.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="app-err"&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/triangular-decisions.html" rel="alternate"/>
        <summary type="text">
            Real-world decisions are tradeoffs under constraints. We like to simplify some tradeoffs with triangular decisions like "cheap, good, fast -- pick two". Let's see what we can learn from these triangles.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/2023-goals.html
        </id>
        <title type="text">
            2023
        </title>
        <updated>
            2023-01-08T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Happy new-year.&lt;/p&gt; &lt;p&gt;Having closed 2022 and now started 2023 for a few days already, I am happy to wish you an happy new year 2023.&lt;/p&gt; &lt;p&gt;Here are a number of personal goals I record, trying to set some goals&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="musical_note"&gt;🎵&lt;/span&gt; learning the Ukulele &lt;ul&gt; &lt;li&gt;my main motivator is to sing a few kids songs occasionally and during vacations with friends tes &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="pen"&gt;🖊️&lt;/span&gt; write roughly a substantial article per month (I judge 10 articles from 2022 to meet the bar) &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="camera"&gt;📷&lt;/span&gt; a photo-roll with around 30 photos I’m proud of &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="computer"&gt;💻&lt;/span&gt; a number of improvements to the blog-engine: &lt;ul&gt; &lt;li&gt;in-markdown keywords to increase the value of Kitchen-Sink as note-taking &lt;/li&gt; &lt;li&gt;federation-mode for the explorer (i.e., to connect other blogs) &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="necktie"&gt;👔&lt;/span&gt; work-wise I’d like &lt;a href="https://echoeshq.com/"&gt;Echoes&lt;/a&gt; to jump in adoption to move to the next phase &lt;ul&gt; &lt;li&gt;I believe we already have a good offering but we’ve quite a few ideas to provide even more features &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/2023-goals.html" rel="alternate"/>
        <summary type="text">
            Happy new year!
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/decisions-are-not-outcomes.html
        </id>
        <title type="text">
            Decisions are not outcomes
        </title>
        <updated>
            2022-12-11T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Decisions are commodities of our lives: from the second we wake up and until we fall asleep, we are bound to make &lt;a href="/hashtags/decisions.html"&gt;&lt;span class="hashtag" data-hashtag="decisions"&gt;#decisions&lt;/span&gt;&lt;/a&gt; to progress during the day. Most decisions we make are inconsequential: which shirt to pick, what flavour of ice cream to eat, and so on and so forth. As a result, we may easily fool ourselves that we are good at making decisions. In practice, gauging whether a decision is good or not is more difficult than it appears. In particular, we tend to conflate good decisions with good &lt;a href="/hashtags/outcomes.html"&gt;&lt;span class="hashtag" data-hashtag="outcomes"&gt;#outcomes&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="decisions-and-situations"&gt;Decisions and situations&lt;/h1&gt; &lt;p&gt;If we want to improve our decision making, we need to train ourselves to assess the quality of decisions independently from the outcomes of the decisions.&lt;/p&gt; &lt;p&gt;When we think what making good decisions entails, we often think about decisions that will &lt;em&gt;improve&lt;/em&gt; things. And a common mistake people do when gauging decisions is to gauge the outcome. Indeed, we also make decisions that leave us &lt;em&gt;indifferent&lt;/em&gt;. And, alas, sometimes we need to make the &lt;em&gt;least worst&lt;/em&gt; decision.&lt;/p&gt; &lt;p&gt;Let’s illustrate these three situations with a series of trivial examples. For each example, you have two options: &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; and only one of the option can be chosen.&lt;/p&gt; &lt;div class="col3"&gt; &lt;pre&gt;&lt;code&gt;Situation-1 option-A: - gain $50 option-B: - gain $100 &lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;Situation-2 option-A: - gain $100,000,050 option-B: - gain $100,000,100 &lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;Situation-3 option-A: - lose $100 option-B: - lose $50 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;In each of the three situations above, &lt;code&gt;option-B&lt;/code&gt; is always more favorable than &lt;code&gt;option-A&lt;/code&gt;. As a result, someone making good decisions would always pick &lt;code&gt;option-B&lt;/code&gt; over &lt;code&gt;option-A&lt;/code&gt;. Furthermore, &lt;code&gt;option-B&lt;/code&gt; is always &lt;code&gt;$50&lt;/code&gt; better than &lt;code&gt;option-A&lt;/code&gt;, somehow, to most people in Situation-2, either options will feel indifferent.&lt;/p&gt; &lt;p&gt;An important observation in the above example is that any outcome of Situation-2 is preferred over any outcome of Situation-1, which in turn is preferred over any outcome of Situation-3. As a result, a person in Situation-3 taking &lt;code&gt;option-B&lt;/code&gt; makes better decisions than a person in Situation-2 taking &lt;code&gt;option-A&lt;/code&gt;! meanwhile, the person in Situation-2 taking &lt;code&gt;option-A&lt;/code&gt; is in a significantly better place than the person in Situation-3 taking &lt;code&gt;option-B&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The three situations above teach us the following: &lt;em&gt;how-good a decision is independent from how-good an outcome is&lt;/em&gt;. Further, to gauge whether a decision is good or not, one must characterize the set of &lt;em&gt;available options&lt;/em&gt; and then compare options with each other. In short: given a same situation, would you pick the same choice or not? Comparing options differs from comparing &lt;em&gt;unreachable situations&lt;/em&gt; with each other.&lt;/p&gt; &lt;h1 id="distinguishing-between-decisions-and-situation-changes"&gt;Distinguishing between decisions and situation-changes&lt;/h1&gt; &lt;p&gt;The key to distinguish between attainable options and unreachable situations is to understand whether an outcome is too-good-to-be-true &lt;span class="emoji" data-emoji="tm"&gt;™️&lt;/span&gt;. Rational actors would switch to a better situation if they could because &lt;strong&gt;chosing poorly in a good situation results in better outcomes than chosing perfectly in a poor situation&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Thus, a first characteristics is that situations define a range of outcomes whereas decisions merely move the needle withing a range of outcomes. Thus, two situation-changing “decisions” are easy to distinguish because there is some boundary (or minimal overlap) between the ranges of achievable outcomes after taking a decision.&lt;/p&gt; &lt;p&gt;For people with a more “visual mind”, we could depict these differences as follows. Three situations (the range &lt;code&gt;[----]&lt;/code&gt;) with a needle (the &lt;code&gt;-o-&lt;/code&gt;). Options would move the needle around whereas situation changes would flip your situation to another row.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; range of possible outcomes |--------------------------------------------------| situation Alpha: [-------------o--------] situation Beta: [--------o-] situation Gamma: [o--------------] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The ranges in the example above characterize different &lt;a href="/hashtags/situations.html"&gt;&lt;span class="hashtag" data-hashtag="situations"&gt;#situations&lt;/span&gt;&lt;/a&gt;: the available choices for routine decisions are close to each other and result in marginal changes of outcome. Thus, hypotetically, after taking a first option and re-assessing the situation: would your routine decisions (for which you are mostly indifferent) fall on a similar continuum as if you had taken another option first? If you answer yes, the option you are assessing is a situation-changing option.&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="exclamation"&gt;❗&lt;/span&gt; Note, if you are a manager of technical people, suggesting that switching situations is a mere decition will cross your interlocutor because hypothesizing unrealistic options implies an obvious situation-changing choice is not being made (i.e., it implies that your interlocutor is stupid). Questions like “&lt;strong&gt;why don’t you just&lt;/strong&gt; replace system-XYZ” will be received as a sort of “stop-being-poor” insult or as intellectual-laziness. Not be the brainstorm-session ice-breaker you hoped for.&lt;/p&gt; &lt;p&gt;Alas, lines are often blurry. In business settings especially, situations that are unreachable to one may be reachable at an upper management echelon. In particular, the role of strategy is to put you in good situations, whereas the role of tactics is to make good decisions within your current situation.&lt;/p&gt; &lt;p&gt;Some business-settings examples of decisions among available options could be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;hire a new employee or keep on course &lt;/li&gt; &lt;li&gt;implement a piece of logic inside the DB or in the controller or in the model or in the view &lt;/li&gt; &lt;li&gt;build anew or maintain a system &lt;/li&gt; &lt;li&gt;should I investigate an issue by looking at changes or looking at logs or doing some reproduction checks &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Some situation-changing decisions between unreachable (to most except C-suite people) situations could be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;stop paying for mission-critical systems to build in house &lt;/li&gt; &lt;li&gt;replace the whole team or keep on course &lt;/li&gt; &lt;li&gt;stop or not a money-making business-line with low profit-margins &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In my experience, people mixing available options and unreachable situations happens on a regular basis. Probably not in extreme cases like my example above, where people recognize that transitory situations will exist. Making realistic plans require hard work to draw a picture of how a company could move from one situation to another one.&lt;/p&gt; &lt;h1 id="making-better-decisions"&gt;Making better decisions&lt;/h1&gt; &lt;p&gt;Now we understand that a situation constrains the set of choices one can make. Within this set of choice, then we still want to make good decisions.&lt;/p&gt; &lt;p&gt;To make good decisions you need to start with enumerating available options, and enumerating and evaluating options is almost all there is to good-decisions making. Alas the enumeration itself can take too long or the evaluation may fall short due to lack of information.&lt;/p&gt; &lt;p&gt;If we draw these two dimensions on a board, we can split decision-making in four broad quadrants.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/weighing-decisions-quadrants.png" alt="decision quadrants along evaluation difficulty and enumeration difficulty axes" /&gt;&lt;/p&gt; &lt;p&gt;Bottom-left are “easy decisions”: in these cases, intuitive choices are good enough. You can easily convince yourself which option is better and people coming after you gauging and revisiting your choices with hindsight will easily realize you were right.&lt;/p&gt; &lt;p&gt;Top-left are high-cost decisions that are amenable to scrutinization. Many (software) engineering situations fall in this quadrant: choices are few but evaluation is difficult. In this quadrant, I recommend to use evaluation matrices and other tools like design docs (you’ll find a template on the &lt;a href="/talks.html"&gt;talks-and-docs page&lt;/a&gt;) to formalize &lt;strong&gt;and record&lt;/strong&gt; how decisions were made.&lt;/p&gt; &lt;p&gt;Bottom-right are low-cost but numerous decisions. These choice happen when a seemingly-single choice actually consists of a combination of choices and where evaluation can be automated without too much guesswork. &lt;a href="/topics/optimization.html"&gt;optimizations frameworks&lt;/a&gt; allows to enumerate and compare choices efficiently. For these techniques to work on needs to restrict the decisions to some formal and limited model of our reality.&lt;/p&gt; &lt;p&gt;Finally, in the difficult top-right quadrant, you may not be able to make a good decisions. The only reassuring thing is that if you cannot devise a good choice, your competitors likely are in a similar situation. In such a situation what is key is to understand the range of outcomes in best/worst/average situations, and assessing whether investing efforts in better decisions is offset by the outcome. Thus, you need some preliminary investigation to justify whether rolling a dice is an okay-move or not. If high-stakes are at play (that is if the range of outcomes are such that making a good decision is actually critical), I’d say that the best thing to do is to seek help from people with modeling, simulation, and/or scientific-experiments experience.&lt;/p&gt; &lt;h1 id="summary"&gt;Summary&lt;/h1&gt; &lt;p&gt;Decisions are choices in a set of options. Circumstances from your situation determine the set of options available to you. Empathize with people (including your past self) to disambiguate situations having poor outcomes from poor decisions. What is key is: given the same input and the same situation, would I still chose the same option?&lt;/p&gt; &lt;p&gt;In business settings, be careful to distinguish when decisions are tactical (i.e., trying to improve the outcome by making some choices) from when decisions are strategical (i.e., trying to improve the outcome by changing the range of choices). When the strategy attempts such a transformation, often what is amiss is a picture to move smoothly between two disconnected situations.&lt;/p&gt; &lt;p&gt;When deciding within options, your decision-making quality is a direct output of how thorough is your assessment of the set of available options (the enumeration) and your assessment of how good are options (the evaluation). Once you have these, making a good decision is a matter of ranking among choices. Keep in mind that analyzing choices has a cost, and the effort made to enumerate and rank choices should be smaller than the difference in outcomes between good and bad decisions. To help during this process, you should rely on decision frameworks like design-docs and mathematical modeling. Experts can help you with these.&lt;/p&gt; &lt;p&gt;I hope that, in retrospect, you’ll think that reading this article was a good decision &lt;span class="emoji" data-emoji="grimacing"&gt;😬&lt;/span&gt;. Have a good day!&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/decisions-are-not-outcomes.html" rel="alternate"/>
        <summary type="text">
            Deciding is difficult, we always want to improve our decision making. What's more or at least as difficult? gauging whether a decision is good or not.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/halogen-echarts-example.html
        </id>
        <title type="text">
            Halogen ECharts Simple
        </title>
        <updated>
            2022-12-10T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div id="example-err"&gt; &lt;/div&gt; &lt;p&gt;This page is a demonstration of a &lt;a href="https://github.com/lucasdicioccio/purescript-halogen-echarts-simple"&gt;ECharts-for-Halogen&lt;/a&gt; library I published. The library spawned out of this very-blog (or rather, from &lt;a href="kitchensink-tech.github.io/"&gt;Kitchen-Sink&lt;/a&gt;) to display the page graph on the home page.&lt;/p&gt; &lt;h2 id="installation"&gt;Installation&lt;/h2&gt; &lt;p&gt;Assuming you use &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;spago&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;npm i echarts spago install halogen-echarts-simple &lt;/code&gt;&lt;/pre&gt; &lt;h2 id="usage"&gt;Usage&lt;/h2&gt; &lt;p&gt;The &lt;code&gt;simple&lt;/code&gt; in the title means that we provide a very simple layer. That is, you have to fill in the blanks.&lt;/p&gt; &lt;p&gt;What this library offers is a function to return Halogen components provided that you teach it:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(a) what is the type of the &lt;code&gt;options&lt;/code&gt; object passed to EChart &lt;/li&gt; &lt;li&gt;(b) what sort of click-callback objects you care to capture &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;type Options o = {|o}&lt;/code&gt; definition embodies the &lt;code&gt;(a)&lt;/code&gt; above. The &lt;code&gt;type Output i = {|i}&lt;/code&gt; definition embodies the &lt;code&gt;(b)&lt;/code&gt; above.&lt;/p&gt; &lt;p&gt;You thus need some boilerplate work to type and translate the various ECharts datatypes (with its flurry of possible branches). That is, rather than trying to build a all-you-can-eat-buffet type that would match every ‘options’, we prefer to restrict ourselves to &lt;em&gt;simple&lt;/em&gt; situations where a given graph has exactly one type. Besides the boilerplate, there probably are limitations (I have not tried the most advanced charts options involving JavaScript functions yet). For situations where the ECharts options merely are uniform data, the boilerplate work should be pretty straightforward.&lt;/p&gt; &lt;h2 id="example-simple-line-chart"&gt;example: simple line chart&lt;/h2&gt; &lt;p&gt;Here we start translating &lt;a href="https://echarts.apache.org/examples/en/editor.html?c=line-simple"&gt;the line-simple example&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="purescript-definitions"&gt;Purescript definitions&lt;/h3&gt; &lt;p&gt;We need two things to make the example work: a Slot for your Halogen component, and a type to teach PureScript what is the shape of the &lt;code&gt;options&lt;/code&gt; object for ECharts.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Slots&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; (&lt;span class="ot"&gt; echarts ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; query output&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;H.Slot&lt;/span&gt; query output &lt;span class="dt"&gt;Unit&lt;/span&gt; &lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; )&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;_echarts &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;echarts&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleOptions&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; xAxis ::&lt;/span&gt; {&lt;span class="ot"&gt; type ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;,&lt;span class="ot"&gt; data ::&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; yAxis ::&lt;/span&gt; {&lt;span class="ot"&gt; type ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; series ::&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; {&lt;span class="ot"&gt; data ::&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="ot"&gt; type ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="single-line"&gt;single line&lt;/h3&gt; &lt;p&gt;Then we can call &lt;code&gt;ECharts.component&lt;/code&gt; to turn options into an Halogen Component, which you include in a Slot thanks to the &lt;code&gt;HH.slot_&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;Thus, the rendering function for your enclosing component needs to call &lt;code&gt;ECharts.components&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; render0 = let obj :: SimpleExampleOptions obj = { xAxis: {type: &amp;quot;category&amp;quot;, data: [&amp;quot;Mon&amp;quot;, &amp;quot;Tue&amp;quot;, &amp;quot;Wed&amp;quot;, &amp;quot;Thu&amp;quot;, &amp;quot;Fri&amp;quot;, &amp;quot;Sat&amp;quot;, &amp;quot;Sun&amp;quot;]} , yAxis: {type: &amp;quot;value&amp;quot;} , series: [{type: &amp;quot;line&amp;quot;, data: [150, 230, 224, 218, 135, 147, 260]}] } in HH.div_ [ HH.text &amp;quot;echarts simple-line example&amp;quot; , HH.slot_ _echarts unit ECharts.component {options: obj, modified:false} ] &lt;/code&gt;&lt;/pre&gt; &lt;div id="example-0"&gt; &lt;/div&gt; &lt;script src="/js/halogen-echarts-example.js" data-humdrum-arg="0"&gt;&lt;/script&gt; &lt;h3 id="two-lines"&gt;two lines&lt;/h3&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; render1 &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; obj ::&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleOptions&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; obj &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; { xAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;Mon&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Tue&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Wed&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Thu&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Fri&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sat&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sun&amp;quot;&lt;/span&gt;]}&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , yAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;}&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , series&lt;span class="op"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="dv"&gt;150&lt;/span&gt;, &lt;span class="dv"&gt;230&lt;/span&gt;, &lt;span class="dv"&gt;224&lt;/span&gt;, &lt;span class="dv"&gt;218&lt;/span&gt;, &lt;span class="dv"&gt;135&lt;/span&gt;, &lt;span class="dv"&gt;147&lt;/span&gt;, &lt;span class="dv"&gt;260&lt;/span&gt;]}&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="dv"&gt;250&lt;/span&gt;, &lt;span class="dv"&gt;130&lt;/span&gt;, &lt;span class="dv"&gt;254&lt;/span&gt;, &lt;span class="dv"&gt;318&lt;/span&gt;, &lt;span class="dv"&gt;137&lt;/span&gt;, &lt;span class="dv"&gt;247&lt;/span&gt;, &lt;span class="dv"&gt;160&lt;/span&gt;]}&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span id="13"&gt;&lt;a href="#13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; HH.div_&lt;/span&gt; &lt;span id="14"&gt;&lt;a href="#14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HH.text &lt;span class="st"&gt;&amp;quot;echarts simple-line example with two data-lines&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="15"&gt;&lt;a href="#15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.slot_ _echarts unit ECharts.component {options&lt;span class="op"&gt;:&lt;/span&gt; obj, modified&lt;span class="op"&gt;:&lt;/span&gt;false}&lt;/span&gt; &lt;span id="16"&gt;&lt;a href="#16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="example-1"&gt; &lt;/div&gt; &lt;script src="/js/halogen-echarts-example.js" data-humdrum-arg="1"&gt;&lt;/script&gt; &lt;h3 id="interactive"&gt;interactive&lt;/h3&gt; &lt;p&gt;We need to define some action for our enclosing component. The component has an event for a numeric HTML input form.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;data DemoAction = SetChart2Offset String &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can update the ECharts options at each re-render.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; render2 offset &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ys &lt;span class="ot"&gt;=&lt;/span&gt; [&lt;span class="dv"&gt;150&lt;/span&gt;, &lt;span class="dv"&gt;230&lt;/span&gt;, &lt;span class="dv"&gt;224&lt;/span&gt;, &lt;span class="dv"&gt;218&lt;/span&gt;, &lt;span class="dv"&gt;135&lt;/span&gt;, &lt;span class="dv"&gt;147&lt;/span&gt;, &lt;span class="dv"&gt;260&lt;/span&gt;]&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; obj ::&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleOptions&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; obj &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; { xAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;Mon&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Tue&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Wed&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Thu&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Fri&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sat&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sun&amp;quot;&lt;/span&gt;]}&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , yAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;}&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , series&lt;span class="op"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; ys }&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (\v &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; v &lt;span class="op"&gt;+&lt;/span&gt; offset) ys}&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt; &lt;span id="13"&gt;&lt;a href="#13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span id="14"&gt;&lt;a href="#14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; HH.div_&lt;/span&gt; &lt;span id="15"&gt;&lt;a href="#15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HH.p_ [ HH.text &lt;span class="st"&gt;&amp;quot;echarts simple-line example with an offset&amp;quot;&lt;/span&gt; ]&lt;/span&gt; &lt;span id="16"&gt;&lt;a href="#16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.p_ [ HH.text &lt;span class="st"&gt;&amp;quot;we update the offset with the value in the input below:&amp;quot;&lt;/span&gt; ]&lt;/span&gt; &lt;span id="17"&gt;&lt;a href="#17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.input&lt;/span&gt; &lt;span id="18"&gt;&lt;a href="#18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HP.type_ &lt;span class="dt"&gt;HP.InputNumber&lt;/span&gt;&lt;/span&gt; &lt;span id="19"&gt;&lt;a href="#19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HP.value &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; offset&lt;/span&gt; &lt;span id="20"&gt;&lt;a href="#20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HE.onValueInput &lt;span class="dt"&gt;SetChart2Offset&lt;/span&gt;&lt;/span&gt; &lt;span id="21"&gt;&lt;a href="#21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="22"&gt;&lt;a href="#22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.slot_ _echarts unit ECharts.component {options&lt;span class="op"&gt;:&lt;/span&gt; obj, modified&lt;span class="op"&gt;:&lt;/span&gt;true}&lt;/span&gt; &lt;span id="23"&gt;&lt;a href="#23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="24"&gt;&lt;a href="#24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="25"&gt;&lt;a href="#25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; handleAction &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; _ &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="26"&gt;&lt;a href="#26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;SetChart2Offset&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt; &lt;span id="27"&gt;&lt;a href="#27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;fromString str &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="28"&gt;&lt;a href="#28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;pure&lt;/span&gt; unit&lt;/span&gt; &lt;span id="29"&gt;&lt;a href="#29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; n &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; H.modify_ _ { chart2Offset &lt;span class="ot"&gt;=&lt;/span&gt; n }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="example-2"&gt; &lt;/div&gt; &lt;script src="/js/halogen-echarts-example.js" data-humdrum-arg="2"&gt;&lt;/script&gt; &lt;h3 id="catching-clicks"&gt;catching clicks&lt;/h3&gt; &lt;p&gt;Say we want to add handlers to catch clicks on the chart. ECharts has &lt;a href="https://echarts.apache.org/handbook/en/concepts/event/#"&gt;some provisions for such events&lt;/a&gt; and with a bit of boilerplate we can recover the event data.&lt;/p&gt; &lt;p&gt;Note that, much like for Options types we pass to ECharts, we need to type the sort event data we expect to receive from the JavaScript callback, and prepare an action for the enclosing component.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleEvent&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; (&lt;span class="ot"&gt; name ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; seriesIndex ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; dataIndex ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; )&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;DemoAction&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SetChart2Offset&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chart3Event&lt;/span&gt; (&lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleEvent&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Now our component rendering and handling actions can be as follows:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; render3 item &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; obj ::&lt;/span&gt; &lt;span class="dt"&gt;SimpleExampleOptions&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; obj &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; { xAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;Mon&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Tue&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Wed&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Thu&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Fri&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sat&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Sun&amp;quot;&lt;/span&gt;]}&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , yAxis&lt;span class="op"&gt;:&lt;/span&gt; {&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;}&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , series&lt;span class="op"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="dv"&gt;150&lt;/span&gt;, &lt;span class="dv"&gt;230&lt;/span&gt;, &lt;span class="dv"&gt;224&lt;/span&gt;, &lt;span class="dv"&gt;218&lt;/span&gt;, &lt;span class="dv"&gt;135&lt;/span&gt;, &lt;span class="dv"&gt;147&lt;/span&gt;, &lt;span class="dv"&gt;260&lt;/span&gt;]}&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,{&lt;span class="kw"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="dv"&gt;250&lt;/span&gt;, &lt;span class="dv"&gt;130&lt;/span&gt;, &lt;span class="dv"&gt;254&lt;/span&gt;, &lt;span class="dv"&gt;318&lt;/span&gt;, &lt;span class="dv"&gt;137&lt;/span&gt;, &lt;span class="dv"&gt;247&lt;/span&gt;, &lt;span class="dv"&gt;160&lt;/span&gt;]}&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; renderItem &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; item &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="13"&gt;&lt;a href="#13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; HH.p_ [ HH.text &lt;span class="st"&gt;&amp;quot;nothing clicked&amp;quot;&lt;/span&gt; ]&lt;/span&gt; &lt;span id="14"&gt;&lt;a href="#14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; r &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; HH.div_&lt;/span&gt; &lt;span id="15"&gt;&lt;a href="#15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HH.h6_ [ HH.text &lt;span class="st"&gt;&amp;quot;some click!&amp;quot;&lt;/span&gt; ]&lt;/span&gt; &lt;span id="16"&gt;&lt;a href="#16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.p_ [ HH.text r&lt;span class="op"&gt;.&lt;/span&gt;name ]&lt;/span&gt; &lt;span id="17"&gt;&lt;a href="#17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.p_ &lt;/span&gt; &lt;span id="18"&gt;&lt;a href="#18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HH.text &lt;/span&gt; &lt;span id="19"&gt;&lt;a href="#19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;$&lt;/span&gt; fold&lt;/span&gt; &lt;span id="20"&gt;&lt;a href="#20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ &lt;span class="st"&gt;&amp;quot;seriesIndex/dataIndex: &amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="21"&gt;&lt;a href="#21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , &lt;span class="fu"&gt;show&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt;seriesIndex&lt;/span&gt; &lt;span id="22"&gt;&lt;a href="#22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , &lt;span class="st"&gt;&amp;quot; / &amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="23"&gt;&lt;a href="#23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , &lt;span class="fu"&gt;show&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt;dataIndex&lt;/span&gt; &lt;span id="24"&gt;&lt;a href="#24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="25"&gt;&lt;a href="#25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="26"&gt;&lt;a href="#26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="27"&gt;&lt;a href="#27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span id="28"&gt;&lt;a href="#28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; HH.div_&lt;/span&gt; &lt;span id="29"&gt;&lt;a href="#29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ HH.p_ [ HH.text &lt;span class="st"&gt;&amp;quot;echarts simple-line example with clickable callback&amp;quot;&lt;/span&gt; ]&lt;/span&gt; &lt;span id="30"&gt;&lt;a href="#30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , renderItem&lt;/span&gt; &lt;span id="31"&gt;&lt;a href="#31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , HH.slot _echarts unit ECharts.component {options&lt;span class="op"&gt;:&lt;/span&gt; obj, modified&lt;span class="op"&gt;:&lt;/span&gt;false} &lt;span class="dt"&gt;Chart3Event&lt;/span&gt;&lt;/span&gt; &lt;span id="32"&gt;&lt;a href="#32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="33"&gt;&lt;a href="#33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="34"&gt;&lt;a href="#34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; handleAction &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; _ &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="35"&gt;&lt;a href="#35" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Chart3Event&lt;/span&gt; ev &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt; &lt;span id="36"&gt;&lt;a href="#36" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; H.modify_ _ { chart3ClickEvent &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; ev }&lt;/span&gt; &lt;span id="37"&gt;&lt;a href="#37" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="example-3"&gt; &lt;/div&gt; &lt;script src="/js/halogen-echarts-example.js" data-humdrum-arg="3"&gt;&lt;/script&gt; &lt;h2 id="the-modified--bool-input-parameter"&gt;the &lt;code&gt;modified :: Bool&lt;/code&gt; Input parameter&lt;/h2&gt; &lt;p&gt;From the above example you may have noticed that the Input object requires extra information. In particular, the &lt;code&gt;modified&lt;/code&gt; boolean allows you to tune whether you want to re-render the graph each time the component is re-rendered or only using the explicit Query-ing mechanism that Halogen offers. Typically you will hardcode the &lt;code&gt;modified&lt;/code&gt; value depending on how often component re-renders are in your application.&lt;/p&gt; &lt;h2 id="full-source-code"&gt;full source-code&lt;/h2&gt; &lt;p&gt;You’ll find the full source-code of the generated JavaScript in a &lt;a href="/gen/out/halogen-echarts-example.cmark__Main.purs"&gt;separate file&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The source-code uses &lt;a href="https://github.com/lucasdicioccio/purescript-humdrum"&gt;HumDrum&lt;/a&gt; to be able to insert a same JS file one time per different example.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;want more examples? contact me&lt;/strong&gt;&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/halogen-echarts-example.html" rel="alternate"/>
        <summary type="text">
            A demo of a [ECharts-for-Halogen](https://github.com/lucasdicioccio/purescript-halogen-echarts-simple) library.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/kitchen-sink.html
        </id>
        <title type="text">
            Introducing Kitchen Sink
        </title>
        <updated>
            2022-10-01T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Kitchen Sink embodies my way of imagining personal sites: messy but allows to experiment with a bit of everything. Personal and &lt;a href="/hashtags/experimental.html"&gt;&lt;span class="hashtag" data-hashtag="experimental"&gt;#experimental&lt;/span&gt;&lt;/a&gt;, but still built on solid &lt;a href="/hashtags/foundations.html"&gt;&lt;span class="hashtag" data-hashtag="foundations"&gt;#foundations&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Rather than writing a long post here, this page only is an announcement. You’ll find long post on the project’s website.&lt;/p&gt; &lt;p&gt;I encourage you to read these Kitchen-Sink links here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://kitchensink-tech.github.io/philosophy.html"&gt;The Kitchen-Sink Philosophy&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://kitchensink-tech.github.io/features.html"&gt;A feature list&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/kitchensink-tech/kitchensink"&gt;The code on GitHub&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/kitchen-sink.html" rel="alternate"/>
        <summary type="text">
            After having written a [number of articles](/topics/web.html) about my blog-engine. And motivated by curious people wanting to see how it's built, I've open-sourced my blog-engine and named it _Kitchen Sink_.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/always-refactoring.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-2]
        </title>
        <updated>
            2022-09-14T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class=".note"&gt; &lt;p&gt;This article is the second in a series of articles on refactoring.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;From a non-developer viewpoint, it may be hard to connect with developers who are &lt;strong&gt;always refactoring&lt;/strong&gt;. I wrote this article to fill a gap I noticed during multiple discussions with non-technical stakeholders: some stakeholders have the feeling that tech teams are “always refactorin’”. Depending on the type of relationships between developers and other roles, the question whether to refactor or not can become a point of acute tension.&lt;/p&gt; &lt;h1 id="refactoring-to-support-project-scope-changes"&gt;Refactoring to support &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; changes&lt;/h1&gt; &lt;p&gt;Let’s recollect what we introduced in the &lt;a href="/what-is-the-project-scope.html"&gt;previous article about project scopes&lt;/a&gt; and the &lt;a href="/scope-explorer.html"&gt;complementary toy-application&lt;/a&gt;. As software projects grow, we accumulate code to enable features.&lt;/p&gt; &lt;p&gt;When a new feature is required, we are faced with an easy decision: pause in-progress work and prioritize on new features or continue on what is in progress. Conversely, when a new technical or process requirement pops-up, we are faced with more difficult decisions: we need to revisit everything in scope that has been shipped already. A decision to implement or postpone is required for each individual feature already shipped and in scope. Typically, one can live with some gaps for some time (e.g., missing tests, hardcoded parameters, outdated libraries, manual approval in an otherwise automated process, un-even edge-case coverages for two flavors of a same system). However, at some point the infamous &lt;em&gt;technical debt&lt;/em&gt; weighs too much and a feature can be considered unfinished. In short, as requirements pile-up there is some risk that your &lt;strong&gt;effective coverage reduces even though the amount of delivered tasks increases&lt;/strong&gt;, an effect that I refer to as a &lt;em&gt;coverage cave-in effect&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-timeline.png" alt="scope can suffer from cave-in" /&gt;&lt;/p&gt; &lt;p&gt;Refactoring is an attempt at mitigating cave-ins for upcoming requirements. The mitigation can be either anticipated or reacted-upon. If you anticipated, you do not observe the “cave-in” gap but the totalled amount of refactoring work incurs some delay. If the refactoring work is reactive you get to do the same amount of work anyway, except that you do it while your effective coverage is reduced. Overall, engineers tend to like refactors: they will recognize the risks of cave-ins and will often express the need to “refactor first”. As refactor are pushed in the future engineers keep discussing the need to refactoring. When the refactoring starts, it takes longer than expected and leaves even more extra work. Overall, I have witnessed, and I can see a number of scenarios in which product managers grow the feeling that engineers are always refactoring.&lt;/p&gt; &lt;h2 id="refactoring"&gt;Refactoring&lt;/h2&gt; &lt;p&gt;Refactoring is a technical task and a technical challenge: change how a component operates without affecting the external behavior. People obsessed with “customer value” raise eyebrows because a refactor brings “no value” to a product. Pedantic engineers will note that &lt;strong&gt;business value is not only customer value&lt;/strong&gt;. Indeed, engineers do not refactor for the desire of challenges: engineers refactor to reach a more favorable state than from where they started.&lt;/p&gt; &lt;p&gt;Examples of goals for refactors are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;uniformize some idioms in a code-base so that (e.g., when merging two implementations from two different maturity levels a your product) &lt;/li&gt; &lt;li&gt;keep an acceptable pain-level for people who need to maintain or operate the system &lt;/li&gt; &lt;li&gt;prepare for planned ulterior scope changes (e.g., in order to internationalize a service) &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In the first example, the value resides in paying-up some “tech debt”. In the second example, the value is pairwise: liberate resources for higher-value tasks and improve the satisfaction of team members (employee churn is an active threat to teams’ success). Finally, the third example is merely time-shifting future work into the present, without changing much the actual customer value.&lt;/p&gt; &lt;p&gt;Among engineers, some purely-technical tasks like “changing the logging format” may not be recognized as “a honest to god refactor”. Somehow, as far as our discussion is concerned, and as far as engineer-product communication goes, the decisive characteristics we care about is the absence of customer-value. The “refactoring” label merely is a shorthand for how to classify this task: it takes work but if you are not an engineer you need not know how the sausage is made.&lt;/p&gt; &lt;p&gt;Misunderstanding the goal of a refactoring task may lead to some &lt;em&gt;breach of trust&lt;/em&gt; between product and engineering &lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt;. The main catch is: developers’ happiness and morale are part of their productivity and you have an incentive and some moral obligation to create virtuous cycles rather than self-defeating feedback loops.&lt;/p&gt; &lt;h1 id="i-believe-my-team-is-always-refactoring-what-should-i-do"&gt;I believe my team is always refactoring what should I do?&lt;/h1&gt; &lt;p&gt;Now that background is setup, let start the real discussion. You are in a frustrating situation where the team delivery feels slow, and engineers seem to do refactoring over refactoring.&lt;/p&gt; &lt;h2 id="first-is-it-really-true"&gt;First, is it really true?&lt;/h2&gt; &lt;p&gt;In all companies, you need to settle on some acceptable amount of technical work, which includes refactors. In a sense, it is the “cost of doing business”. A fork of accepted technical work varies from 20% to 50% of technical work . The proportion you observe should probably fluctuate within this range and could deviate more depending on the erratic aspects of companies’ timelines.&lt;/p&gt; &lt;p&gt;However, a team deviating for too long may be a reason for concern: too little technical work probably means you are post-poning tasks you should have done already, too much time spent on technical work may mean your team lacks purposeful tasks or maybe they are circling and figuring things out (in the latter case, they need hindsights from senior engineers/architects).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/always-refactoring-tunnel-01.jpeg" alt="technical work acceptable band" /&gt;&lt;/p&gt; &lt;p&gt;As illustrated in the above picture, if you plot the fraction of work spent along time, you should expect some team to stay in the 20-50% band. In this example, the green-plain line is okay, the two dashed-lines probably deserve some investigation. The 20%-50% bracket is more a rule of thumb speaking from experience (personal, colleagues, also a &lt;a href="https://twitter.com/lucasdicioccio/status/1568665141662851073"&gt;recent Twitter poll I made in preparation of this article&lt;/a&gt;) than anything.&lt;/p&gt; &lt;p&gt;One caveat here is that you need some fair assessment of how much engineer time is taken by refactorings. From experience, I’ve seen that it may be challenging for tech leaders to provide such a fair assessment. Without turning this post into some advertisment, &lt;a href="https://www.echoeshq.com/"&gt;my current company&lt;/a&gt; provides a service to solve this question among many other questions.&lt;/p&gt; &lt;p&gt;Now, assuming that you have legitimate concerns regarding some refactoring work, let’s discuss the &lt;em&gt;timing of refactoring&lt;/em&gt;. Then we’ll discuss avenues to challenge and &lt;em&gt;push back&lt;/em&gt; a team member who wants to refactor something when you think there are better things to do.&lt;/p&gt; &lt;h2 id="the-timing-of-the-refactoring-is-key"&gt;The timing of the refactoring is key&lt;/h2&gt; &lt;p&gt;Project planning, sprint sessions, and similar corporate ceremonies are venues where teams discuss the need for refactorings. Alas, no-one is encitivized to tell the truth in such ceremonies: time or complexity estimates always are fudged and a complex meta-game between makers and askers happens around roadmaps. Such ceremonies deserve better. If your teams are always refactoring, you have likely witness a heated discussion when a developer brings up a refactoring task. In this situation, it is a good idea to keep in mind that developers will bring up refactoring tasks for a reason, and in general to avoid some functional cave-in.&lt;/p&gt; &lt;p&gt;Refactorings exist mostly to prevent some form of looming or occurred functional cave-in. Thus you cannot get a lot of information by challenging “why” people refactoring. A more interesting characteristics for a refactor is the question of “when”. A refactor can be preliminary work, wrap-up work, or intermediary work.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As preliminary work&lt;/em&gt;. Most features benefit from chunking into many small tasks. Preliminary refactors (e.g., moving all functions into some common umbrella module) are easy to plan and scope ahead of time. Consider these as stepping stones reducing the risk of a particular delivery.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As wrap-up work&lt;/em&gt;. One may consider a feature unfinished from a technical standpoint while it is already delivering on a functional standpoint. It is common to deploy some Proof of Concept early to test a feature. These Proof of Concept often are “too large”. The hindsight gained from running a system is light shedding. Engineers will find flaws and limitations in their system that would have been better handled in other ways. I would advise budgetting some time to perform such wrap-up as engineers still have a lot of working knowledge of the code. On the opposite, moving onto to new features in a haste with no time to wrap-up is a longer-term risk.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As intermediary work&lt;/em&gt;. The fractal nature of projects’ scopes and the erratic nature of scope discovery ensure that hiccups occur. Some severe obstacle may pop-up while implementing some feature (e.g., a third-party API exhibits severe rate-limitations on an endpoint you used to rely on and you need to pass some cache in a whole slice of code, adapt tests and so on). You may not be aware of most of these refactors as small refactors occur as part of the normal flow of development. Incredible delays may occur when the larger system or infrastructure require changes. A way to rationalize these intermediary refactors is to consider them preliminary or wrap-up of some subtask.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Thus, in the bad cases, for one single feature, team members may argue three times in favour of refactoring. Given that many features are discussed in ceremonies, engineers may come across as people who are always refactoring.&lt;/p&gt; &lt;p&gt;At this point, I mostly gave arguments in favor of refactor: they tend to go in the right direction. The real issue of refactoring is that they take up time from other concerns. Thus, if you feel like your team is always refactoring, the main problem is the one of arbitraging against other topics. You have two main ways to reduce the “refactoring-tax”: one one hand you can push-back on refactoring, on the other hand you can reduce the prevalence of refactoring with some prevention.&lt;/p&gt; &lt;h2 id="preventing-refactorings"&gt;Preventing refactorings&lt;/h2&gt; &lt;p&gt;In an ideal world, you never have debates about refactoring because the team orchestrate development with a perfect context and good understanding of the situational challenges of the day. As a leader you need to be candidly honest about upcoming tasks and deadlines. Having an idea for a feature it’s not the same as having a customer request and it’s not the same as having twenty customer requests. Needing something for next week is not the same as needing it for next month nor is the same as potentially needing it.&lt;/p&gt; &lt;p&gt;Summarily, engineers need to gauge the amount of uncertainty you have with a feature. Of critical importance are the following characteristics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;whether the feature will be in active use or in potential use &lt;/li&gt; &lt;li&gt;whether a requirement is definite or a sketch of an idea &lt;/li&gt; &lt;li&gt;what is the freedom for digressing &lt;/li&gt; &lt;li&gt;what are the business gains and risks &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Having this information at hand helps engineers understand how to shape the delivery of the code and associated “non-functional requirements”. For instance, if a feature requires some good amount of data-crunching, a preliminary data-exploration phase is welcome to help understand where edge cases lurk. If the task requires a system and not just some code, extra monitoring, sometimes ad-hoc, will have to be built. If engineers understand the business opportunities and risks associated with a feature, they’ll be in better place to gauge how-much these “extras” are required.&lt;/p&gt; &lt;h2 id="pushing-back-on-refactorings"&gt;Pushing back on refactorings&lt;/h2&gt; &lt;p&gt;Having in mind that refactorings are mostly-positive for the health of a software. Senior engineers on a &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; may resent push backs and even identify such push-backs as a threat to the qualify of the system. Therefore, a goal to keep in mind is not to say “no” to a refactor. Rather, a productive conversation seeks a good &lt;a href="/hashtags/tradeoff.html"&gt;&lt;span class="hashtag" data-hashtag="tradeoff"&gt;#tradeoff&lt;/span&gt;&lt;/a&gt; for every party.&lt;/p&gt; &lt;p&gt;There are a few avaialble directions to tackle a “refactor-or-not” discussion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Bluff&lt;/em&gt; it out. Bluffing is a good way to lose trust from your colleagues. You’ll come across someone who is dishonest if you bluff without success to celebrate aside. Some bluffing techniques are along delaying to improve the understanding of the system you want to refactor, or some planned work that will make the to-be-refactored system obsolete.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Clarify&lt;/em&gt; whether the refactoring is a pure-technical change or whether the refactoring enables new features. Sometimes refactoring is an enabler for pushing more feature (e.g., when you have data to filter/sort by a set of fixed criteria and suddenly it’s better to change some querying-scheme such as supporting “arbitrary” and likely-requested future criterias). This is the best situation as you’ll learn better what are/are-not low-hanging fruit features.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Characterize&lt;/em&gt; qualitatively and if possible quantitatively the friction induced by the absence of refactoring. You should be able to tell if the refactoring specifically adress the pain point. You should understand whether the gain is on the long-term or on the short-term. Maybe a piece of code is garbage, but is not touched very often leading to “one horrible day every quarter”, which may be acceptable pain.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Chunk&lt;/em&gt;. Like most software endeavours, it’s better to split refactoring in consecutive well-defined chunks. Often, one can split and time-box the refactoring effort: for instance, do some code re-organization in a first part then apply fundamental changes in a second part. If you frame a long-refactor as a low-risk migration tasks spread over weeks you also train your team for more dangerous and longer-to-rollout migrations. The risk here is that being low-ROI the task never finishes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In summary, you do not have a large number of options to push back on refactorings. Bringing more people on the team can help with a punctual increase in work. Oftentimes you’ll have a better luck ensuring the overall team momentum is maintained.&lt;/p&gt; &lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt; &lt;p&gt;Cautionary tale: challenging whether a refactoring is necessary or not is a sure-fire way to sow dissent and lose momentum. If you’ve read my long article on &lt;a href="/tactical-projects.html"&gt;successful tactical projects&lt;/a&gt;, you’ll know how much I care about momentum.&lt;/p&gt; &lt;p&gt;In general you should pay attention to functional cave-in and anticipate when your project will go sideways. Sometimes a business-requirement may ask for technical changes throughout the project (for instance, data-modeling changes incur verification on already-shipped code).&lt;/p&gt; &lt;p&gt;Allocate a fair amount of work onto technical tasks. Consider that purely-technical work is part of the cost of doing business. If engineers keep bringing-up refactorings over refactoring there are things you can do to push-back without too much trouble. Ask clarification around the functional benefits of the change, characterize with the team what pain-points the refactoring addresses, consider chunking the refactoring in a few steps to allievate only the most pressing pain-point.&lt;/p&gt; &lt;p&gt;If nothing works, consider the help from senior engineers (architects, lead-developers) because your team may lack from technical direction. Of course, if egos prevent your team members from seeking external consulting, you will have a hard time convincing them to change their way of doing thing.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/always-refactoring.html" rel="alternate"/>
        <summary type="text">
            I have ran into a number of product-owner puzzled by how often #developers in their team express a need to "refactor". Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article to demistify a bit the "always-refactoring team".
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/prometheus-monitor.html
        </id>
        <title type="text">
            Prometheus Monitor
        </title>
        <updated>
            2022-06-19T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Prometheus-monitor is a low-configuration web &lt;a href="/hashtags/application.html"&gt;&lt;span class="hashtag" data-hashtag="application"&gt;#application&lt;/span&gt;&lt;/a&gt;. Run Prometheus-Monitor to inspect data from services which expose metrics in the &lt;a href="https://prometheus.io/"&gt;Prometheus-format&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="intended-use-cases"&gt;Intended use cases&lt;/h1&gt; &lt;p&gt;Whether you are a developer running software locally or an &lt;a href="/hashtags/SRE.html"&gt;&lt;span class="hashtag" data-hashtag="SRE"&gt;#SRE&lt;/span&gt;&lt;/a&gt; investigating production hiccups, you sometimes need to inspect how a specific job behaves.&lt;/p&gt; &lt;p&gt;If you organization is mature, services probably provide logs and metrics that you collect and expose in a dashboard. In some situations, however, such platforms may feel too limited or too vast. In particular, monitoring platforms are meant to aggregate information across jobs and across time, thus if your problem is to identify how a single job operates at short time-scale you may feel limited or overwhelmed.&lt;/p&gt; &lt;p&gt;If you are a developer you likely find that configuring a whole metrics and dashboard infrastrucure is too much overhead for development purposes. As a results, counters rarely get added and low-hanging fruits around monitoring are missed. Rightfully, developers find a low return-on-efforts to pro-actively add metrics while developing new features.&lt;/p&gt; &lt;p&gt;Prometheus-monitor’s primary goal is to address such niche use cases where you need or want to focus on individual jobs or individual metrics. In particular, it is useful when your diagnostics have little repetition from one situation to another: point it to &lt;code&gt;/metrics&lt;/code&gt; endpoints and you get some live graphs to see.&lt;/p&gt; &lt;h1 id="how-to-run-it"&gt;How to run it?&lt;/h1&gt; &lt;p&gt;Prometheus-Monitor is a primitive JavaScript application so requirements are pretty low. The main operational caveat is that if the JavaScript runs in a web-page: HTTP GET queries to Prometheus endpoints are subject to CORS authorizations. The recommended way to circumvent CORS is to install the application as a browser extension.&lt;/p&gt; &lt;h2 id="firefox-extension-recommended"&gt;Firefox extension (recommended)&lt;/h2&gt; &lt;p&gt;You can install the &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/prometheus-monitor/"&gt;Firefox extension&lt;/a&gt;. An icon appears in your extension toolbar, press-it and it will open a static HTML page with the application JavaScript.&lt;/p&gt; &lt;h2 id="directly-in-the-browser"&gt;Directly in the browser&lt;/h2&gt; &lt;p&gt;The application also runs on this page if you scroll a bit below. However since the JavaScript for the application runs in-browser and CORS-limitations apply (you can proxy around – see the Troubleshooting section at the bottom of this page for some help).&lt;/p&gt; &lt;h2 id="chrome-extension"&gt;Chrome extension&lt;/h2&gt; &lt;p&gt;The submission and review process for Chrome is longer than for Firefox. My extension is currently in review. Once (if) approved, the usage will be the same as for Firefox.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="metrics" class="application"&gt; &lt;script src="/js/prometheus-monitor.js"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h1 id="in-progress"&gt;in progress&lt;/h1&gt; &lt;h2 id="bugs"&gt;bugs&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;fix bug with zombie polling threads when we go ‘too fast’ &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="small-improvements"&gt;small improvements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;some tooltips on buttons &lt;/li&gt; &lt;li&gt;prevent/highlight/keep-around exporter sources when the panel is removed and zoomed metric exist &lt;/li&gt; &lt;li&gt;styling of labels &lt;/li&gt; &lt;li&gt;group-rows by metric-name in previews &lt;/li&gt; &lt;li&gt;add headers on ajax calls &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="large-improvements"&gt;large improvements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;chart more than a timeseries on a panel &lt;/li&gt; &lt;li&gt;add minimalistic functions that could translate to Prometheus (e.g., log, unit-changes) &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="troubleshooting-cors"&gt;Troubleshooting CORS&lt;/h1&gt; &lt;p&gt;The Prometheus project shows a &lt;a href="https://prometheus.demo.do.prometheus.io/"&gt;DEMO instance&lt;/a&gt; , do not hammer it please.&lt;/p&gt; &lt;h2 id="failed-to-fetch-an-url-that-works-from-my-browser-but-gives-cors-errors-in-the-console"&gt;‘Failed to fetch’ an URL that works from my browser, but gives CORS errors in the console&lt;/h2&gt; &lt;p&gt;You may want to use a so-called ‘CORS-proxy’ (i.e., an HTTP web proxy that adds CORS-authorization headers).&lt;/p&gt; &lt;h3 id="modify-your-code"&gt;modify your code&lt;/h3&gt; &lt;p&gt;If you can mod the binary you are running, the easiest way likely is to set a CORS-header allowing this page to get data on the metrics endpoint you want to probe.&lt;/p&gt; &lt;h3 id="open-proxies"&gt;open proxies&lt;/h3&gt; &lt;p&gt;You may find open-proxies but you have no way to tell what they will do with your in-flight requests: cacheing, rate-limitations, data-collection. Plus open-proxies will only be able to access public endpoints (i.e., not for dev environments).&lt;/p&gt; &lt;p&gt;I’ve found the &lt;a href="https://allorigins.win/"&gt;All Origins open proxy&lt;/a&gt; to work if you want to probe public endpoints (like the prometheus demo).&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;code&gt;https://api.allorigins.win/raw?url=https://prometheus.demo.do.prometheus.io/metrics&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id="run-the-proxy-locally"&gt;run the proxy locally&lt;/h3&gt; &lt;p&gt;If you shop around on GitHub you will find some solutions. For instance I’ve found &lt;a href="https://github.com/okfn/gobetween"&gt;GoBetween&lt;/a&gt; to work as claimed in the README. If you manage to run this package locally on port &lt;code&gt;3000&lt;/code&gt; you can try adding:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;code&gt;http://localhost:3000/pipe/https://prometheus.demo.do.prometheus.io/metrics&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id="serve-the-js-directly-from-your-endpoint"&gt;serve the JS directly from your endpoint&lt;/h3&gt; &lt;p&gt;This is the solution I take in &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;prodapi&lt;/a&gt;, just serve the &lt;a href="/js/prometheus-monitor.js"&gt;JavaScript&lt;/a&gt; file and include it in some HTML that you serve as well. Optionally, the HTML can have a div with ID &lt;code&gt;metrics&lt;/code&gt; to select the script insertion place.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="ot"&gt; id&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;metrics&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;script&lt;/span&gt;&lt;span class="ot"&gt; src&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;/js/prometheus-monitor.js&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;script&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You’ll need some CSS to style it, but this will come later (when I’m out of alpha mode).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/prometheus-monitor.html" rel="alternate"/>
        <summary type="text">
            A live Prometheus-endpoints monitor visualizer. If you are a developer running software locally or if you are an SRE investigating production hiccups, you sometime want to look at how one metric evolves in a specific job.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/scope-explorer.html
        </id>
        <title type="text">
            Scope explorer
        </title>
        <updated>
            2022-06-01T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;p&gt;This month I’m adventuring into a new way of telling stories. Specifically, I want to explore how &lt;em&gt;micro-applications&lt;/em&gt; can help convey some information.&lt;/p&gt; &lt;p&gt;This article consists mainly of an application with an interactive tutorial. The story we illustrate is from &lt;a href="/what-is-the-project-scope.html"&gt;previous article about the scope of projects&lt;/a&gt;, so make sure to scan through the article first.&lt;/p&gt; &lt;p&gt;In the future I’ll try to intersperse such micro-applications into articles. This first attempt taught me that my current default article layout is interacting a bit too-much with the application so far. As a result the application may not work nor render well on mobile. Also, I do not promise the code is bug-free, however the steps made in the interactive Tutorial work well at least. I apologize for such recklessness.&lt;/p&gt; &lt;p&gt;In general, feedback is highly appreciated as I need to calibrate how much time to budget on micro-applications versus textual content.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="scope-explorer-div"&gt; &lt;/div&gt; &lt;script type="text/javascript" src="/js/scope-explorer.js" async&gt;&lt;/script&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;h1 id="an-exercise-to-go-further"&gt;an exercise to go further&lt;/h1&gt; &lt;p&gt;As an exercise, at the end of the tutorial you could say that your application is now encoutering some success, in that case you need to be able to receive money. To receive money you’ll need some “Billing” feature(s). Have fun adding “Billing” as a feature, zooming-in and studying how to split the Billing-scope in sub-scopes.&lt;/p&gt; &lt;h1 id="help"&gt;help&lt;/h1&gt; &lt;h2 id="legend-for-edit-table"&gt;legend for: EDIT table&lt;/h2&gt; &lt;table class="legend"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; cell &lt;/th&gt; &lt;th&gt; status &lt;/th&gt; &lt;th&gt; details &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="table-cell state-done"&gt;&lt;/td&gt; &lt;td class="legend"&gt;done&lt;/td&gt; &lt;td class="legend"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-todo"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;intermediary node (computed)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-unexplored"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;leaf of scope tree&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-disagreement"&gt;&lt;/td&gt; &lt;td class="legend"&gt;in disagreement&lt;/td&gt; &lt;td class="legend"&gt;intermediary node is claimed done but internal status is not&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id="the-scope"&gt;the scope&lt;/h2&gt; &lt;p&gt;As you define a matrix of &lt;em&gt;tech steps&lt;/em&gt; by &lt;em&gt;features&lt;/em&gt; , the scope of your &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; grows.&lt;/p&gt; &lt;p&gt;If you zoom on a given tile (you over the mouse on a tile and press the 🔽 “zoom” button) then the scope displayed changes. You get prompted the whole path in your hierarchy, for instance &lt;p&gt;&lt;span&gt;&lt;button&gt;🔼&lt;/button&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="path-component"&gt; TechStepName :: FeatureName&lt;/span&gt;&lt;/span&gt;&lt;span class="path-component"&gt;🌐 global&lt;/span&gt;&lt;/p&gt;&lt;/p&gt; &lt;p&gt;As you press the &lt;button&gt;🔼&lt;/button&gt;, you navigate upward. When (and only when) you reach the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; the graphs are updated.&lt;/p&gt; &lt;h2 id="understanding-the-graphs"&gt;understanding the graphs&lt;/h2&gt; &lt;p&gt;The graphs represent the progress of the scope at the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; scope only.&lt;/p&gt; &lt;p&gt;All graphs start grayed out and represent a normalized value (i.e., the largest value of the whole series takes 100% of the height of the bar). Most recent values are on the right.&lt;/p&gt; &lt;p&gt;&lt;em&gt;scope&lt;/em&gt; is how many “tiles” there are in total&lt;/p&gt; &lt;p&gt;&lt;em&gt;delivery&lt;/em&gt; is how many “tiles” are claimed or effectively delivered (claimed correspond to the checkbox on the tile, effective correspond to a majority of the subscope being delivered, the definition is recursive)&lt;/p&gt; &lt;p&gt;&lt;em&gt;progress&lt;/em&gt; has two colors and represents the fraction of “delivered scope” as well as the size of the scope, having both on the same graphs lets you see when the scope grows compared to previous values at a same time as when the delivery grows at fixed scope&lt;/p&gt; &lt;p&gt;&lt;em&gt;coverage&lt;/em&gt; is the percentage of declared features (i.e., verticals) that are fully-delivered&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/scope-explorer.html" rel="alternate"/>
        <summary type="text">
            An application to illustrate how the changing scope of projects affects the delivery, coverage.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/what-is-the-project-scope.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-1]
        </title>
        <updated>
            2022-05-21T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="note"&gt; &lt;p&gt;This article is the first in a series of articles on refactoring and is focused on discussing what is the “scope” of a project and how the dynamics of the scope affect a project.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;From a non-developer viewpoint, it may be hard to connect with developers who are &lt;strong&gt;always refactoring&lt;/strong&gt;. I wrote this article to fill some gap I observed a number of times with non-technical stakeholders worried that tech teams where “always refactorin’”. Cannot developers refactor once and move to something more useful?&lt;/p&gt; &lt;p&gt;We must discuss some key dynamics of projects before being able to fully-appreciate topics like what is a refactoring. In particular, we need to be clear about the effects how changes in &lt;em&gt;scope of projects&lt;/em&gt; affects the delivery. Thus in this article we’ll have a refresher on what development looks like: a non-linear and discontinuous process.&lt;/p&gt; &lt;h1 id="a-refresh-on-the-development-process"&gt;A refresh on the development process&lt;/h1&gt; &lt;p&gt;The main tangible output of software development is software: an increased amount of lines of code, extra kilobytes of configurations, a flurry of new packages and services. All these deliverables need to be organized, cleared of bugs, key limitations need to be documented. Meanwhile, new business questions are raised, technical questions are raised, and hairbrows are raised too &lt;span class="emoji" data-emoji="thinking"&gt;🤔&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Two key characteristics we can emphasize are the fact that developing software is &lt;em&gt;agglomerative&lt;/em&gt; and &lt;em&gt;non-linear&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="the-development-process-is-agglomerative"&gt;The development process is agglomerative&lt;/h2&gt; &lt;p&gt;We write software to fill a given vaccum, to address a set of problems. The amount of vaccum to fill is the &lt;em&gt;scope&lt;/em&gt; of the software.&lt;/p&gt; &lt;p&gt;Most software features will require a similar set of technical steps (e.g., writing tests, writing a data schema, writing an API provider or consumer, performing some quality-assurance). Thus it makes sense to categorize these technical steps as layers of work. A single developer can work on a single step at a time. Also developers will specialize into some of these layers, forcing the project management to get some ordering between technical steps. For two different features the steps may not have to share the same ordering, however it’s generally the case that there is some bottom-up sequence in a &lt;em&gt;vertical&lt;/em&gt; fashion.&lt;/p&gt; &lt;p&gt;To fill a scope, you need many features, which means that if we collect all the steps for all features, we get a tiling of tasks to fill a given scope.&lt;/p&gt; &lt;p&gt;Graphically you could display that as a set of tiles, each tile corresponding to a technical unit for a given feature.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-tiles.png" alt="scope to be delivered is a set of tiles" /&gt;&lt;/p&gt; &lt;p&gt;This model is a simplification of real-world projects, in real-world projects you have more dimensions to consider and you do not need to fill a full-rectangle as some features may not have the same requirements. I believe this model is good for a number of reasons: first, this model serves the purpose of illustration and the model is complex enough to make my point, second the model is simple enough to allow making graphical visualisations, finally we could say that not having the same requirements just means that the requirements exists but takes zero effort to fill.&lt;/p&gt; &lt;p&gt;To fill a scope, you have thus two broad strategies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;follow the &lt;em&gt;horizontal&lt;/em&gt; axis: focus on some technical layer, assuming that batching everything together is gonna be more efficient. For instance, it is easier to write database schemas when you know all requirements, and is sensible when all requirements are laid out. &lt;/li&gt; &lt;li&gt;follow the &lt;em&gt;vertical&lt;/em&gt; axis: deliver one feature and then move to the next one, assuming that getting some subset of the scope early is a favourable outcome (early revenues, first-mover advantage, reduce pressure from the C-suite) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src="/images/project-scope-delivery-directions.png" alt="scope delivered horizontally or vertically" /&gt;&lt;/p&gt; &lt;p&gt;In modern software practices, it is admitted that the vertical is best as the scope is too hard to discover upfront. We’ll discuss scope changes in the next section though.&lt;/p&gt; &lt;p&gt;Whether one writes code along verticals or horizontals, both strategies eventually accumulate code, configurations, packages, documentations and what not. Thus overall software projects inflate and &lt;em&gt;agglomerate&lt;/em&gt;. As time passes, gaps are filled, &lt;strong&gt;two opposing forces are at play&lt;/strong&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the agglomeration of software is more and more complex and &lt;em&gt;friction&lt;/em&gt; drags your developers down &lt;/li&gt; &lt;li&gt;developers get more experienced on the project and find or build ways to &lt;em&gt;accelerate&lt;/em&gt; the delivery &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Which of these forces is winning will determine the fate of your project. In particular, too much friction or not enough time spent on accelerating will lead to losing momentum. If your team loses momentum, your project is doomed to fail, if your team gains momentum… you get to play for longer.&lt;/p&gt; &lt;p&gt;If you are lucky enough to play longer, your project will accumulate features. On top of features, software projects also accumulate bugs, customer tickets, and are shaked by changes in the scope of the problem. In short, the evolution of software projects is erratic, with non-linearities, asperities, and discontinuities.&lt;/p&gt; &lt;h2 id="the-development-process-is-discontinuous-and-not-linear"&gt;The development process is discontinuous and not linear&lt;/h2&gt; &lt;p&gt;Let’s assume your team has been working on a project for some time now. You are roughly half-done. Let’s illustrate it graphically.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-delivery-3of5.png" alt="scope delivered a bit more than 2 of 5 verticals" /&gt;&lt;/p&gt; &lt;p&gt;You have shipped (in green) two verticals and one fourth of third vertical as illustrated in the following picture. Remains a &lt;em&gt;backlog&lt;/em&gt; (rose) of three fourth for the third vertical plus two full verticals.&lt;/p&gt; &lt;p&gt;When changes of scope occur, two things can happen:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the scope &lt;em&gt;deflates&lt;/em&gt;: this is so rare we won’t dicuss it at length here, softwares allows you to isolate dead weight like un-needed features somewhat easily; however if some feature drags you down you should spend some time cleaning it out (in a refactoring hehehe) &lt;/li&gt; &lt;li&gt;the scope &lt;em&gt;inflates&lt;/em&gt;: this is the typical scenario, software often risk something named &lt;em&gt;feature creep&lt;/em&gt; where we want to support so many things that the complexity exploses compared to the team capacity &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Changes in the scope of a project are not without consequences on your project.&lt;/p&gt; &lt;h1 id="effects-of-scope-changes"&gt;Effects of scope changes&lt;/h1&gt; &lt;p&gt;In this essay we are looking at two dimensions of the scope: features and technicals. The scope changes may be blurry. Although scope may change in both dimensions at a time, it is still valid to studying both dimensions independently. Also, individual tasks are not well-defined boxes, when we zoom on a single task, we realize there is more to it as each task can itself be a small project with its own varying scope.&lt;/p&gt; &lt;h2 id="new-features"&gt;New features&lt;/h2&gt; &lt;p&gt;New features are the routine of software projects. As your system collects more data, as business discussions uncover new pain-points and opportunities, new features are needed.&lt;/p&gt; &lt;p&gt;Graphically, we can illustrate the new features has new verticals that we append.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-increase-feature.png" alt="scope changes adding a new column of feature" /&gt;&lt;/p&gt; &lt;p&gt;I used a slightly darker red to distinguish the verticals corresponding to the new features. In this situation, the main problem that arises is whether to prioritize iterations on the new features or not. If the prioritization is very high, you may even pause the current vertical where it is.&lt;/p&gt; &lt;p&gt;One key thing to remark is when scope grows horizontally, the software is still deemed perfectly adequate. Thus, whatever value delivered is not at risk and life is good as the future will be a continuation of what worked. Vertical changes are bit more annoying.&lt;/p&gt; &lt;h2 id="new-technical-requirements"&gt;New technical requirements&lt;/h2&gt; &lt;p&gt;You know where we’re aiming at. Technical requirements changes are disruptive. Such changes can either have endogenous causes (e.g., you have a reached a point where there are too many defects and you need to increase testing) or exogeneous causes (e.g., regulatory changes like the &lt;a href="https://gdpr-info.eu/"&gt;GDPR&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-increase-technical.png" alt="scope changes adding a new row of technicals" /&gt;&lt;/p&gt; &lt;p&gt;As the technical landscape changes, we need two colors to disinguish what happens to software that exists and is shipped (crimson red) and future software that you will write later (middle-tone red).&lt;/p&gt; &lt;p&gt;The later a vertical change of scope occurs, the larger the impact on your backlog. A late vertical scope change is like a late realization that you were partying on borrowed money. I also like the image of realizing that you were playing in easy mode after subscribing to a video-game tournament: you’re set for some reckoning.&lt;/p&gt; &lt;p&gt;For future verticals, you have one simple decision to make: cut or keep in scope. Cutting an already-started vertical will incur a sunk-cost. Thus, beware the &lt;a href="https://en.wikipedia.org/wiki/Sunk_cost"&gt;sunk-cost fallacy&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For existing verticals, I picked crimson red for a good reason: new technical requirements are difficult to retrofit. Here you have three broad choices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(a) dropping already-shipped verticals &lt;/li&gt; &lt;li&gt;(b) fill the gap for previous verticals &lt;/li&gt; &lt;li&gt;(c) ignoring the new requirements for previous verticals. You can make a different decision for each vertical. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Dropping the whole vertical (a) may not be just a sunk-cost but a visible cost as some customer already relies on the corresponding feature.&lt;/p&gt; &lt;p&gt;Filling the gap for a vertical (b) can be hard to sell to other stakeholders as you are not solving new problems. You also need to prioritize these new tasks and consider delaying the ongoing vertical.&lt;/p&gt; &lt;p&gt;Ignoring new requirements (c) may be sensible, but as scope will continue to grow vertically you may just be post-poning the choice (with an increasingly gap to fill to put in balance with dropping an even older vertical).&lt;/p&gt; &lt;p&gt;Summarizing, vertical scope changes are dangerous for projects as they force difficult choices and have compounding effects.&lt;/p&gt; &lt;h1 id="the-scope-is-a-fractal"&gt;The scope is a fractal&lt;/h1&gt; &lt;p&gt;Another problem of software projects is how fractally complex they end up. Individual tasks often have no good “definition of done”. A whole vertical may have some, but individual tasks are left to implementers. Which means developer will likely need to experiment around.&lt;/p&gt; &lt;p&gt;Overall, individual tasks themselves are small projects with a scope. Oftentimes we realize that there is some an abundant amount of details and extra technical bits and internal features to implement. Anticipating whether a task has enough scope to be split upfront is a difficult betting game.&lt;/p&gt; &lt;p&gt;When picking a single task and zoom-ing in, we often can formulate the scope of the task. Within this contour, we may lay down verticals and horizontals like we did for our project earlier. For instance, if the whole task is to add some visual representation of some statistics for a customer, the sub-tasks may be about defining edge cases, verifying against historical data, deciding to present a single statistics or an evolution in time etc. Overall a seemingly simple feature in itself can have a rich scope. If we keep zooming, the code organization, making sure that business rules are decoupled from glue code and so-on and so forth also are mini-scopes within a task substasks.&lt;/p&gt; &lt;p&gt;Graphically we can give a feeling of what it means by zooming on a task as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;A result of this fractal complexity is that there is no definite answer to say a given task has ended. A hand-wavy rule may be to say a task is mark as done when “enough” of the scope of the task is actually covered. If we try to put numbers, in our case we could define that a task is green when a majority of the subtasks are green. In our example a tile has nine sub-tasks. Which means that the task is done when at most four tasks are “skipped” (yellow) – which we distinguish from “not encountered yet” (rose).&lt;/p&gt; &lt;p&gt;Such a rule is reasonable, and individual tasks may be left in various patterns. Some tasks will have led to code that is complete in many aspects. Some others will have a few edge cases unhandled. Some patchy tasks will have disorganised code but it does the job. Often, the documentation and tests are lacking, and so on and so forth.&lt;/p&gt; &lt;p&gt;Overall, our project is a mosaic that can be scrutinized at a variety of resolutions. Non-developers stakeholders will look at the big-picture&lt;span class="emoji" data-emoji="tm"&gt;™️&lt;/span&gt; of the project and with coarse granularity. Looking at a low-resolution you may get the impression that tasks are fully-done and indeed the project delivers features. However if you had the possibility to &lt;strong&gt;increase the resolution&lt;/strong&gt; of the whole project, you would see the delicate complexity of feature deliveries. We can illustrate this with our example by replacing each task by a set of smaller tasks. We replace every box by nine smaller boxes and we keep the rule that “to make the tile green, we need at most four yellow”.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal-tesselation.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;This picture shows that looking closely we may realize that our shiny project where everything is on track actually has a number of holes like a good &lt;a href="https://en.wikipedia.org/wiki/Emmental_cheese"&gt;Emmental cheese&lt;/a&gt;. Projects with partially-delivered tasks is the normal life of software, thus it is not a immediate cause of concern (and Swiss cheese is delicious). However it is important to understand the dynamics of the system.&lt;/p&gt; &lt;p&gt;Developers have to live in the reality of high-resolution projects, and the cavities left behind to progress on the project may cave-in as the time passes. Indeed, remember that each task in the project has a scope that may inflate (often) or deflate (rarely). If it occurs that an already-shipped feature has a vertical or horizontal scope change, then we also must make a choice between dropping a task or filling-it at 50% again. The extra difficulty is that if you drop or postpone for too long, a task that is green now will become red. Let’s illustrate again on our high-resolution picture: assume that scope changes affect two already-shipped verticals at the second horizontal-layer.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal-cave-in.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;Here both affected tasks used to be filled six out of nine sub-tasks (67%) and are now filled six out of sixteen (38%)! Such a situation is dangerous. Figuratively, two of the already-shipped verticals are deemed unsatisfactory and your project risks a figurative cave-in.&lt;/p&gt; &lt;h1 id="summary"&gt;Summary&lt;/h1&gt; &lt;p&gt;We’ve studied a simple model of software project which is split into tasks to fill a given scope. Project scopes can be described along a number of axes, we focus in particular on the feature-scope (verticals) and on the technical-scope (horizontals). Adding a new vertical has low impact besides prioritization. Adding a new horizontal forces to cut scope or heavily de-prioritization of ongoing features.&lt;/p&gt; &lt;p&gt;Scope is discovered as the project progresses: the scope inflates. Beginning of projects often have a steep inflationnary phase and then the scope accrues more requirements at a lower rate as the project matures. Occasionally, the scope deflates. As delivery of tasks progresses, features get shipped and the coverage of the scope effectively grows in increments. When the scope changes, you risk a cave-in effect where already-shipped features are no-longer passing the bar can no longer be considered as filling the user needs.&lt;/p&gt; &lt;p&gt;All of this can be summarized in the following picture.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-timeline.png" alt="scope can suffer from cave-in" /&gt;&lt;/p&gt; &lt;p&gt;In the next article, which we can expect in a few weeks (meanwhile you can see the &lt;a href="/always-refactoring.html"&gt;progress in draft&lt;/a&gt;), we’ll discuss what refactorings are and how they help avoid cave-ins.&lt;/p&gt; &lt;div class="note"&gt; &lt;p&gt;This article also now has an accompanying &lt;code&gt;micro-application&lt;/code&gt; at &lt;a href="/scope-explorer.html"&gt;Scope Explorer&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/what-is-the-project-scope.html" rel="alternate"/>
        <summary type="text">
            In past experiences I ran into a number of product-owner and staekholders puzzled by how often developers in their team express a need to "refactor". Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article. This article will be followed by a second part focused on the topic of refactoring. However before jumping directly into hard topics, we must discuss some key dynamics of a #project, in particular regarding the scope of projects (#project-scope).
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/dhall-section-demo.html
        </id>
        <title type="text">
            Scripting subsets of page contents in Dhall.
        </title>
        <updated>
            2022-05-03T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Since I’ve started building my own blog engine, I wanted some limited &lt;a href="/hashtags/scripting.html"&gt;&lt;span class="hashtag" data-hashtag="scripting"&gt;#scripting&lt;/span&gt;&lt;/a&gt; capabilities in the text-processing engine. A specific case I had in mind was to generate some tables or listings for what you currently find on the &lt;a href="/readings.html"&gt;/readings.html&lt;/a&gt; or on the &lt;a href="/tips.html"&gt;/tips.html&lt;/a&gt; page. I would like something like &lt;a href="http://microformats.org/"&gt;Microformats&lt;/a&gt;, but tactically applied to individual articles, with little ceremony.&lt;/p&gt; &lt;p&gt;A more telling example could be a &lt;a href="/hashtags/photo.html"&gt;&lt;span class="hashtag" data-hashtag="photo"&gt;#photo&lt;/span&gt;&lt;/a&gt; gallery where we list a dozen of images. For each image you’d want a title, an URL, a preferred background color for the frame, maybe a caption etc. Hand-editing such galleries is a lot of work, and the extra ceremony to store less than 100 records in a DB is not worth it. There’s a gap to fill&lt;/p&gt; &lt;p&gt;This article demonstrates and discusses a PoC using the Dhall programming language as a specific step.&lt;/p&gt; &lt;h2 id="high-level-need"&gt;high-level need&lt;/h2&gt; &lt;p&gt;What is common in the type of pages where I would like some minimal templating is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I want to reference and organize a moderately large amount of items. &lt;/li&gt; &lt;li&gt;items within a collection have a common structure (e.g., a link to a page would have a title, an URL, some language, and some description from myself). &lt;/li&gt; &lt;li&gt;I want to present, ideally with some mechanical template to keep the styling/HTML-structure consistent. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Thus I have &lt;strong&gt;three distinct characteristics to carve out&lt;/strong&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;ol&gt; &lt;li&gt;define the structure of items &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;ol start="2"&gt; &lt;li&gt;list a collection of items &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;ol start="3"&gt; &lt;li&gt;implement some template I use to present these &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Separating 1. and 2. is a matter of getting some type and some syntax to write values. Separating 3. requires a novel feature in my blog-engine: to interpret some structure into some HTML chunk to embed in a longer article. Current generators only produce targets as fully-contained output objects (that then must be embedded via other HTML primitives like &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags).&lt;/p&gt; &lt;h2 id="mini-design"&gt;mini design&lt;/h2&gt; &lt;p&gt;Let’s go through my design process. This is a retroactive recount of the process I took rather than an upfront design-doc.&lt;/p&gt; &lt;h3 id="current-situation"&gt;current situation&lt;/h3&gt; &lt;p&gt;Absent a proper solution for this need, I so far hand-write all these pages. A downside is that I need to carefully write CommonMark if I want to apply some CSS uniformly. More annoying is if I want to add a non-trivial and verbose annotations (e.g., adding a &lt;code&gt;mailto:&lt;/code&gt; link). This process is &lt;em&gt;fastidious&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;I do not want to trade fastidiousness for significant extra complexity. Indeed, in these tasks there is a risk to end up for a similarly-fastidious process involving more moving bits… What I want to avoid is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a. having a separate database, connectors, and section capable of reading the database at production-time &lt;/li&gt; &lt;li&gt;b. writing data structures in the Haskell-side of the blog-engine, including templates just for each type of listing &lt;/li&gt; &lt;li&gt;c. writing some JS that fetches a JSON-list and render only in the client &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Adding a database (a.) is the latest thing I would like to do because of all the deployment and extra changes required. I know this time will come if I want to do things like comments, but let me push it further. At this point, even SQLite would be too much overhead to add schemas, populate data etc.&lt;/p&gt; &lt;p&gt;Writing Haskell-code (b.) and would be fine regarding the structure definition, however I do not like to “split” an article between multiple sources. A reason why I wrote a blog-engine was to avoid distractions while focusing on writing an article.&lt;/p&gt; &lt;p&gt;Of the three, I think that writing all the logic client-side (c.) probably would be the least intrusive to my writing flow. However, clients that do not support JavaScript would miss the content. I’m fine with JavaScript when it is &lt;em&gt;required&lt;/em&gt; or when it is a &lt;em&gt;nice to have&lt;/em&gt;. Usage of JS for just laying-out the meaty-content is something I frown upon.&lt;/p&gt; &lt;p&gt;Summarizing, I was searching for some way to embed logic that would return some HTML provided some type locally-defined and locally-filled in an article document.&lt;/p&gt; &lt;h3 id="filling-in-the-gap"&gt;filling in the gap&lt;/h3&gt; &lt;p&gt;To fill the gap, there are a two key decisions to make:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a. what scripting language(s) to support? &lt;/li&gt; &lt;li&gt;b. at which point of the computation pipeline should I incorporate this engine? &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the first question (a), I want some minimal and non-trivial language. I do not want to invest much time on the particular choice because I want to try different things rather than do some proper analysis to answer the second (b) question. Indeed, if the cost for demonstrating (a) happens to be small, then I get a pretty good starting point to answer or try &lt;a href="/hashtags/trade-off.html"&gt;&lt;span class="hashtag" data-hashtag="trade-off"&gt;#trade-off&lt;/span&gt;&lt;/a&gt; in (b).&lt;/p&gt; &lt;p&gt;Working on the &lt;a href="/halogen-demo.html"&gt;Halogen demo article&lt;/a&gt; I was reminded about &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt; as an improved YAML/JavaScript for configuration. Configurations are very similar to Microformats, so why no try Dhall first?&lt;/p&gt; &lt;p&gt;Rather than providing a lengthy discussion, I’ll leave only bullet points around pro/cons (note that I realize that these bullet points for pro/cons could themselves become microformats).&lt;/p&gt; &lt;h4 id="advantages"&gt;Advantages&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;incorporating Dhall is a full demonstration of how scripted evaluations (I want some opaque IO returning some CommonMark) &lt;/li&gt; &lt;li&gt;still a first stone in some more advanced form of pipeline/build-system &lt;/li&gt; &lt;li&gt;Dhall has the ability to import libraries with little package management pain, I could use this to re-use parts across articles, it’s a good nice to have &lt;/li&gt; &lt;li&gt;interoperability between Dhall and Haskell is a bliss (the &lt;a href="https://twitter.com/GabriellaG439"&gt;Dhall author&lt;/a&gt; is a &lt;a href="https://www.haskellforall.com/"&gt;prolific Haskell engineer&lt;/a&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;h4 id="limitations"&gt;Limitations&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;so far, no extra environment is passed to the Dhall interpreter (the Dhall code does not know about its surroundings, article title or any other data &lt;span class="emoji" data-emoji="arrow_right"&gt;➡️&lt;/span&gt; for later) &lt;/li&gt; &lt;li&gt;no dependency between sections are planned (need to do detection cycles or find other approaches &lt;span class="emoji" data-emoji="arrow_right"&gt;➡️&lt;/span&gt; for later) &lt;/li&gt; &lt;/ul&gt; &lt;h4 id="drawbacks"&gt;Drawbacks&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;evaluating Dhall code costs extra time, CPUs, and file-descriptors (especially important while I care about automatic reloads of previews when editing articles) &lt;/li&gt; &lt;li&gt;intermediary results are opaque and hidden, if some final HTML is wrong, I need to know what has been generated as intermediary &lt;/li&gt; &lt;li&gt;risk of adding non-deterministic content generation (e.g., breaking because I’ve no network, some hackers inserting duck picks or spam because the evaluator fetches from the Internet) &lt;/li&gt; &lt;/ul&gt; &lt;h4 id="summary"&gt;Summary&lt;/h4&gt; &lt;p&gt;Dhall still seems a darn-good choice. None of the drawbacks are fatal flaws and can be mitigated. The most dangerous in my opinion is the evaluation costs. I will likely mitigate it using some cacheing in the future. I need to keep in mind that there are two evaluation phases in my blog engine: one computing targets and another one rendering targets. Both have their trade-offs.&lt;/p&gt; &lt;p&gt;Non-determinism is heavily mitigated while sticking to Dhall, so I expect no big surprises. When adapting the pattern to other languages (e.g., if I ever want to run some python) then I will have to be more careful.&lt;/p&gt; &lt;h2 id="result"&gt;result&lt;/h2&gt; &lt;p&gt;I spent less than two hours, including family interruptions &lt;span class="emoji" data-emoji="baby"&gt;👶&lt;/span&gt; and babbling-around time. The implementation so far is extremely primitive, though.&lt;/p&gt; &lt;p&gt;I decided to interpret the Dhall code while loading the Site targets rather than while generating targets. As much as I wanted to avoid this option, it is the pragmatic choice: on the one hand, I interpret sections’ Commonmark in different places (e.g., for rendering HTML but also when analyzing content or generating a JSON AST). On the other hand, cache control and idempotency is more obvious to control at this early phase: one execution of the script gives one website-worth of recipes.&lt;/p&gt; &lt;p&gt;Overall I had to do the following changes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;add a new format (defining a new pattern, and parser pattern) in my section-files &lt;/li&gt; &lt;li&gt;import the Dhall package and runtime (it’s a Haskell library, nothing different from importing an HTTP-client here) &lt;/li&gt; &lt;li&gt;insert some case-switch on the section format in the code that loads an Article &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And that’s all.&lt;/p&gt; &lt;p&gt;You can see for yourself in &lt;a href="/gen/out/dhall-section-demo.cmark__full-diff"&gt;the commit diff&lt;/a&gt; . And you can see this &lt;a href="/gen/out/dhall-section-demo.cmark__source-cmark"&gt;whole article source&lt;/a&gt; including the &lt;code&gt;dhall&lt;/code&gt; section.&lt;/p&gt; &lt;p&gt;Later, I added a local “cache” of the Dhall prelude so that live-reloading my Dhall-code does not reload the Dhall prelude from the internet each time. Since Dhall supports cached import, the local cache requires little extra work: I just have this &lt;a href="/gen/out/dhall-section-demo.cmark__local-dhall-prelude-cache"&gt;file with a checksum-verified network import&lt;/a&gt;, which I then import as a filesystem-local import with &lt;code&gt;let prelude = ./dhall/Prelude.dhall&lt;/code&gt;.&lt;/p&gt; &lt;h3 id="future"&gt;future&lt;/h3&gt; &lt;p&gt;In the future, the Dhall object to return will be a beefier record rather than just a blob &lt;code&gt;List Text&lt;/code&gt;. For instance, we could return extra information as metadata or as extra instructions that do not find their way in the HTML. Also, the Dhall code could return something else than Commonmark, we could &lt;a href="https://github.com/andrewthad/dhall-html"&gt;directly generate HTML&lt;/a&gt; or JSON values.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="generated-section"&gt; &lt;p&gt;–– start of generated section ––&lt;/p&gt; &lt;h1 id="this-section-is-generated"&gt;this section is generated&lt;/h1&gt; &lt;p&gt;This whole &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is interpreted from Dhall to Cmark to HTML. The content likely is the boundary at which point I enjoy having some templating mechanism over repeating the same thing many times. Indeed, if my data-type changes (adding columns) I need some help. Same if the template changes (adding fields, changing the markup).&lt;/p&gt; &lt;p&gt;In this example, I use two Dhall functions as two templates for a same dataset. Styling is then done in CSS.&lt;/p&gt; &lt;h2 id="table-layout"&gt;table layout&lt;/h2&gt; &lt;table&gt; &lt;thead&gt; &lt;th&gt;author&lt;/th&gt; &lt;th&gt;note&lt;/th&gt; &lt;th&gt;website&lt;/th&gt; &lt;th&gt;personal comment&lt;/th&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Alice&lt;/td&gt; &lt;td&gt;7/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;secret santa barbara&lt;/a&gt;&lt;/td&gt; &lt;td&gt;good to learn about the city&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Bob&lt;/td&gt; &lt;td&gt;8/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;sponge's den&lt;/a&gt;&lt;/td&gt; &lt;td&gt;other cartoons are funnier but okay&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Cindy&lt;/td&gt; &lt;td&gt;3/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;hello world I'm Cindy&lt;/a&gt;&lt;/td&gt; &lt;td&gt;abandonned site&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Dave&lt;/td&gt; &lt;td&gt;9/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;blog of a developer&lt;/a&gt;&lt;/td&gt; &lt;td&gt;he sings so well&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Emil&lt;/td&gt; &lt;td&gt;2/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;eating some chewing gum&lt;/a&gt;&lt;/td&gt; &lt;td&gt;French movies...&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Felicia&lt;/td&gt; &lt;td&gt;6/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;yet another a website&lt;/a&gt;&lt;/td&gt; &lt;td&gt;average&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Gerard&lt;/td&gt; &lt;td&gt;3/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;tech lead lead leader&lt;/a&gt;&lt;/td&gt; &lt;td&gt;lots of words to say nothing&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Hortense&lt;/td&gt; &lt;td&gt;8/10&lt;/td&gt; &lt;td&gt;&lt;a href=https://www.example.com&gt;lotta tasty recipes&lt;/a&gt;&lt;/td&gt; &lt;td&gt;miam miam&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id="tiles-layout"&gt;tiles layout&lt;/h2&gt; &lt;div class="tileset"&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Alice&lt;/span&gt; &lt;span class="note"&gt;7/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;secret santa barbara&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;good to learn about the city&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Bob&lt;/span&gt; &lt;span class="note"&gt;8/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;sponge's den&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;other cartoons are funnier but okay&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Cindy&lt;/span&gt; &lt;span class="note"&gt;3/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;hello world I'm Cindy&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;abandonned site&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Dave&lt;/span&gt; &lt;span class="note"&gt;&lt;i class="heart"/&gt;&amp;hearts;&lt;/i&gt;9/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;blog of a developer&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;he sings so well&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Emil&lt;/span&gt; &lt;span class="note"&gt;2/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;eating some chewing gum&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;French movies...&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Felicia&lt;/span&gt; &lt;span class="note"&gt;6/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;yet another a website&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;average&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Gerard&lt;/span&gt; &lt;span class="note"&gt;3/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;tech lead lead leader&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;lots of words to say nothing&lt;/div&gt; &lt;/div&gt; &lt;div class="tile" draggable="true"&gt; &lt;div class="heading"&gt; &lt;span class="name"&gt;Hortense&lt;/span&gt; &lt;span class="note"&gt;8/10&lt;/span&gt; &lt;/div&gt; &lt;div class="link"&gt;&lt;a href=https://www.example.com&gt;lotta tasty recipes&lt;/a&gt;&lt;/div&gt; &lt;div class="commnet"&gt;miam miam&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;–– end of generated section ––&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/dhall-section-demo.html" rel="alternate"/>
        <summary type="text">
            A demo of using Dhall as an intermediary step for my blog-engine sections.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/tactical-projects.html
        </id>
        <title type="text">
            Succeeding in tactical projects
        </title>
        <updated>
            2022-04-19T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Roughly one year ago I handed over a software project that I bootstrapped for an internal project to build an &lt;a href="https://aide.vente-privee.com/category/703-re-cycle"&gt;innovative e-commerce business around second-hand garnment and sustainable clothing (&lt;span class="emoji" data-emoji="fr"&gt;🇫🇷&lt;/span&gt;)&lt;/a&gt;. The time-window was pretty short (six weeks for the first PoC) and there was only one extra developer on the project but we made it and I could transfer the project to perpetuate and stabilize the business while I moved to other opportunities. At the same company a few years before I was invited to fix a pressing issue that could have led to severe liabilities. An important pipeline was stalling and risked putting many business processes to a halt. Institutional knowledge was partly lost and mostly transmitted by oral lore. Recovering the pipeline backlog and deprecating this pipeline took months, this project had from six to a dozen of people depending on how you count. The company is still around, so we can also call that project a success.&lt;/p&gt; &lt;p&gt;In both cases these projects were recognized as &lt;em&gt;tactical&lt;/em&gt; endeavours. That is, one-time feats to achieve, with a fair amount of freedom to digress from some company guidelines and processes. Even though the scale and timeframe differed, what made both these critical topics click was not the technology, but the team dynamics. I made some internal presentations for each of the project, but I also wanted to share a bit to the outside world how I approach these projects. This article discusses my &lt;em&gt;recipe&lt;/em&gt; to tactical projects.&lt;/p&gt; &lt;h1 id="a-recipe-for-tactical-projects"&gt;A recipe for tactical projects&lt;/h1&gt; &lt;p&gt;I wrote a couple of Twitter threads relating how I approach these tactical projects. A first &lt;a href="https://twitter.com/lucasdicioccio/status/1329847102843838466"&gt;lengthy thread&lt;/a&gt; discusses briefly my &lt;em&gt;checklist&lt;/em&gt; and then motivates some items. The checklist gives you &lt;strong&gt;a set of tools&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://twitter.com/lucasdicioccio/status/1340257658121691136"&gt;follow up thread&lt;/a&gt; is much shorter and stresses the approach and the importance of giving boundaries more than instructions. This approach gives you &lt;strong&gt;a set of behaviours&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;We’ll get through the checklist then discuss key behaviours to encourage during tactical projects.&lt;/p&gt; &lt;h2 id="a-checklist-of-communication-tools"&gt;A checklist of communication tools&lt;/h2&gt; &lt;p&gt;Successful projects require communication. If we stretch a bit, all the tools from the checklist I am about to give are a form of communication support. Communicating efficiently is hard because abundant communication is noisy: you cannot just fix communication issues with more communication but with &lt;em&gt;better&lt;/em&gt; communication. In tactical projects, I believe that better means &lt;em&gt;intentional&lt;/em&gt; communication. That is, do not multiply communication supports and focus on one usage per support. Such intentionality leaves no room for ambiguity as where to look for information and where to publish information.&lt;/p&gt; &lt;p&gt;Here is the checklist:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="book"&gt;📖&lt;/span&gt; one jargon-doc to map concepts &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="calendar"&gt;📆&lt;/span&gt; one periodic-meetings doc &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="libra"&gt;♎&lt;/span&gt; one open-point/arbitrage doc &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="raising_hand"&gt;🙋&lt;/span&gt; one communication channel for people &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="robot"&gt;🤖&lt;/span&gt; one dump channel for robots &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="point_left"&gt;👈&lt;/span&gt; one entry-point doc which links to all the other docs &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As for the specific tool you use for these documents and chats, the offering is pretty good today as long as they allow an online and direct-edition mode. Examples of good tools for such docs are &lt;strong&gt;GoogleDocs&lt;/strong&gt;, &lt;strong&gt;Notion&lt;/strong&gt;, &lt;strong&gt;Confluence&lt;/strong&gt;. Pick the ones you are familiar with and that you already use.&lt;/p&gt; &lt;p&gt;Let’s now dig a bit each of the checklist item.&lt;/p&gt; &lt;h2 id="in-depth-review-of-the-checklist-items"&gt;In depth review of the checklist items&lt;/h2&gt; &lt;p&gt;This section just dives deeper in each topic. Each item deserves a lenghty discussion but I will be concise for the brevity of the whole article. Do not hesitate to &lt;a href="/about-me.html"&gt;contact me&lt;/a&gt; if you want me to expand on one aspect.&lt;/p&gt; &lt;h3 id="the-jargon-document"&gt;the jargon document&lt;/h3&gt; &lt;p&gt;There is some selection bias in so-called tactical-projects, and often such projects will have the characteristics of the difficult project to rescue: business rules are blurry if not lost, documentation and specification may have drifted enough that even subject-matter experts have forgotten there is a documentation.&lt;/p&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/rosetta-stone.jpeg" alt="rosetta stone" /&gt;&lt;/p&gt; &lt;p&gt;The Rosetta Stone (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;The problem you face with such a situation is the inability to get started, and the risk of having to roll back a lot of work once it is delivered because code is written with some miscommunicated assumption. Indeed, oftentimes terms may be overloaded and a same word will have different meaning depending on the interlocutor. The worst I have seen was a term that was defined in French, but when translated to English, was a slightly different concept for the same stakeholder. A seasoned engineer was agast when I told him so, because the code would not make a difference (and business-wise, the two concepts would coincide often enough for the happy cases, but could lead to corny edge cases otherwise). To solve communication issues, the first step is to have some mutual understanding between stakeholders.&lt;/p&gt; &lt;p&gt;Your role here is not to fix everybody’s language. That would be hopeless and too disturbing for most people anyway. Are we stuck then? Of course not! all hope is not lost: you can bring mutual understanding by exposing the differences in concepts for the same word. A common mistake I have seen is to write a glossary. &lt;strong&gt;You do not need a glossary, what you really need is a Rosetta stone&lt;/strong&gt; .&lt;/p&gt; &lt;p&gt;I provide an example jargon-file in this &lt;a href="https://docs.google.com/spreadsheets/d/1bJpqpAxFFoViP9XEDwKRzm1Od1g6w9DtwYTDzlMkwQs/edit?usp=sharing"&gt;jargon spreadsheet&lt;/a&gt; . Of importance is that you leave room for each stakeholder to disagree with your use of a term. In this way, everyone feels respected because there is no bias favoring the viewpoint of the file author. This is why the jargon file has a matrix of terms and stakeholders.&lt;/p&gt; &lt;h3 id="the-periodic-meetings-doc"&gt;the periodic-meetings doc&lt;/h3&gt; &lt;p&gt;When in the heat of tactical projects, you need some amount of synchronization with all stakeholders and teamates. Often, a few topics will be the focus of attention for a couple of days or weeks. You should forget synchronization emails because emails sent to many people invite cross-talk in replies and re-sharing truncated bits. If you use email to communicate, only use email for outbound communications to less-involved stakeholders (e.g., C-level executives).&lt;/p&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/livre-de-bord.jpeg" alt="livre de bord" /&gt;&lt;/p&gt; &lt;p&gt;Livre de bord (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/9/95/Grand_Turk%2834%29.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Instead, I posit that you want some form of journal where you synthetically review these topics. At the same time, when reviewing these topics, it is marginally more expensive to review exhaustively what is on the plate of whom. Indeed, most of your efforts should be focused on the key topics du jour and only a few will work on other topics. Giving attention to these secondary topics is also important for the morale of those and for the habits of everyone because the focus will eventually shift. Additionally, keep some room to review HR topics, especially days off so that no-one is surprised when someone leaves for two weeks.&lt;/p&gt; &lt;p&gt;The following link is a &lt;a href="https://docs.google.com/document/d/1_1an91IYoZwecigqwtsIPQ5ivxp4aS9sv_DaVRScvqU/edit?usp=sharing"&gt;template for periodic-meeting notes&lt;/a&gt; I like to use. You do not have to follow this template but I’ll tell how to use it. For each team meeting, add a section by copying the &lt;code&gt;template&lt;/code&gt; section just below in the doucment and editing the date. You can prepare a section ahead of time and should encourage to fill-it in as they progresss (in my example “dany” has marked an update in advance). During meetings, review items, prioritizing new entries on key topics and action items from previous meeting. Copy and indicate carried over entries from previous meetings until resolution or decision to drop. Ensure that there is some markup to quickly identify people and action-items with their current state (e.g. &lt;code&gt;AI&lt;/code&gt; for action item, &lt;code&gt;@name&lt;/code&gt; of &lt;code&gt;[name]&lt;/code&gt; for people, bold fonts, strikethrough for done tasks). It’s better to be clear than to be consistent. Updates should be synthetic and provide links to other work document to follow the specific topic in more detail (e.g., tasks in issue trackers).&lt;/p&gt; &lt;p&gt;The document will grow, I’ve seen such a document with hundreds of pages on Google Docs and they work pretty well. Only create a new periodic-meetings doc if editing the current one becomes unbearable (e.g., the software becomes too slow). Sticking to a single document has a multiple benefits: First, you have a single entry point to know what are the topics du jour and the blockers on these topics. Second, you get a quick access to who-works on what and a sense of who-needs support (e.g., if a name does not show up, maybe the person is suffering a loss of motivation). Finally, the document is easy to search with &lt;code&gt;ctrl-F&lt;/code&gt;: everyone knows how to do that and the UX typically is better than cross-documents searches.&lt;/p&gt; &lt;h3 id="open-pointarbitrage"&gt;open-point/arbitrage&lt;/h3&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/balance-of-justice.jpeg" alt="balance of justice" /&gt;&lt;/p&gt; &lt;p&gt;The balance of Justice (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/f/f1/Estatueta_Justi%C3%A7a.JPG"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Tactical projects will mix people with different seniority. Further, you will need to pro-actively cut corners. Sometimes you will have to hand-over the project at the end of the tactical mission. Thus, it is better to keep track of all the key arbitrages in a single document. Arbitrage will often be required for technical aspects (e.g., architecture, database structures, naming conventions) but could also span business aspects (e.g., decision to drop or limit data-recovery to a time-bound).&lt;/p&gt; &lt;p&gt;I provide a design-document template in my &lt;a href="/talks.html"&gt;talks&lt;/a&gt; section, which I recommend for large projects. For tactical projects you will not have the luxury of doing such good and time-consuming work. That said, you still want the benefits from some formal process: you want a minimal context and a listing of alternatives one can think about, then a status.&lt;/p&gt; &lt;p&gt;It is useful to have a table of content and a todo/done status in the titles to quickly see what has been decided yet and what needs arbitration.&lt;/p&gt; &lt;p&gt;Once the document is in place, spam it around. Encourage people to submit new open-points, link to them during the periodic-meeting.&lt;/p&gt; &lt;p&gt;As for the two previous checklist item, you can find &lt;a href="https://docs.google.com/document/d/13vuImyR-qNiZ4GEoyAhgUts1PkrQYYRnvLD5IvvSa-0/edit?usp=sharing"&gt;an example open-points document&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="one-communication-channel-for-people"&gt;one communication channel for people&lt;/h3&gt; &lt;p&gt;Modern organization use some online group chats tools. If you don’t, start with this. Group chats are easy to adapt to different processes and work organizations. I’ve seen as many group-chats organizations as I have seen teams: some teams used a single channel, some other teams would create transient channels for open points. Overall I’ve seen success and failures in either setups. For a tactical project, I tend to prefer having a single communication channel. Indeed, the size of teams in tactical projects allow a single channel to be busy without becoming jammed (if you need to involve many teams, maybe you’re not on a tactical project but would need a whole backbone of engineering management).&lt;/p&gt; &lt;p&gt;The one communication channel serves for orchestration rather than as a support for communications. That is, use the channel to schedule/reschedule the periodic-meeting and ping people that the meeting starts. Also use the channel to first notify that something of note requires attention or requires arbitration. Key points should be discussed and related in the periodic-meeting notes or in the arbitration docs.&lt;/p&gt; &lt;p&gt;Avoid multiplying channels for open points because you will churn through them and lose track of what is ongoing and what is done. Having many chats with distinct and partially-overlapping sets of interlocutors is a recipe for cross-talks. You end up bringing the wrong topic in the wrong chat by mistake, when you need someone that was not invited first, they will lack the history (let’s be honest, chats history are horrible to process for humans).&lt;/p&gt; &lt;p&gt;If your channel tool allows to annotate channels with some topic message, link to the periodic-meeting notes in the channel topic.&lt;/p&gt; &lt;p&gt;An exception to have a few more channels is if you have regulatory requirements (e.g., some info must stay more confidential or require some clearance). But for this use case, private chats probably are a better venue as they feel more transient&lt;/p&gt; &lt;h3 id="one-communication-channel-for-robots"&gt;one communication channel for robots&lt;/h3&gt; &lt;p&gt;Automation is a special case that warrants an online chat as well. Automation will spam you about CI runs, people who pushed code etc. Overall, automation is screamy, pollutes, and does not respect your daily break.&lt;/p&gt; &lt;p&gt;Avoid overloading the communication channel for people with automated messages. This distinction is less important if all the stakeholders are tech people who understand that an “alert” may not be a reason for alert, nor that daily failures are expected.&lt;/p&gt; &lt;p&gt;The same points against multiplying channels as for the communication for people apply: you should favor a single channel until it becomes unbearable. Co-locating alerts with deployments notifications may help spot regression as well.&lt;/p&gt; &lt;h3 id="one-entry-point-doc-to-bind-them-all"&gt;one entry-point doc to bind them all&lt;/h3&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/savoy-menu.jpeg" alt="large menu" /&gt;&lt;/p&gt; &lt;p&gt;The menu at the Savoy Hotel (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Savoy_Hotels_meny_fr%C3%A5n_%C3%A5r_1900_-_Hallwylska_museet_-_100667.tif/lossy-page1-800px-Savoy_Hotels_meny_fr%C3%A5n_%C3%A5r_1900_-_Hallwylska_museet_-_100667.tif.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Even though we introduced only five tools, that’s already five things to remember. An unreasonably cost-effective to help people navigate your tactical project is to curate some form of &lt;em&gt;entry-point document&lt;/em&gt; that links to other documents like a menu. No discussion should occur in this document. It’s purely a for-consumption information to locate notable pieces of information pertaining to the project.&lt;/p&gt; &lt;p&gt;The list of things you can communicate in such a simple document is completely open. The entry-point document would typically carry links to some forsaken specifications or some internal report from external consultants five years ago. Linking these in the entry-point document should help distributing lost knowledge. Sometimes it is useful also to pinpoint one specific function in some source code and that is key in a business process (e.g., where some complicate computation runs).&lt;/p&gt; &lt;p&gt;One could argue that bookmarks are &lt;a href="https://www.hillelwayne.com/right-tool/"&gt;the right tool for this job&lt;/a&gt;, however the bookmark UX is really poor on average. Bookmarks are hard to share and synchronize. Few people likely have the habits to organize bookmarks. Plus, sometimes the content you want to likn-to is only on a file-system share, which you cannot easily put in web-bookmarks. This entry-point doc itself could be a bookmark you suggest, if not THE only bookmark.&lt;/p&gt; &lt;p&gt;Be generous in what you list in this document, the barrier to entry should be low enough. Avoid spamming anything you find so that people find value in browsing through the entry-point doc. I would say, any document or piece of code that is a reference and that has some time-validity in months or more is welcome in such a document. Do not link every ticket, pull request, version of data extracts from this document (the periodic-meeting notes should discuss these). If you prefer accepting junk rather than missing nuggets, add some visual separation between what entries made it into the list with versus without proper vetting.&lt;/p&gt; &lt;p&gt;Keeping the entry-point doc up to date is everybody’s duty, but you’ll have to evangelize this duty. Keep uttering the sentence “you’ll find a link in the entry-point doc” and be a good role model (say “I’ve added the link to the entry-point doc” until the other party gets into the habit of linking into the doc pro-actively). The tipping point where people see the benefit generally happens when you are faster to find a link for some piece of work than the author of the work.&lt;/p&gt; &lt;p&gt;The document itself does not need a lot of organizing, again Ctrl-F searches do wonder. You could use some spreadsheet or another shared doc. I’m giving an example as &lt;a href="https://docs.google.com/document/d/1XybK4q6q7GnzBhRWFMow78FhfxjxLbzekX84se82HMY/edit#"&gt;yet another google doc&lt;/a&gt;. Spreadsheet are really useful when you want to add coloring with automated formatting.&lt;/p&gt; &lt;h2 id="final-words-regarding-the-checklist"&gt;final words regarding the checklist&lt;/h2&gt; &lt;p&gt;My checklist is based on experience with a number of tactical projects plus a few large projects that needed course-correction. I have not needed all of the items all the time, but the periodic-meeting notes is probably the most useful one. Indeed, filling the periodic-meeting document is a forcing function for many beneficial behaviours (e.g., it reinforces the team-spirit with the shared ceremony when reviewing the document, it identifies blockers fast, it let you plan ahead).&lt;/p&gt; &lt;p&gt;Lightweight processes and low-tech tools are enough for tactical projects. However, do not be fooled, tools are merely tools. Tools are here to reduce friction and relieve people from typical corporate aches. Reducing friction is not enough to build momentum. Successful tactical projects also require a fair amount of energy spent on keeping the team members productive, efficient, and motivated. We discuss these aspects of successful tactical project in the next section.&lt;/p&gt; &lt;h1 id="behavioral-aspects"&gt;Behavioral aspects&lt;/h1&gt; &lt;p&gt;Having nimble and intentional communication tools should lessen the friction and encourage discussions towards fast-decision-making. That said, nothing will happen if no-one leads the group and no-one champions the tools. You’ll probably need to initiate some management-style changes. The tactical project lead will act like a maestro giving rythm to the team, you’ll need some light ceremonies to build momentum, and give the right degree of freedom to individuals. Let’s unroll all of this.&lt;/p&gt; &lt;h2 id="the-maestro-analogy"&gt;The maestro analogy&lt;/h2&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/von-karajan.jpeg" alt="von Karajan" /&gt;&lt;/p&gt; &lt;p&gt;Von Karajan directing a concert (credits WikiMedia &lt;a href="https://en.wikipedia.org/wiki/Maestro#/media/File:Bundesarchiv_Bild_183-R92264,_Herbert_von_Karajan.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;A team is a social group, with complicated interactions and tensions between individual and the group. To achieve a tactical mission you need to ensure the team members feel motivated and energized on an individual level. At a same time the whole group must find the right tempo. As a tactical project leader, it is you role to set the tempo for the team.&lt;/p&gt; &lt;p&gt;I think that the orchestra and maestro analogy is a good fit for tactical projects. Think of individuals as players of different instruments, some play brass and some others may play strings. Each player has their own favorite style: some play jazz, some prefer classical. For your tactical project you may need them to play modern chamber music, hence contenting no-one. Even if you cannot play all instruments, you should know how the music should sound and have a good understanding of the partition a few measures ahead. As the person in charge of the tempo you need to know when to race and when to pause, you need to prepare transitions from adagio movements to presto sequences. In summary, setting the right tempo is not synonym with racing at the maximum speed.&lt;/p&gt; &lt;p&gt;How does the maestro analogy translates in the practice of tech teams? I would say that the most important thing is to ensure that every team member understands the tactical mission and how they contribute to it. The maestro does not play instruments but coordinates when individuals need to start, slow down, etc. Every music performer understand they are needed for the whole play to sounds great. For your tactical &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt;, everyone should be able to understand if they are on track or late, if they are facing a roadblock or if they have spare energy to help a stuck colleague. Such an awareness level requires careful attention to how knowledge is distributed: who knows which system the best? who can be onboarded on which parts of the project? and how long would such a transfer take? Only individuals can answer these questions, and to ensure that you get honest answers, you need to make sure that people feel safe to discuss their worries openly. In particular, you need to validate individuals as the right owners for their project-scope if you want everyone to be committed to the success of the tactical mission.&lt;/p&gt; &lt;p&gt;Once you have individuals that are committed, you get momentum. Your second goal is to keep the momentum – a goal best achieved by reducing friction. In particular, every team member should understand the group dynamics. This aspect is where your energy will yield the best lever: you should lead by example and encourage people (sometimes “vigourously encourage people”) to use the shared communication tools. For instance, to ensure the entry-point doc is up-to-date do not say “please add it to the entry-point doc”, rather you do it yourself but vocalise something like “ok, I’ve added it to the entry-point doc, took me ten seconds”. Publicly take notes on the periodic-meeting notes, and at some point your teammates will pro-actively do it. In short, demonstrate that you are adhering to the behaviors you want to encourage, and since you will be spending most of your time communicating, this will translate into an increased usage of the agreed-upon communication tools. At the risk of repeating myself, ceremonies are the easiest way to foster such behaviour changes. So let’s discuss it separately now.&lt;/p&gt; &lt;h2 id="ceremonies"&gt;Ceremonies&lt;/h2&gt; &lt;p&gt;Ceremonies such as stand-up meetings with all the team members are common in tech companies. In general, such ceremonies are good in tactical projects as well because they help consolidate the team interactions. That said, like the checklist of communication tools, ceremonies are merely tools and they will not solve your problem.&lt;/p&gt; &lt;p&gt;An under-appreciated value of recurring ceremonies is their agenda-locking power: people have fewer pretexts to daze-off a known-recurring meeting. I find that daily meetings are too much overhead because there rarely is much ongoing in a single day (people may even resent days when they have no updates). At the opposite end, bi-weekly or monthly starts to be too far apart. Put in simple mathematical lingo, the number of updates is roughly proportional to the amount of work done. Too-close meetings will lead to low-value overhead, whereas too far-apart meetings become longer and harder for everyone to follow. Is there an optimal spacing then? well, unlikely, and even if there were one formula, the formula would require information you do not have. Fortunately, the tactical leader sets the tempo. Thus, you can adapt the schedule of such ceremonies to the number of people around and the urgency of the next deliveries. Daily meetings and even twice-daily meetings could be a perfectly-fine setup when you are very near a deadline. A set of rules is that there is almost no point in meeting if your feedback loop is slower than the delay between two ceremonies (you should here focus your effort on speeding up your feedback loop). If your feedback loop is very fast (e.g., you can try changes and analyze results multiple times a day) you are in a spectacularly good place: but to avoid fully-saturating everyone’s agenda you should encourage people to try multiple things and aggregate learnings of multiple rounds during full-team ceremonies. Thus, feel free to adapt, but be listening to people in order to avoid erratic schedules.&lt;/p&gt; &lt;p&gt;In my typical tactical project setup, I generally try to have a weekly to twice-weekly meetings. During these meetings we beam the &lt;code&gt;periodic-meeting notes&lt;/code&gt; on the screen and we go through updating and reviewing all items together. Thus, everyone can see the notes in live and everybody can see people editing the notes in live. We do not do a full round asking people taking turn. We primarily focus on what the document contains. People who make the effort to list their updates in the doc get their topic discussed first. At the beginning of the project, I type out all updates myself so that people understand what I expect of them regarding the level of details, the conventions for highlighting action items etc. Then, as momentum builds up, I no longer need to take on this job as people pro-actively fill-in the updates. If a person has no updates for one meeting it’s ok, when an absence of updates is recurring, you likely need to dig more into the situation and sense if you need to unlock something.&lt;/p&gt; &lt;p&gt;Lage ceremonies are taxing, and for you as a leader, doubly so. Spend some effort to ensure that people get motivated during ceremonies. Time-keeping is a simple way ensure there is some rythm during ceremonies. Then, find ways to spice-up meetings. Sometimes subtle changes are enough to relieve some pressure off people and remind them there is life outside work. Simple things like changing the template on special dates (e.g., add an Easter Bunny &lt;span class="emoji" data-emoji="rabbit"&gt;🐰&lt;/span&gt; emoji around mid-April) or adding memes relevant to a recent achievement along the way are enough to break the bureaucratic routine of work ceremonies.&lt;/p&gt; &lt;p&gt;If you succeed in setting the right tempo, you will notice that people welcome the time of the ceremony. If you are the one who is late they will ping you and ask you whether to start without you (and you should definitely answer ‘yes’). If you are absent, delegate and you will be surprised that the output in your periodic-meeting notes is consistent with when you are present. From experience, the lack of a timekeeper is the first flaw to appear in ceremonies if you are absent for too long, but if you stress this point enough, handing-over the token of ‘ceremony leader’ should be easy.&lt;/p&gt; &lt;p&gt;To summarize, keep your ceremony predictable. Invest a lot of personal energy into setting these ceremonies up: lead by example, set the tempo, be a good time-keeper and time-sharer. Maximize re-use with the periodic-meetings notes document. Ultimately, no-one will dread a regular ceremony where the organization is smooth and where everybody can get a chance to voice concern or receive praise.&lt;/p&gt; &lt;p&gt;The only thing you may get irrecorevably wrong while setting up a recurring ceremony is if you are (or appear as) “the one giving orders”. One way to prevent such a situation is to adopt a directing style where individual have a lot of agency. Such a style deserves a discussion in itself. Thus, let’s discuss how to set boundaries so that individual can roam freely within the boundaries and impress you with their results.&lt;/p&gt; &lt;h2 id="directing-with-boundaries"&gt;Directing with boundaries&lt;/h2&gt; &lt;p&gt;People sincerely hate micro-management. The key difficulty when managing people, and probably even more so in tactical projects, is that you do not know what people judge as micro-management versus honest sheppherding. Individuals have different history and hence they also differ in perception and tolerance threshold. As a result, you have to probe with trial and error. Be carefull how strict or permissive you are with each individual. This style requires two things: empower individuals, and properly set boundaries.&lt;/p&gt; &lt;p&gt;To empower individual, remind individuals that they are the expert in their specific zone. Indeed, in tactical projects, there will often be little overlap between topics as the team is spread thin. Therefore, even a junior engineer will soon become the best person knowledgeable on some piece of code or some lost business rules. All it takes, i a couple of focused days studying the gory details of your forsaken system. Remind them of this simple fact, praise them as they become the go-to person for some fields in your project. Praising is a double-edged sword: people may feel the impostor syndrome. If there is enough emulation in the group, impostor syndrome should not be an issue. There will be more than enough energy in the air for everyone to course-correct lack of confidence or self-esteem.&lt;/p&gt; &lt;p&gt;If you empower individuals and give them a lot of wiggle room to implement solutions, you then need to properly set boundaries to avoid two things: one the one hand you need to prevent territorial issues when scopes may collide (e.g., some technical work and some business-rules work which both led to changes on the same system but with diverging visions regarding technical choices or implementation schedules). On the other hand, you may end up with a dysfunctional system because some key assumptions you hoped to leverage was not properly communicated and overlooked (e.g., you wanted some new function to be idempotent because down the road you plan to change the architecture and are at the early phases). In both cases, the main risk is a breach of trust, which will have compounding effects for the remainder of the mission. In short, boundaries are good for the group.&lt;/p&gt; &lt;p&gt;Boundaries that are good for the group are in tension with empowering individuals. Hence, it is worth practicing the art of designing boundaries. Instead of providing schemas of what to build, rather, you explain some key behavior or invariants that you would like to see being built. Provide some toy examples, agree to validate that the individual understood the concept (e.g., you commit to personally review the tests). Motivate, and rephrase boundaries, informally (e.g., the zorgulino criterion is that all time you make a change, you need to see only diffs in the positive direction in the all-accounts total) and formally (e.g.,this value is non-decreasing of version numbers etc.). Adapt your message to how your peer answers, some will prefer the informal style, some will prefer the formal one. Some will want the whole explanation, others will want the description of the problem and will want to guess the consequences. It is extra work to explain (and sometimes repeat many times) what are key invariants and key properties that you want in your system. Repeating is worth all the time it took. On the first hand, articulating such properties to a peer will clarify and sediment your understanding. On the other hand, keep in mind that you have smart individuals who can also see issues that you have missed and anticipate second-order effects that you had discounted too fast. These are the characteristics of a win-win situation.&lt;/p&gt; &lt;p&gt;If you manage with boundaries, you will enable the best of the individual, and the best of what the team can achieve: the most favorable conditions for your tactical project.&lt;/p&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Tactical projects are stressful, the specific problem at hand may not be super appealing (forsaken data pipelines with unclear business rules, desperate deadlines for some uncertain business with apparently more career risks than opportunities). You may not be able to establish yourself in the long term in the company if you only do tactical projects. However, these projects can be fun and rewarding.&lt;/p&gt; &lt;p&gt;Tactical projects ask for a lot of energy, especially when setting up the team structure and building the initial momentum. Tooling and procedures should privilege low-tech tools so that no time is lost installing or learning tools and procedures. Tools help you minimize friction. You can significantly reduce friction if there always is the same answer to ‘where do you find the doc’ or ‘what did we decide about’: lookup the entry-point doc and follow the links. After the initial phase, you will also need to consistenlty spend efforts on adapting the tempo. Ensure that people are energized and get some rests and some small achievements. Pick one ceremony and make the most out of it: engage your teammates. Verify that they have enough but not too much on their plate. And when directing individuals, ensure they have agency to operate on well-defined boundaries. Things will click and you’ll meet success.&lt;/p&gt; &lt;p&gt;A number of the above &lt;strong&gt;teachings are also applicable to organizations of larger sizes&lt;/strong&gt; than a tactical project. Some adaptation to the checklist will be in order. However I believe that what you really need is to relay and repeat the pattern at different scales. It is definitely possible to have one ceremony with team-leads of a dozen of &lt;a href="/hashtags/teams.html"&gt;&lt;span class="hashtag" data-hashtag="teams"&gt;#teams&lt;/span&gt;&lt;/a&gt; sharing a periodic-meeting notes and a large jargon file. It is still possible to settle boundaries for teams, which will help you devise and follow up on larger plans. However you will face scaling issues as you will need to get a good sense of what a team is working on at different scales (a problem we are helping you solve at &lt;a href="https://www.echoeshq.com/"&gt;EchoesHQ&lt;/a&gt;, my current employer). You will not have the energy to give the tempo into every team and every individuals, you may face alignment issues, leading to bad team-play. That said, such a problem could be solved by empowered managers as well.&lt;/p&gt; &lt;p&gt;Some tactical-projects teammates, bystanders, recounted they have seen progress on topics they thought were doomed. Individual in tactical teams told me how they were considering to leave the company or ask for an internal move, but stuck as they saw something different and started learning from other team members. Most importantly, I have build pretty strong bounds with a few colleagues during tactical projects because the energy in the air is vitalizing.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/tactical-projects.html" rel="alternate"/>
        <summary type="text">
            Different projects require different organization structure. So-called tactical projects tend to fall on you rather than being planned upfront. My recipe to tackle them is a few communication tools and empowered individuals free to roam within constraints.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/on-dualities.html
        </id>
        <title type="text">
            On Dualities
        </title>
        <updated>
            2022-03-27T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Functional programming has taught me to &lt;em&gt;simplify&lt;/em&gt; superfluous concepts: identify what are primitive concepts and what are constructions on top these primitives. The constructions themselves need not be multiplied out of proportion: it is better to stick to few ways of combining entities and concepts. Overall, I think I found some internal peace with programming languages when I could recognize enough of such primitives and how to make use of them in various programming styles. Among the techniques that I use to recognize when two concepts complement each other is to emphasize when two things are in a &lt;em&gt;duality&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;A situation of &lt;a href="/hashtags/duality.html"&gt;&lt;span class="hashtag" data-hashtag="duality"&gt;#duality&lt;/span&gt;&lt;/a&gt; is when two concepts cohabit well while appearing in opposition. In a sense, two dual concepts connect and perform some symmetrical dance. I would say that finding that two things are dual is like realizing that it’s not the Earth that rotates around the Moon, nor the Moon rotates around Earth, but in fact both celestial bodies dance and rotate around a same point &lt;a href="https://en.wikipedia.org/wiki/Barycenter#/media/File:Orbit3.gif"&gt;(the barycenter)&lt;/a&gt;. Discovering such rules brings clarity and simplicity to our understanding of a problem. Since a key part of our job in software engineering is to tame complexity, recognizing such simplifications are useful.&lt;/p&gt; &lt;p&gt;The existence of the barycenter of the Earth-Moon system is a consequence of the mathematical formulas we use to model the physical world. It is worth training our sense starting from simple (even simplistic) equations. For instance, let’s take the simplest form of duality: the equality of two values. The two sides of an equality &lt;code&gt;a = b&lt;/code&gt; are in a dual relationship: what happens to &lt;code&gt;a&lt;/code&gt; requires a commensurate compensation on &lt;code&gt;b&lt;/code&gt;. In the real world you rarely encounter some simple rule saying &lt;code&gt;a = b&lt;/code&gt;, more often terms like &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; actually are contraptions. For instance &lt;code&gt;b&lt;/code&gt; is the result of something involving &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; and other values. Whatever the particular instance you find, what happens to &lt;code&gt;a&lt;/code&gt; likely has implications on these &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; and other values. As systems grow in complexity, such equalities may blossom unexpectedly, and if the formula for the equality is too obscured to be spelled-out, unfathomable dynamics will happen.&lt;/p&gt; &lt;p&gt;Although software is not cosmology, and even if no Great Watchmaker seems needed to enforce laws of equalities (we trust CPU founders to do so), dualities exist in software. Software can be modeled with mathematical concepts from &lt;em&gt;discrete logic&lt;/em&gt; rather than calculus and differential equations. If I had to choose, I would say that the root of all dualities in software are &lt;a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws"&gt;De Morgan’s laws&lt;/a&gt; (in particular, see the section about extensions to predicate and modal logic). Let’s say that a “negated” value is a &lt;em&gt;consumer&lt;/em&gt; whereas a “positive” value is a &lt;em&gt;producer&lt;/em&gt;. Also, let’s say that a &lt;code&gt;OR&lt;/code&gt; encodes alternatives whereas a &lt;code&gt;AND&lt;/code&gt; encodes co-occurrences. Applying De Morgan’s law &lt;code&gt;NOT (x OR y) = (NOT x) AND (NOT y)&lt;/code&gt; could be read as &lt;strong&gt;to consume either X or Y we need the co-occurrence of a consumer of X and a consumer of Y&lt;/strong&gt;. We will leave such a bureaucratic formalism out of this article but there is not much more to it: a simple logical rule. Instead, I’ll spend time elaborating at a higher-level. In particular I would like to stress how important the producer/consumer duality is in software and how this duality is interlocked with yet another important duality: the alternative/co-occurrence duality.&lt;/p&gt; &lt;h2 id="the-producerconsumer-duality"&gt;The producer/consumer duality&lt;/h2&gt; &lt;p&gt;We do not write code in a vacuum. Even if we write code for no purpose, the programming language has logical rules, running a program happens on a physical machine subject to physical and logical rules of the CPU or those of the virtual machine. Even if we only imagine some code without writing it (e.g., while sketching out an API in our mind), our imaginary simulation of the running code will entail some logical rules. In any case some dualities are likely to arise. In particular, a useful program either consumes some data (e.g., a configuration file), or produces some data (e.g., a PNG image). More often, a programs both consume and produce some data but &lt;strong&gt;the data-consumption-side and data-production-side of a program operate on distinct sets&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;I specifically want to avoid conflating inputs and outputs with produced and consumed data. Although I believe that input and output are in a consumer/producer duality, I also want to encompass side-effects in this duality. A trick in functional programming is to pretend that the external world is a hidden input and hidden output of a pure function. The problem I find with this external-world object is that the external world is both consumed and produced, apparently giving a symmetrical role to the external-world object (for the better or the worst, our programming practice focuses almost only on the program and takes the executing environment as an unprogrammable thing with its own will). I prefer to conceptualize side-effects as entities merely produced by programs. Side-effects then are consumed by their executing environment. In this viewpoint, the program and the executing environment are the two partners performing a tango dance (or the two opponents in a tennis-game if you prefer sport over artistic metaphors). This viewpoint brings the question: what is the dual to a side-effect? It is something that an executing environment provides and that a program consumes (and hence it may destroy it), and I claim that would be pre-conditions. Summarizing, in this viewpoint &lt;strong&gt;a program consumes pre-conditions and produces side-effects&lt;/strong&gt; and could be illustrated as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="gen/images/producer-consumer.dot.png" alt="producer-consumer duality" /&gt;&lt;/p&gt; &lt;p&gt;I spoke about “programs” without precisely describing the kind of program I wanted to describe. Indeed, I believe that such a duality exists at different scales of programming. When zooming in at the individual module, object, or function, we can easily outline pieces of code that produce and consume objects or data-structures. I believe the same rule exists when zooming out a the service level. We just lack proper nouns to disambiguate whether a service mainly produces or consumes other services (indeed, much like the external-world object trick in FP: we conflate the co-occurrence of two distinct phenomenon because when focusing on a sole viewpoint both ends meet). I do not have excellent suggestions to make, but if I were to pick some words today I would say that, a service is being a &lt;strong&gt;producer of functionalities that are consumed as capabilities&lt;/strong&gt; by external-services.&lt;/p&gt; &lt;p&gt;What are the consequences of the dual roles of producers and consumers? Well, there is a point that when you need to modify a producer you need consumers to adapt in a dual way. It’s common to speak about API &lt;em&gt;contracts&lt;/em&gt; to provide a way to match consumers with producers. However I find that speaking at length about the value of contracts falls short. Contracts are shallow, they merely are the tips of the consumers and producers code. We actually can derive much more information than “OK the consumers and producers must agree on a contract”. In particular, we need to be precise about the consequences of changing a producer linked to a consumer. To answer such questions, we need to take a close look at how the producers/consumers duality interacts with the alternative/co-occurrences duality.&lt;/p&gt; &lt;h2 id="the-alternativeco-occurrences-duality"&gt;The alternative/co-occurrences duality&lt;/h2&gt; &lt;p&gt;Alternatives (&lt;a href="/hashtags/alternatives.html"&gt;&lt;span class="hashtag" data-hashtag="alternatives"&gt;#alternatives&lt;/span&gt;&lt;/a&gt;) and co-occurrences are well captured with what are called &lt;em&gt;sum-types&lt;/em&gt; and &lt;em&gt;product-types&lt;/em&gt; in typed-programming languages. Product-types are pervasive in programming, they correspond to your day-to-day data structure that is made of a set of fields. For instance, a user could be represented in some informal pseudo-code &lt;code&gt;type User = { Name x Email x FavoriteColor }&lt;/code&gt;. This notation means that a when you are presented a &lt;code&gt;User&lt;/code&gt; object, you also have the co-occurrence of three separate entities: &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt;, and &lt;code&gt;FavoriteColor&lt;/code&gt;, and you can splice them out at will and independently.&lt;/p&gt; &lt;p&gt;Sum-types, for no clear reason, have less support in the most-established programming languages. To be precise, user-declared sum-types are not really available. A boolean is the simplest example of sum-types, it presents two alternatives &lt;code&gt;type Bool = { False | True }&lt;/code&gt;, that is when you have a &lt;code&gt;Bool&lt;/code&gt;, you may have either a &lt;code&gt;False&lt;/code&gt; or a &lt;code&gt;True&lt;/code&gt; but not both at a same time. You could have a type with three alternatives (e.g., to encode a subscription plan with three tiers &lt;code&gt;type Plan = { Free, Pro, Enterprise }&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;With knowledge of product types and sum types, a compiler or a linter can tell you that you made a mistake (e.g., you forgot to give an &lt;code&gt;Email&lt;/code&gt; to build a &lt;code&gt;User&lt;/code&gt;, or you forgot to provide a template for the &lt;code&gt;Pro&lt;/code&gt; subscription email). Indeed, automated tools have enough information about all possible alternative and all required fields that must co-occur. Since we are discussing dualities and we have discussed about the producer/consumer duality. You may already sense where this post is going: we need to explore what happens to the consumer-side of a produced sum-type or of a produced product type.&lt;/p&gt; &lt;p&gt;Given that a product type is a co-occurrence of independent facts, when you produce a product type, the consumer &lt;em&gt;CAN&lt;/em&gt; have multiple independent data handlers and all can execute. Whereas when you produce a sum type, the consumer &lt;em&gt;MUST&lt;/em&gt; have independent data handlers and only one executes.&lt;/p&gt; &lt;p&gt;Finally, let’s note that a data handlers can also be stored in data types (e.g., with lambdas if the language supports it, or with factory-patterns otherwise). Such data types – containing handlers – themselves can be product and sum types. Putting everything together, we note that &lt;strong&gt;producers of alternatives require a the co-occurrence of consumers&lt;/strong&gt; whereas &lt;strong&gt;producers of co-occurrences require alternatives of consumers&lt;/strong&gt;. That’s it, our two dualities are interlocked.&lt;/p&gt; &lt;p&gt;We can illustrate this duality with pictures by displaying a producer and a consumer being matched together.&lt;/p&gt; &lt;p&gt;On the one hand, we shall illustrate a producer of product-type. Visually we try to convey the code that is written with the yellow boxes with &lt;code&gt;...&lt;/code&gt; ellipsis text in them.&lt;/p&gt; &lt;p&gt;&lt;img src="images/product-producer.png" alt="product-producer" /&gt;&lt;/p&gt; &lt;p&gt;The Producer returns a co-occurrence of three pieces of information (the product type &lt;code&gt;{A,B,C}&lt;/code&gt;). Therefore, the Producer must have code to introduce or carry-over these three independent piece of information. Given that the Producer’s output contains these three pieces of information, the Consumer is free to pick any alternative combining &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, or &lt;code&gt;C&lt;/code&gt;. When Producer and Consumer are &lt;em&gt;decoupled&lt;/em&gt;, the Consumer may not even have code to consume &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;C&lt;/code&gt; and only cares about &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On the other hand, we also need to illustrate the dual situation where the Producer provides a sum-type.&lt;/p&gt; &lt;p&gt;&lt;img src="images/product-consumer.png" alt="product-consumer" /&gt;&lt;/p&gt; &lt;p&gt;Given that the Producer provides an alternative (again, it may be that there is code for only one possible case), if the Consumer is decoupled from the Producer, then the Consumer must be ready to handle every case.&lt;/p&gt; &lt;p&gt;Much like when we first introduced the producer/consumer duality, we have been pretty indiscriminate about the exact family of producer and consumers.&lt;/p&gt; &lt;p&gt;Indeed, &lt;strong&gt;the alternative/co-occurence duality stands for all scales&lt;/strong&gt;. The only requirement for the duality to exhibit consequences is that a consumer and producer establish some communication (i.e., when we match a consumer with a producer). For instance at the library-scale, the producer could be a library function you call. Your own code would be the consumer of this function. When the library function returns a sum-type (for instance, either an error or a successful result) you should forcefully verify that you have a piece of code to handle either branches. At a service-scale, a web-API with multiple routes or a gRPC service with multiple methods can be framed as a collection of endpoints (i.e., a co-occurrence of handlers) whereas the client-side has the choice to pick any endpoint (i.e., and alternative of endpoints). In summary, the party that can force the dual party to behave in a certain way is the party deciding on the alternative picked in the sum-type side of the producer/consumer interface.&lt;/p&gt; &lt;p&gt;It is worth stressing that the alternative/co-occurrence duality shows up irrespective of the particular role (consumer or producer) of the API-client versus the web-API. Indeed, whether the client of the API is seen as a consumer (e.g., fetching data) or a producer (e.g., pushing data) does not change the fact that at the interface level, the client holds the choice of picking the endpoint. This distinction is important to recognize the proper interface between a producer and a consumer. In real-world situations, software components take both roles in alternation: a web-API may be seen as a producer of endpoints, but to implement an handler for such endpoint, the web-API is a consumer of other services or a consumer of libraries, and so-on and so-forth. Therefore, recognizing the particular interface may be difficult. Indeed, when we say a web-API client is a consumer, the &lt;em&gt;payload&lt;/em&gt; that the web-API produces could either be a product-type (i.e., the servers returns a co-occurrence of data and the client is then free to act starting from this data), but the result could also be a sum-type (i.e., the server returns a particular alternative to force a behaviour on the client – for instance an unauthorized response would force a client to initialize an authentication challenge). When analyzing real-world systems, we realize that communications between systems is a fractal of consumers and producers matched with each others and communicating of product-types and sum-types. Thus, when conceptualizing a system, we need to find the right levels where systems interface with each others and we must study a few nested layers of messages they interact with.&lt;/p&gt; &lt;p&gt;A key reason for studying more than a single level of interface is that it is possible to mechanically flatten nested layers of alternatives/co-occurrences. Such a flattening is useful both as a concept but also as a refactoring tool. The flattening law comes straight out of arithmetic, and is “just” the distributivity property of products over sums.&lt;/p&gt; &lt;p&gt;Formally the distributivity is written as &lt;code&gt;a * (b + c) = (a * b) + (a * c) &lt;/code&gt; In plain English, the two following statements are equivalent:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;you certainly get an &lt;code&gt;a&lt;/code&gt; and alternatively get a &lt;code&gt;b&lt;/code&gt; and a &lt;code&gt;c&lt;/code&gt; &lt;/li&gt; &lt;li&gt;you alternatively get an &lt;code&gt;a&lt;/code&gt; paired with a &lt;code&gt;b&lt;/code&gt; with certainty or &lt;code&gt;a&lt;/code&gt; paired with a &lt;code&gt;c&lt;/code&gt; with certainty &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Much like arithmetic formula we can theorize systems at various scales with similar formulas, and then factorize or develop these formulas. We will expand on this key property in the next section, but let’s first summarize what we’ve seen.&lt;/p&gt; &lt;h3 id="summary"&gt;Summary&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;in a general sense, consumers and producers are in a duality relationship &lt;/li&gt; &lt;li&gt;alternatives (sum-types) and co-occurrences (product-types) also are dual of each other &lt;/li&gt; &lt;li&gt;both dualities interact following some interaction law &lt;ul&gt; &lt;li&gt;producers of sum-types match product-types consumers &lt;/li&gt; &lt;li&gt;producers of product-types match sum-types consumers &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;these properties are invariant of the scale (i.e., it holds at the function, library, service level) &lt;/li&gt; &lt;li&gt;communicating systems involve layered consumer/producers, producers/consumers may alternate from one layer to another &lt;/li&gt; &lt;li&gt;there is a distributivity law to factorize or develop layers of {sum,products}-of-{sum,products}. &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="consequences"&gt;Consequences&lt;/h2&gt; &lt;p&gt;The important consequence of the interactions of product/sum with consumer/producer is that you do not need to be a compiler to foresee whether two pieces of software “connect” well or not. You can foresee errors, plan refactoring, and prepare architecture documents for splitting a monolith into services (or when agglomerating too-thin services into larger ones).&lt;/p&gt; &lt;h3 id="flattening-an-http-response"&gt;flattening an HTTP response&lt;/h3&gt; &lt;p&gt;Say that you are calling a library function that returns an &lt;code&gt;a * (b+c)&lt;/code&gt;, for instance, an HTTP response could be represented as &lt;code&gt;headers ~= a&lt;/code&gt; and &lt;code&gt;body ~= b if the response is valid, c if it's an error message&lt;/code&gt;. Since &lt;code&gt;a * (b + c)&lt;/code&gt; is equivalent to &lt;code&gt;(a * b) + (a * c)&lt;/code&gt;. You can decide to write a handler for “HTTP headers with a body” return value separately from a handler for “HTTP headers with an error”, and collate these two in a single handler for “HTTP headers with either a body or an error”.&lt;/p&gt; &lt;p&gt;If we go further and it happens that &lt;code&gt;b = c + d&lt;/code&gt; (e.g., &lt;code&gt;d&lt;/code&gt; is a decoded JSON object and &lt;code&gt;c&lt;/code&gt; is an error message), we can write down the consequences:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; a * (b + c) = (a * b) + (a * c) [distributivity] = (a * (c + d)) + (a * c) [b=c+d] = (a * c) + (a * d) + (a * c) [distributivity] = (a * c) + (a * c) + (a * d) [commutativity*] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This series of equation means that the HTTP-response handler in our example actually is made of two possibly-independent error-handler pieces of code &lt;code&gt;(a * c)&lt;/code&gt; and a success-handler taking a decoded JSON value &lt;code&gt;(a * d)&lt;/code&gt;. We have not discussed about commutativity here but in general depending on what your operations entails, they may not commute, for the case of decoding JSON values we could safely assume that decoding commutes as one would expect decoding to be deterministic and require no exogenous side-effects.&lt;/p&gt; &lt;p&gt;That’s a lot of information about the code when only looking at a type-description!&lt;/p&gt; &lt;h3 id="refactoring-api-services-with-multiple-endpoints"&gt;refactoring API services with multiple endpoints&lt;/h3&gt; &lt;p&gt;We’ve said earlier than a web-API is a product of handlers. Thus, to say that an API implements &lt;code&gt;a * (b + c)&lt;/code&gt; at a conceptual level means the web-API has two routes (the &lt;code&gt;*&lt;/code&gt; at the first layer) and the payload of the second type is known to be a sum-type (&lt;code&gt;b+c&lt;/code&gt;). If we apply distributivity we get &lt;code&gt;(a * b) + (a* c)&lt;/code&gt; , that is a single endpoint (no &lt;code&gt;*&lt;/code&gt; operand at the first layer) with a payload that is a sum of products.&lt;/p&gt; &lt;p&gt;We can illustrate this operation with the following pseudo-API description of two web-APIs.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;POST /route-one {&amp;quot;payload-a&amp;quot;:&amp;quot;a&amp;quot;} &amp;lt;=&amp;gt; POST /route-combined?branch=case-b {&amp;quot;payload-a&amp;quot;: &amp;quot;a&amp;quot;, &amp;quot;payload-b&amp;quot;: &amp;quot;b&amp;quot;} POST /route-two?branch=case-b {&amp;quot;payload-b&amp;quot;: &amp;quot;b&amp;quot;} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Both situations allow to match similar clients and servers exchanging similar information. However we can see that on the left-side, the client of the API is free to call &lt;code&gt;route-two&lt;/code&gt; even if it does not have a &lt;code&gt;payload-a&lt;/code&gt; to offer, whereas in the right situation, the client of the API must have a &lt;code&gt;payload-a&lt;/code&gt; to call &lt;code&gt;route-combined&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that when we say the representations are equivalent, we mean that either &lt;code&gt;a * (b+c)&lt;/code&gt; or &lt;code&gt;(a*b) + (a*c)&lt;/code&gt; are entirely produced and consumed. Commutativity is important in the first case.&lt;/p&gt; &lt;h4 id="some-api-refactoring-where-this-rule-fail"&gt;some API refactoring where this rule fail&lt;/h4&gt; &lt;p&gt;Let’s see an a negative example where you would believe that you can introduce the same transformation. Say you have to pick between using one endpoint or a series of endpoints. Such a situation arises when &lt;strong&gt;in both case you need to encode some branching logic&lt;/strong&gt;: in the URL path or in the payload.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;POST /foo/bar POST /foo {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;} {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;, &amp;quot;branch&amp;quot;: &amp;quot;bar&amp;quot;} &amp;lt;=&amp;gt; POST /foo/baz POST /foo {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;} {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;, &amp;quot;branch&amp;quot;: &amp;quot;baz&amp;quot;} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The key issue here is that we have product types at the API layer, i.e., our only way to factorize this is to use what is known as … you guess it, an exponential type.&lt;/p&gt; &lt;p&gt;&lt;code&gt;a x a x .... [k times] = a ^ k&lt;/code&gt;&lt;/p&gt; &lt;p&gt;And they correspond to functions with an argument. In short, if you had five handlers, you can factorize that into one handler having an extra argument taking five possible values. There is no duality involved here, but it is interesting to note that the product/sum extends to more arithmetic.&lt;/p&gt; &lt;p&gt;Exponentials &lt;code&gt;a ^ k&lt;/code&gt; varies from products &lt;code&gt;a * k&lt;/code&gt; because if we keep this sense of fully-consuming either inputs, you would need to consume multiple &lt;code&gt;a&lt;/code&gt; versus consuming a single &lt;code&gt;a&lt;/code&gt;. Indeed, a client that has the alternative to pick many different A with various handlers, to get the same behaviour we still need the possibility to handle &lt;code&gt;a&lt;/code&gt; differently based on the &lt;code&gt;branch&lt;/code&gt; taken.&lt;/p&gt; &lt;h3 id="monoliths-micro-services-and-it-system-architectures-roll-outs"&gt;monoliths, micro-services, and IT-system architectures roll-outs&lt;/h3&gt; &lt;p&gt;Most companies with a large amount of software need to evolve their code base. Thus, I recommend to recognize three key aspects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;what is constant about the system? &lt;/li&gt; &lt;li&gt;what is the product/sum nature of the changed system? &lt;/li&gt; &lt;li&gt;are you flattening/nesting the changed system? &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Having these information at hand is like accumulating equations to solve an system of equations until the system is well defined.&lt;/p&gt; &lt;p&gt;For instance, the exercise of splitting a monolith is like going from a large product into some more nested products &lt;code&gt;a * b * c * d&lt;/code&gt; to something more nested &lt;code&gt;(a * b) * (c) * (d)&lt;/code&gt;. The overall number of services is constant and we still have a gigantic product type of endpoints. The latter seems more complicated, so why do we dread monoliths? Well, imagine that now you want to support a new key customer with a new business use-case &lt;code&gt;c = c1 + c2&lt;/code&gt;. Then we can see what happens to monoliths if we want to isolate customers for a reason or another (i.e., if we expose an alternative of sets of simple endpoints rather than exposing a single set of more-complicated endpoints). We distribute the &lt;code&gt;+&lt;/code&gt; and get the following: &lt;code&gt;a * b * (c1 + c2) * d = (a * b * c1 * d) + (a * b * c2 * d)&lt;/code&gt; you need to fork the whole &lt;code&gt;a * b * _ * d&lt;/code&gt; part of the monolith to please the new business. Whereas in the already-factored out situation, we get &lt;code&gt;(a*b) * (c1) * (d) + (a*b) * (c2) * (d)&lt;/code&gt;, that is some set of endpoints are stable and can be re-used more directly.&lt;/p&gt; &lt;h1 id="another-duality"&gt;Another duality&lt;/h1&gt; &lt;p&gt;Before concluding, I would like to pinpoint some related duality that also stems from the producer/consumer viewpoint.&lt;/p&gt; &lt;h2 id="null-and-default-values-are-duals"&gt;null and default-values are duals&lt;/h2&gt; &lt;p&gt;Much has been written about &lt;em&gt;null&lt;/em&gt; being Tony Hoare’s &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;billion-dollar mistake&lt;/a&gt;. Well, my sincere belief if we should regard implicit &lt;em&gt;defaults&lt;/em&gt; (default values) with the same scrutiny. In many languages, &lt;em&gt;null&lt;/em&gt; actually is “THE default value”, but I want to stress that &lt;em&gt;defaults&lt;/em&gt; in itself is a problem.&lt;/p&gt; &lt;p&gt;Why do I believe that &lt;em&gt;null&lt;/em&gt; and &lt;em&gt;defaults&lt;/em&gt; are dual? Well, let’s look at some usages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;null&lt;/em&gt; is here to &lt;em&gt;provide&lt;/em&gt; no-values to some consumer that will &lt;em&gt;consume&lt;/em&gt; one &lt;/li&gt; &lt;li&gt;&lt;code&gt;default&lt;/code&gt; is here to &lt;em&gt;consume&lt;/em&gt; no-value from some producer that should have &lt;em&gt;produced&lt;/em&gt; one &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If we connect to my viewpoint that programs and environment are in a dual dance, we can see that &lt;em&gt;null&lt;/em&gt; affects the program whereas &lt;em&gt;defaults&lt;/em&gt; affect the environment. Indeed, &lt;strong&gt;null shortcuts the program downstream&lt;/strong&gt;, whereas &lt;strong&gt;defaults shortcut the environment upstream&lt;/strong&gt;. Taking the alternate viewpoint of side-effects and pre-conditions, we could say that &lt;strong&gt;null prevents side-effects&lt;/strong&gt; by crashing the system, whereas &lt;strong&gt;defaults prevents wanted pre-conditions&lt;/strong&gt; by not operating on the environment.&lt;/p&gt; &lt;p&gt;An example that makes such a distinction clear is a situation where a networked client needs to perform an authentication challenge. If the authentication challenge occurs and produces a null token, the client will crash. If no authentication-challenge occurs and a default token-value is produced, the client will continue and may leak data or have a failure at a much-later “distance” from where the bug actually is rooted.&lt;/p&gt; &lt;p&gt;I don’t know what is the dual of a billion-dollar mistake, but I hope you will join me in saying that default-values defeat a large number of automated analyses one could hope to make about the correctness of a program.&lt;/p&gt; &lt;h1 id="closing-remarks"&gt;Closing remarks&lt;/h1&gt; &lt;p&gt;This article took me a while to write because the topic I scratched is much deeper than I anticipated. I think that most of the discussion could be re-written entirely as a more formal exercise in mapping the discussions about product/sum-types and API endpoints using &lt;a href="https://en.wikipedia.org/wiki/Linear_logic"&gt;linear logic&lt;/a&gt; rather than my sketchy arithmetic. I definitely care enough about this topic to ask readers to point me works they find (a) introductory enough and (b) related to this discussion.&lt;/p&gt; &lt;p&gt;I reserve myself the right to write about this topic a few more times even if such new articles would have a lot of redundant information. Indeed, I took off bits about negative types, bits about category-theory, and bits about covariance/contra-variance. Overall, there is much to say and we probably longer illustrative examples as well. It feels like there is much, but at a same time these concepts are only just a few.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/on-dualities.html" rel="alternate"/>
        <summary type="text">
            Duality is technical jargon for "complementary". Programmers often overlook the role dualities in programming and hence fail to recognize them, even if they are hiding in plain sight. In this article we focus on two important pairs of dual concepts: producers and consumers, sum types and product types. I also spend some time ranting about default values being as bad as null values.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/optimal-lab-samples-spreading.html
        </id>
        <title type="text">
            Optimal Lab Samples Spreading
        </title>
        <updated>
            2022-02-09T21:50:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;This article illustrates what the work of modeling a problem for constraint &lt;a href="/hashtags/optimization.html"&gt;&lt;span class="hashtag" data-hashtag="optimization"&gt;#optimization&lt;/span&gt;&lt;/a&gt; entails.&lt;/p&gt; &lt;h1 id="a-problem-with-a-vague-description"&gt;A &lt;a href="/hashtags/problem.html"&gt;&lt;span class="hashtag" data-hashtag="problem"&gt;#problem&lt;/span&gt;&lt;/a&gt; with a vague description&lt;/h1&gt; &lt;p&gt;Unless you’ve been living under a rock, you are aware that the COVID19 pandemic happened and is still ongoing. One thing that has become common at least in rich countries is the frequent tests we need to perform to validate whether a person is infected or not. A variety of test technologies have different characteristics, some tests can be done at home (rapid anti-genic tests). Whereas PCR tests need a specific person to carry the &lt;em&gt;sample&lt;/em&gt; then the samples are sent to a &lt;em&gt;laboratory&lt;/em&gt; that processes the PCR check.&lt;/p&gt; &lt;p&gt;Now let’s say there is some imbalance between PCR-check laboratories and some tests sites. A question that may arise is: how do we best allocate samples from various sampling &lt;em&gt;locations&lt;/em&gt; (e.g., pharmacies) to laboratories? There is some delay in sending tests to laboratories, and also there is a maximum delay to wait for a sample (otherwise the sample deteriorates and can no longer provide good material for the test). What do we do for a day, over a week?&lt;/p&gt; &lt;h1 id="an-off-the-shelf-model"&gt;An off-the-shelf model&lt;/h1&gt; &lt;p&gt;Before using a modeling approach solver, it’s always good to verify whether the problem has an easy-to-recognize shape. This instance looks like an &lt;a href="https://en.wikipedia.org/wiki/Maximum_flow_problem"&gt;max-flow problem&lt;/a&gt; where testing locations are sources and laboratories are samples: indeed maximizing the number of samples that go through testing is a way to minize those which are thrown out.&lt;/p&gt; &lt;p&gt;The following example shows a possible max-flow &lt;a href="/hashtags/model.html"&gt;&lt;span class="hashtag" data-hashtag="model"&gt;#model&lt;/span&gt;&lt;/a&gt; to this problem. On the left you have a fictional &lt;code&gt;demand&lt;/code&gt; node and on the right a fictional &lt;code&gt;processed&lt;/code&gt; node. The &lt;code&gt;from&lt;/code&gt; arrows are capacities which corresponds to the demand at each sample-collection location. The symmetric side of processing- capacities are &lt;code&gt;to&lt;/code&gt; arrows. The center arrows with &lt;code&gt;?&lt;/code&gt; are the attribution matrix. We could force some capacities to zero to say a sample-location is too far from a certain site, or leave them infinite to express that any amount of samples can be sent.&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/labspread-maxflow.dot.png" alt="max-flow illustration" /&gt;&lt;/p&gt; &lt;p&gt;Running max-flow on this graph would determine how to maximize the number of processed samples. And the actual-values achieved the &lt;code&gt;?&lt;/code&gt; arrows correspond to a best assignment.&lt;/p&gt; &lt;p&gt;This is all good but in real-life we need to consider multiple days and other constraints. The iterated aspects may be annoying to model but somewhat manageable. For instance, we could add staged sources and sinks where some capacity connects a laboratory at two time intervals (this way &lt;em&gt;leftovers&lt;/em&gt; can be post-poned as additional inputs). In the following picture, we add a suffix &lt;code&gt;_0&lt;/code&gt; and &lt;code&gt;_1&lt;/code&gt; to represent the different stages. Thus an arrow &lt;code&gt;lab1_0 -&amp;gt; lab1_1&lt;/code&gt; represents leftovers at &lt;code&gt;lab1&lt;/code&gt; from the first staged processed in the second stage. We could view these arrows across stages as a degenerate form of sending samples between two different places in the time dimension.&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/labspread-maxflow-iterated.dot.png" alt="max-flow illustration" /&gt;&lt;/p&gt; &lt;p&gt;Such a model starts to be slightly more cumbersome than the previous one, and also is &lt;em&gt;wrong&lt;/em&gt; because we do not properly model the deadline component. For instance, with many stages we could have a long chain of leftover samples until all samples are processed, irrespective from how old the samples are. Instead of having &lt;code&gt;leftovers&lt;/code&gt; from labs to labs at future time-steps, we rather need the &lt;code&gt;leftover&lt;/code&gt; arrows to go from sampling location to lab at future time-steps. Correcting for this fact we get the following schema:&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/labspread-maxflow-iterated2.dot.png" alt="max-flow illustration" /&gt;&lt;/p&gt; &lt;p&gt;This model now seems correct and useful. However, in real-world setups we often refine models as new constraints are discovered or as new decisions are required. For instance, one behavior that would significantly alter the model would be to limit sampling sites to send samples to at most two labs. We may have to scrap our solution because the max-flow algorithm is not “cut” to make choices between alternatives (what we need is a form of knapsack at each sample-collection location). Such situations are common, and they correspond to situations where constraint-programming modeling shines. Constraint programming will let you trade generality for performance (i.e., we expect a slow down by using a more-general approach). Other situations where the adaptability of constraint-programming is useful is to probe what happens when a constraint actually turns-out to be a secondary goal (i.e., we relax a hard constraint into a soft-constraint and pretend we are geniuses).&lt;/p&gt; &lt;p&gt;Enough introduction, let’s see how we could formulate the problem in a constraint-programming language (using &lt;a href="https://minizinc.org/"&gt;MiniZinc&lt;/a&gt; as usual on this blog).&lt;/p&gt; &lt;h1 id="a-constraint-programming-model"&gt;A constraint-programming model&lt;/h1&gt; &lt;p&gt;Remember that to model a constraint-programming problem we need to formulate what are &lt;em&gt;inputs&lt;/em&gt;, &lt;em&gt;decisions&lt;/em&gt;, and &lt;em&gt;constraints&lt;/em&gt;. We also need some form of &lt;em&gt;objective&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="high-level-model"&gt;high-level model&lt;/h2&gt; &lt;p&gt;We will assume that we have some time-based model of the demand in number of tests. We also assume that we know the labs capacities (this is no different from our introductory model).&lt;/p&gt; &lt;p&gt;In our case, a good starting point would be:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;inputs&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;demand for samples from sample-collection locations &lt;/li&gt; &lt;li&gt;PCR lab capacities &lt;/li&gt; &lt;li&gt;some measure of the time it takes to send samples from one testing-site to a lab &lt;/li&gt; &lt;li&gt;the duration for which a sample is valid &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;decisions&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;some assignment from testing-sites to labs &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;constraints&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;samples must be processed within their lifetime or will be wasted &lt;/li&gt; &lt;li&gt;labs total work cannot overshoot their capacity &lt;/li&gt; &lt;li&gt;some form of &lt;strong&gt;conservation law&lt;/strong&gt; to say that samples are either tested in time or thrown away &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;objective&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;minimize the number of samples thrown away otherwise you can always assign zero from any testing-site to any lab &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="formalized-in-minizinc"&gt;formalized in MiniZinc&lt;/h2&gt; &lt;p&gt;The core of the model would be something as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;int: nLab; int: nZone; int: nTime; int: sample_lifetime; set of int: LAB = 1..nLab; set of int: ZONE = 1..nZone; set of int: TIME = 1..nTime; set of int: DELAY = 0..sample_lifetime; % demand of samples produced by zones array[ZONE,TIME] of int: demand; % capacity of labs to process samples, may vary with time to model things like week-ends array[LAB] of int: capacity; % transit represents a delay from one zone to some lab array[ZONE,LAB] of int: transit; % decisions about routing samples: dispatching and dropping samples int: maxAttr = sum(z in ZONE, t in TIME)(demand[z,t]); array[ZONE,LAB,TIME,DELAY] of var 0..maxAttr: dispatch; array[ZONE,TIME] of var 0..maxAttr: dropped; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Which introduces the inputs and the key decisions. We name &lt;code&gt;ZONE&lt;/code&gt; the set of sampling-locations because we could aggregate locations into zones beforehand, but also because we I found it hard to juggle with &lt;code&gt;LAB&lt;/code&gt; and &lt;code&gt;LOC&lt;/code&gt; all the time in my mind.&lt;/p&gt; &lt;p&gt;More importantly, we refined the decision to explicitly add a &lt;code&gt;DELAY&lt;/code&gt; component to the &lt;code&gt;dispatch&lt;/code&gt;-ed amount from a given ZONE to a given LAB at a given TIME. This delay corresponds to the dashed arrows we introduced in the max-flow model before. This extra breakdown is not especially surprising because we need to model the same “allowed physical behavior” whatever modeling technique we use. That said, in this model we went a bit further and we have broken down the total delay into two components: transit times (which are imposed by the &lt;code&gt;transit&lt;/code&gt; matrix) and queuing time (i.e., if a lab is busy one day but as spare capacity the next day we can backlog). The framing is very similar but are being a bit more explicit which chunk of the delay is forced upon us versus what chunk of the delay is a proper decision: this break down is important if you were to iterate on the model, or decide to increase capacity.&lt;/p&gt; &lt;p&gt;We also have a separate explicit &lt;code&gt;dropped&lt;/code&gt; decision, for all the samples that we cannot process. This decision is new compared to the max-flow model because in the max-flow model dropped quantities are implicit: dropped quantities correspond to amount of demand flow under the attributed capacity. In constraint-programming it is somewhat required to be explicit otherwise the solver will typically find an “uninteresting” solution (e.g., deciding that we drop everything implicitly because we have no way to express the conservation law).&lt;/p&gt; &lt;p&gt;Visually I represented this model as follows, in case it helps (demand at different times for a given zone are on the left, load for a given lab is the right). &lt;img src="/images/labspread-study.png" alt="sketch of model" /&gt;&lt;/p&gt; &lt;p&gt;We still need to link everything with constraints and write the objective function.&lt;/p&gt; &lt;h3 id="conservation-law"&gt;conservation law&lt;/h3&gt; &lt;p&gt;The conservation-law is not too complicated: at any given TIME, the demand is partitioned in two sets: dropped quantities and dispatched quantities.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;% must dispatch all demand constraint forall(z in ZONE, t in TIME) (demand[z,t] - dropped[z,t] = sum(l in LAB, d in DELAY)( dispatch[z,l,t,d] )); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such conservation laws are often “hidden” behind inequalities. In this case I initially had a inequality saying that the dispatched amount had to be below the demand, it took me some time to realize that what is leftover deserves a concept in its own. Then, the conservation law appeared and it became easier to reason and debug with this extra ‘dropped’ variable.&lt;/p&gt; &lt;h3 id="samples-must-reach-a-lab-and-be-processed-within-their-lifetime"&gt;samples must reach a lab and be processed within their lifetime&lt;/h3&gt; &lt;p&gt;Here we are using some &lt;em&gt;implication&lt;/em&gt; connective that says that if the transit time and the considered queuing delay exceeds the sample lifetime, then the dispatched amount for this zone, lab, and delay has to be zero.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;% cannot delay (including transit time) past sample_lifetime constraint forall(z in ZONE, l in LAB, t in TIME, d in DELAY) ((transit[z,l] + d &amp;gt; sample_lifetime) -&amp;gt; dispatch[z,l,t,d] = 0); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This formal statement is worth reading at a slow pace because the formalism is not really a natural way of thinking. What makes such statements hard to parse is that we initially said that we want samples to be processed within their lifetime (i.e., we want a desired outcome to happen) whereas the statement speaks about preventing dispatching (i.e., we prevent the inverse of the desired outcome). I do not claim that it is impossible to reverse the logic, but I found no trivial ways to do so without introducing new variables.&lt;/p&gt; &lt;p&gt;Combined with the conservation law, this constraint will force undispatcheable quantities to move to the dropped quantity.&lt;/p&gt; &lt;h3 id="load-versus-capacity-at-lab"&gt;load versus capacity at LAB&lt;/h3&gt; &lt;p&gt;We need some way to prevent LABs overload. For this we need a definition of load of a LAB at a given time. This load consists of the dispatched amounts (including transit costs and backlog-delays).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;% helper: workload processed by a lab at a given time (includes delayed dispatches) array[LAB,TIME] of var int: load; constraint forall(l in LAB, t_load in TIME) ( load[l,t_load] = sum(t_route in t_load-sample_lifetime..t_load where t_route &amp;gt; 0, z in ZONE) (dispatch[z,l,t_route,t_load-t_route]) ); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It takes some work to sum all the right terms, but once we have the load at a given time, the constraint becomes trivial.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;% cannot overload labs constraint forall(l in LAB, t in TIME) (capacity[l] &amp;gt;= load[l,t]); &lt;/code&gt;&lt;/pre&gt; &lt;h3 id="objective-no-waste"&gt;objective: no waste&lt;/h3&gt; &lt;p&gt;This probably is the easiest part of the work. We sum the total dropped amounts and minimize this.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;var int: total_drop = sum(array1d(dropped)); solve minimize total_drop; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Overall, this objective combined with the conservation law gives some intuition about what a performing heuristic could look like: starting by dispatching zero we try to attribute fill labs with from closest zones in total delay. Fortunately, we do not need to write a heuristic and can just run our MiniZinc model.&lt;/p&gt; &lt;h2 id="running-the-model"&gt;Running the model&lt;/h2&gt; &lt;p&gt;You will find my model, some example data and even some synthetic-data generator written with a simple Ruby script at &lt;a href="https://github.com/lucasdicioccio/labspread"&gt;one of my GitHub repos&lt;/a&gt; .&lt;/p&gt; &lt;p&gt;The final model has one modification (see below) but also a slightly different output format than you get by default with MiniZinc (hopefully it’s more readable).&lt;/p&gt; &lt;p&gt;An example simple input that allows to understand what happens is a data file like the following:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;nLab = 3; nZone = 2; nTime = 5; sample_lifetime = 0; capacity = [|1,1,1,1,1 |1,1,1,1,1 |1,1,1,1,1 |]; transit = [|0,0,0 |0,0,0 |]; demand = [|1,1,2,0,10 |1,0,0,2,0 |]; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this data input, we see that there is uniform capacity of &lt;code&gt;1&lt;/code&gt; for tree labs. There is no transit delay, however the lifetime of samples is zero (i.e., we cannot backlog samples). The demand fluctuates at two sample-collection zones and overloads the total capacity at the end (we reach &lt;code&gt;10&lt;/code&gt;, otherwise we only use &lt;code&gt;2&lt;/code&gt;). Here it’s pretty clear that we expect to be able to serve the demand except for &lt;code&gt;7&lt;/code&gt; samples at the last time slot.&lt;/p&gt; &lt;p&gt;If we run the model from GitHub we get some textual output:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(...truncated by me...) t=4 demand=2 capacity=3 drop=0 sent=(1-&amp;gt;1,0) (1-&amp;gt;2,0) (1-&amp;gt;3,0) (2-&amp;gt;1,1) (2-&amp;gt;2,1) (2-&amp;gt;3,0) load=(1,1)(2,1)(3,0) t=5 demand=10 capacity=3 drop=7 sent=(1-&amp;gt;1,1) (1-&amp;gt;2,1) (1-&amp;gt;3,1) (2-&amp;gt;1,0) (2-&amp;gt;2,0) (2-&amp;gt;3,0) load=(1,1)(2,1)(3,1) total_drop = 7 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We see that the we indeed drop &lt;code&gt;7&lt;/code&gt; in the last time slot but we never lost samples before. All is good. One can then play around starting from the data file and have fun changing parameters. For instance, allowing some extra lifetime, adding transit, and increasing the total demand. We can arrive at situations where backlogging is required.&lt;/p&gt; &lt;p&gt;With this input for instance,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;nLab = 3; nZone = 2; nTime = 5; sample_lifetime = 2; capacity = [|1,1,1,1,1 |1,1,1,1,1 |1,1,1,1,1 |]; transit = [|0,1,2 |2,1,0 |]; demand = [|4,3,2,0,10 |3,0,10,2,0 |]; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The capacity is still &lt;code&gt;3&lt;/code&gt; per day but the demand regularly overshoots (but not always). The full “best” solution for this problem becomes:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;t=1 demand=7 capacity=3 drop=1 sent=(1-&amp;gt;1,2) (1-&amp;gt;2,1) (1-&amp;gt;3,0) (2-&amp;gt;1,0) (2-&amp;gt;2,1) (2-&amp;gt;3,2) load=(1,1)(2,1)(3,1) t=2 demand=3 capacity=3 drop=1 sent=(1-&amp;gt;1,1) (1-&amp;gt;2,0) (1-&amp;gt;3,1) (2-&amp;gt;1,0) (2-&amp;gt;2,0) (2-&amp;gt;3,0) load=(1,1)(2,1)(3,1) t=3 demand=12 capacity=3 drop=6 sent=(1-&amp;gt;1,2) (1-&amp;gt;2,0) (1-&amp;gt;3,0) (2-&amp;gt;1,0) (2-&amp;gt;2,2) (2-&amp;gt;3,2) load=(1,1)(2,1)(3,1) t=4 demand=2 capacity=3 drop=0 sent=(1-&amp;gt;1,0) (1-&amp;gt;2,0) (1-&amp;gt;3,0) (2-&amp;gt;1,0) (2-&amp;gt;2,1) (2-&amp;gt;3,1) load=(1,1)(2,1)(3,1) t=5 demand=10 capacity=3 drop=0 sent=(1-&amp;gt;1,10) (1-&amp;gt;2,0) (1-&amp;gt;3,0) (2-&amp;gt;1,0) (2-&amp;gt;2,0) (2-&amp;gt;3,0) load=(1,1)(2,1)(3,1) total_drop = 8 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;sent&lt;/code&gt; lines correspond to the &lt;code&gt;dispatch&lt;/code&gt; matrix, with the following syntax &lt;code&gt;($zone-&amp;gt;$lab, $quantity)&lt;/code&gt;. We notice some underwhelming fact: when the demand overloads the capacity, labs are working at full-capacity. This realization is pretty important because in general there is not a large amount of wiggle-room to fix a capacity issue with scheduling &lt;strong&gt;to fix the capacity issue, increase capacity or drop the demand&lt;/strong&gt;; this rule of thumb is even more true when lifetimes are short compared to how fast you can increase capacities. This model allows to play with parameters and “see” how this teaching is true. For the story: I wanted to convey this information to the person working for the NHS who asked me about what we could do to help face the crisis; you are facing an fast-growing phenomenon and soon your capacity will be maxed-out. Thus, there will be no gain in being smart, better provide tools to get good visibility and efficient handling, which can play a role in increasing capacity.&lt;/p&gt; &lt;h2 id="avenues-for-modifications"&gt;Avenues for modifications&lt;/h2&gt; &lt;p&gt;It’s always important to step back and see how we could change the model. I do not want to use the word &lt;em&gt;improve&lt;/em&gt; the model because we actually build different models. Indeed: a simple model also requires less input data (which may not be easy to collect), and less testing/debugging work.&lt;/p&gt; &lt;p&gt;We provide a series of modifications that one may want to apply and discuss how we could adapt (or not) the model. The easy-changes have snippets of code to see how the constraint-programming approach is beneficial.&lt;/p&gt; &lt;h3 id="more-time-varying-variables"&gt;More time-varying variables&lt;/h3&gt; &lt;p&gt;Lab capacities are given as a fixed value. However we could easily modify the lab capacities to be known time-varying values. Such a change could allow to model the effect of opening/closing some labs for WE breaks. The change here is pretty limited, we would introduce a &lt;code&gt;TIME&lt;/code&gt; component to the capacity and use it in the adequate constraint:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;array[LAB,TIME] of int: capacity; % cannot overload labs constraint forall(l in LAB, t in TIME) (capacity[l,t] &amp;gt;= load[l,t]); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such a model is the one I actually implemented first. The time-varying aspect of the capacity is not key in the structure of the problem (i.e., we do not change the number nor the shape of constraints, we merely change the bounds the load can take). Hence, it did not cost me much more to add.&lt;/p&gt; &lt;h3 id="more-physically-correct-model-of-test-performance"&gt;More physically-correct model of test-performance&lt;/h3&gt; &lt;p&gt;The quality of tests may deteriorate with the delay: in current model the ‘value’ of a test is implicitly binary: we get either 1 valid sample before the deadline or 0 past the deadline. We could imagine a different function with a smoother decrease in performance. Such a behavior could also help in providing different qualities or different deadlines depending on the sample-collection sites or the laboratories (e.g., because they use different sampling techniques or material).&lt;/p&gt; &lt;p&gt;For instance, if we attribute some dispatch value that decreases with the DELAY, we could use such an objective (turned into a maximization here).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;var int: w = sum(z in ZONE, l in LAB, t in TIME, d in DELAY)(dispatch[z,l,t,d] * (sample_lifetime-d)); solve maximize w; &lt;/code&gt;&lt;/pre&gt; &lt;h3 id="varying-processing-costs-at-laboratories"&gt;Varying processing costs at laboratories&lt;/h3&gt; &lt;p&gt;We can imagine that the network of laboratories may process various samples at different costs. The cost function could take into account a different price depending on the LAB. The cost function could even be non-linear with some base-rate and an overshoot cost (it’s a way to relax moderately the capacity constraint). Such extra cost-modeling would lead the optimization to fill in cheapest LABs first in a “water-filling” approach (starting from the cheapest LAB reachable from a given ZONE until the LAB is no longer the cheapest alternative etc.).&lt;/p&gt; &lt;p&gt;We could do something like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;var int: w = sum(l in LAB, t in TIME)(processing_cost(l, load[l,t])); solve minimize w + drop_cost * total_drop; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Given a &lt;code&gt;processing_cost&lt;/code&gt; function mapping LABs and loads to a numerical cost we can incorporate the processing cost into the objective. Care as to be taken to still take into account the &lt;code&gt;total_drop&lt;/code&gt; amount and weight it accordingly to the processing_cost (otherwise the solver will cynically figure out that dropping every samples incurs no cost).&lt;/p&gt; &lt;h3 id="more-faithful-representation-of-probabilities"&gt;More faithful representation of probabilities&lt;/h3&gt; &lt;p&gt;Actual demand in test is pretty unknown: using stochastic programming could help having more acceptable results (a typical implementation is to discretize the probability distribution, another one is to produce a large amount of simulated scenarios). The change requires to provide a discretized weighed probability of input demand values instead of one demand value per time step and average over scenarios. I find hard to stay within the constraint-programming model framework for this problem because a constraint-programming model decides once what are the action taken at every future time step. In such a situation, where you believe you need to go all the way to model stochastic behaviors you may as well spend the efforts to model how successive choices can take advantage of the facts that become known as the time passes. Here you may want to reach for bigger guns like &lt;a href="https://www.mit.edu/~dimitrib/Dynamic_Prog_Videos.html"&gt;optimal-control and reinforcement learning&lt;/a&gt; theory (here, a single-stage CP could be a rollout-heuristic – but we are eyeing on state-of-the-art topics rather than on a humble blog post).&lt;/p&gt; &lt;h3 id="more-business-constraints"&gt;More business constraints&lt;/h3&gt; &lt;p&gt;As provided in the introduction. A reason to avoid spending too much time in using an off-the-shelf algorithm can be a simple business-rule such as “a testing site can ship at most twice per day”, which would mean our optimization no-longer looks like a well-studied &lt;em&gt;max-flow&lt;/em&gt; problem. Rather, this real-world problem becomes flavored with a bit of bin-packing because we cannot pick all the variables of the output attribution matrix independently from each other.&lt;/p&gt; &lt;p&gt;Building such a constraint is non-trivial because you need an array of auxiliary variables telling how many LABs a ZONE serves at a given TIME (irrespective of the DELAY). Say you get a &lt;code&gt;sent&lt;/code&gt; array. Then force the cardinality of zeros with a &lt;a href="https://www.minizinc.org/doc-2.5.5/en/lib-globals.html#counting-constraints"&gt;global counting constraint&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;That said, the overall constraint is not that complicated to write.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;% helper: work sent from zone to a lab at a given time (whichever delay is dispatched) array[ZONE,LAB,TIME] of var 0..maxAttr: sent; constraint forall(l in LAB, z in ZONE, t in TIME) (sent[z,l,t] = sum(d in DELAY)(dispatch[z,l,t,d])); % max two sent int: maxShipment = 2; include &amp;quot;globals.mzn&amp;quot;; constraint forall(t in TIME, z in ZONE)( count([sent[z,l,t]|l in LAB],0) &amp;gt;= nLab-maxShipment ); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In that case, switching the solver type may significantly alter performance. It would be useful to force ourselves to model this problem as a mixed-integer-linear-programming problem, but that would become rather complicated if you combine these alterations to the initial problem.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h1 id="closing-remarks"&gt;Closing remarks&lt;/h1&gt; &lt;p&gt;Before starting modeling the problem with a constraint-programming language, let’s keep in mind that we should always do the work of trying to apply an off-the-shelf but under-constrained algorithm: sometimes it works (i.e., you are lucky that the solution actually fits the extra constraints), sometimes you get a perspective that is useful for the problem (e.g., here we re-used the idea of &lt;em&gt;leftovers&lt;/em&gt;), and at worst you can also use an “under-constrained” solution to get a approximation or an higher-bound to accept/reject some alternative (e.g., you have two alternatives situations you could reject one alternative because we cannot expect an optimal solution to beat the average of the other alternative).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/optimal-lab-samples-spreading.html" rel="alternate"/>
        <summary type="text">
            An illustration of how to model a constraint-problem to optimally distribute testing samples to laboratories.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/how-this-blog-works.html
        </id>
        <title type="text">
            The technology behind this blog
        </title>
        <updated>
            2022-01-30T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;I wasn’t &lt;a href="/hashtags/blogging.html"&gt;&lt;span class="hashtag" data-hashtag="blogging"&gt;#blogging&lt;/span&gt;&lt;/a&gt; much. I used to prefer giving meetup &lt;a href="/talks.html"&gt;talks&lt;/a&gt;, then the pandemic came and I wanted to start blogging a bit. I wrote nothing, mostly due to the lack of blogging platform I liked. This year, one resolution I took is to remediate this situation and start writing some technical content. After past and more recent attempts at using a SAAS blogging platform, hosting a Wordpress, or generating a Jekyll site, or hand-written HTML files; I always got frustrated.&lt;/p&gt; &lt;p&gt;I always felt some friction between writing content and laying-out content. Writing requires some uninterrupted stream of thought, whereas formatting HTML require focus and repeated trial-and-errors cycles. Writing the text in one document and then formatting the HTML aside in another tool typically is not sufficient because any change requires modifications in multiple places.&lt;/p&gt; &lt;p&gt;Without much surprise, I ended up writing my own engine. This article explains what I really want of a blog-engine and how I’ve implemented it. Little code is shown and ideas are applicable whatever tech-stack you pick.&lt;/p&gt; &lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt; &lt;p&gt;Let’s make a checklist&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;input type="checkbox" disabled&gt; static-site first, APIs second &lt;/li&gt; &lt;li&gt;&lt;input type="checkbox" disabled&gt; live preview with auto reload &lt;/li&gt; &lt;li&gt;&lt;input type="checkbox" disabled&gt; markdown for the meaty content, functional layouts &lt;/li&gt; &lt;li&gt;&lt;input type="checkbox" disabled&gt; customizable CSS, JS per article &lt;/li&gt; &lt;li&gt;&lt;input type="checkbox" disabled&gt; metadata for layout and stats &lt;/li&gt; &lt;/ul&gt; &lt;h3 id="static-site-first-serving-second"&gt;static-site first, serving second&lt;/h3&gt; &lt;p&gt;Hosting a static site is much simpler. GitHub does it for free. At this point I cannot justify maintaining API endpoints for posting comments, nor a database to store them. I still would like to be able to fluidly move to something beefier with a web server. When such a move arises, I would not want to have to port all the meaty content. That is, if I occasionally need an API call, I can still imagine having a static-site first, with only a meager amount of web-serving.&lt;/p&gt; &lt;p&gt;A nice side-effect is that &lt;code&gt;git&lt;/code&gt; is a natural database of content, and git-based flows could serve in multi-authors situations (or for instance to let people use GitHub to add invited-content/comments on the blog).&lt;/p&gt; &lt;h3 id="developer-mode-with-live-preview"&gt;developer mode with live-preview&lt;/h3&gt; &lt;p&gt;I like quick feedback loops. The fastest feedback loop I can think of is a WYSIWYG editor. However my experience with WYSIWYG is not great. To make WYSIWYG works, tools require pretty stringent feature constraints. For instance it is hard to be consistent across pages due to the free-hand nature of WYSIWYG tools. WYSIWYG tools work with their internal and opaque data structures, which then hinder composition with other software and may have challenging upgrade paths.&lt;/p&gt; &lt;p&gt;From experience with LaTeX and markdown in GitHub/GitLab documents, I think a fast-preview is good enough. A Live-preview like in HTML-IDE is almost as good as the immediacy of WYSIWYG. Given that I am writing HTML content, I could use a JS script to automatically reload after changes like some JS applications frameworks (e.g., NextJS) offer.&lt;/p&gt; &lt;h3 id="markdown-for-the-meaty-content-functional-layouts"&gt;markdown for the &lt;em&gt;meaty&lt;/em&gt; content, functional layouts&lt;/h3&gt; &lt;p&gt;To make a blog page you need two broad set of HTML information, the meaty content and the layout parts. The meaty content is the large amount of words and paragraphs and images that make the core of the site. This is what readers are interested in. The layout is what readers (and robots) need to navigate and discover the content. The layout adds some wrapping and normalization of headers, footers etc.&lt;/p&gt; &lt;p&gt;To write meaty-content, you typically want a language with little line-noise than then renders to HTML chunks. Platforms have a variety of syntax for this. For instance, Wikipedia has its own format with specific features to recognize links between articles etc. Beside supporting a ‘flow of consciousness’ approach, these formats are good because we can easily re-use existing tooling such as the &lt;code&gt;aspell&lt;/code&gt; spellchecker, &lt;code&gt;grep&lt;/code&gt; to locate some keywords without too much false-positive. For my own blog I settled on &lt;a href="https://commonmark.org/"&gt;Commonmark&lt;/a&gt; which is roughly &lt;em&gt;enhanced-markdown-with-a-proper-spec&lt;/em&gt;. Commonmark has been invented by one author of Pandoc, which gives a lot of credit to the initiative.&lt;/p&gt; &lt;p&gt;In tension with the “meaty content” is the “layout”. We need to wrap out meaty content with repetitive information but also with a fair amount of article-specific dynamic information (e.g., the publication date should always be at the same position, a list of keywords should be present when keywords are present). I need some automated templating to achieve a proper layout, some templating languages exist like &lt;a href="https://mustache.github.io/"&gt;Mustache&lt;/a&gt;, &lt;a href="https://haml.info/"&gt;Haml&lt;/a&gt;, &lt;a href="https://pkg.go.dev/text/template"&gt;GoTemplate&lt;/a&gt;, but I always felt the overhead of learning these specific syntaxes and using these outweighs their benefit. Let me elaborate a bit: these templating languages are constrained to avoid doing things like starting a web-server while rendering some HTML. They support constructs like iterations into structures for repeated information (e.g., for each tag add a &lt;code&gt;&amp;lt;li&amp;gt;{{tag.name}}&amp;lt;/li&amp;gt;&lt;/code&gt; content). This is all good, however for any non-trivial layout, you end up preparing a very specific data structure with all the right computations (e.g., sorting, numbering things). In the end, you need to morally prepare your template twice: first in the rendering to HTML in the template language itself, a second time in the data structure you pass to the template engine. Maintenance is complicated, and you lose a lot of type checking benefits at the boundary between your main language and your templating language. In short, you gained little at extra cost.&lt;/p&gt; &lt;p&gt;In my opinion, templating and layout are solved by restricting oneselves to pure-functions from some dataset to an HTML structure &lt;code&gt;DataSet -&amp;gt; HTML&lt;/code&gt;. Hence, functional programming is &lt;strong&gt;the right tool for the job&lt;/strong&gt;. I happen to know Haskell well, the author of Commonmark wrote a couple of libraries in Haskell &lt;span class="emoji" data-emoji="arrow_right"&gt;➡️&lt;/span&gt; overall I have no reasons to shy away and pick something different.&lt;/p&gt; &lt;h3 id="customizable-metadata-css-js-per-article"&gt;customizable metadata, CSS, JS per article&lt;/h3&gt; &lt;p&gt;I have ideas for some articles that would benefit from having special CSS or special JS scripts (e.g., to add some interactivity). Ideally, I want the ability to insert assets on a per-page basis. Since there are different reasons for inserting a specific asset (e.g., the layout is different for a generated article listing than for a normal article), customization could be written at the Haskell side or in the meaty content but in most cases we should configure that from the meaty content. Ideally, I would type multiple sections in a single file to avoid spreading what is a single article into many files with a proper directory structure (I don’t enjoy structuring directories until I feel enough pain to do so). An example of files with sections are &lt;a href="https://en.wikipedia.org/wiki/MIME#Multipart_messages"&gt;multipart-emails&lt;/a&gt;. And your email client can totally make sense of images, HTML parts, text parts from a condensed text file. Let’s take inspiration on this.&lt;/p&gt; &lt;h2 id="synthesis-of-requirements"&gt;Synthesis of requirements&lt;/h2&gt; &lt;p&gt;The thing I want is some Haskell-variant that (a) interprets markdown-like files for the &lt;em&gt;meaty content&lt;/em&gt; then passes that into (b) some rendering function. These files could (c) be augmented with extra data and extra CSS/JS. The tool I want would have a generate-static-site and a serve-on-the-fly-files to accommodate the ambivalent ‘static but also live but also with an API if I want one day’ aspects.&lt;/p&gt; &lt;p&gt;I don’t really want to invest time in learning something that will be irritating in one of these dimensions. Established tools may be too rigid to accommodate some of my quirks. The closest tool I found likely is &lt;a href="https://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt;, a Haskell static-site generation library. It supports some form of metadata per-article for customizing the article (e.g., picking a certain layout) but I really want to insert multiple sections.&lt;/p&gt; &lt;p&gt;Thus, overall, I got a pretext to &lt;strong&gt;invent my own&lt;/strong&gt; &lt;span class="emoji" data-emoji="nerd_face"&gt;🤓&lt;/span&gt; .&lt;/p&gt; &lt;h1 id="implementation"&gt;Implementation&lt;/h1&gt; &lt;p&gt;Let’s first say that the implementation I present here does not represent the whole iterations. I first started with a simple file-to-file generator taking exactly one &lt;code&gt;.cmark&lt;/code&gt; file with multiple sections and turning that into &lt;code&gt;.html + .css&lt;/code&gt; . Proper layouts and live-reloads came later, the whole blog has been a single Haskell file until long (i.e., when compilation time where too long while changing only the layout).&lt;/p&gt; &lt;p&gt;This section does not speak about Haskell but rather focuses on the general architecture. Thus when I say “a function” you can imagine it’s “a monad” if you feel compelled to entertain an annoying cliché about Haskellers detached from reality.&lt;/p&gt; &lt;h2 id="main-architectural-blocks"&gt;Main Architectural Blocks&lt;/h2&gt; &lt;p&gt;The following picture sketches roughly the blog engine pipeline.&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/blog-phases.dot.png" alt="pipeline" /&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;compile&lt;/strong&gt; &lt;code&gt;ghc&lt;/code&gt; turns Haskell code into a &lt;code&gt;binary&lt;/code&gt; that contains the blog layout and advanced rules &lt;/li&gt; &lt;li&gt;&lt;strong&gt;read&lt;/strong&gt; collects all input files, possibly other sources &lt;/li&gt; &lt;li&gt;&lt;strong&gt;assemble&lt;/strong&gt; builds an understanding of everything that needs to be generated, copied etc. &lt;/li&gt; &lt;li&gt;&lt;strong&gt;produce&lt;/strong&gt; writes all the needed files to the right location &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;So overall it is pretty simple and nothing is ground-breaking. Assuming the compile step is already done you have a binary. The binary will have a fixed layout that can generate a blog for new content. To illustrate, adding a &lt;em&gt;new article&lt;/em&gt; is done by adding a new &lt;code&gt;.cmark&lt;/code&gt; file but &lt;strong&gt;requires no recompilation&lt;/strong&gt;. But &lt;em&gt;changing the HTML&lt;/em&gt; structure to display the social links &lt;strong&gt;requires a code-change and a recompilation&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;To motivate the next sections it is worth detailing the assembly-part of the blog engine. Let’s focus on &lt;code&gt;read -&amp;gt; assemble -&amp;gt; produce&lt;/code&gt; steps.&lt;/p&gt; &lt;h3 id="detailed-assembly-pipeline"&gt;detailed assembly pipeline&lt;/h3&gt; &lt;p&gt;A more detailed conceptual pipeline of the three last steps is as follows. In the following graph arrows represent the data flow (i.e., starting from inputs data representations progress towards the output files).&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/blog-engine.dot.png" alt="pipeline" /&gt;&lt;/p&gt; &lt;p&gt;At the top you get input files such as CSS or Commonmark files. We could easily add external inputs as well. All these sources get stuffed into an object named &lt;code&gt;Site&lt;/code&gt; which sort of contains the whole knowledge about inputs for a Site.&lt;/p&gt; &lt;p&gt;An &lt;code&gt;assemble&lt;/code&gt; function then takes the &lt;code&gt;Site&lt;/code&gt; and turns that into &lt;code&gt;Targets&lt;/code&gt; objects. The Targets themselves are not yet concrete files. Rather, they are annotated recipes about how to produce a single output. The recipe itself is named a &lt;code&gt;Production Rule&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Production Rules&lt;/code&gt; then can be executed on demand to either generate static files or being generated on the fly by a web-server (if the web-server is written in Haskell). We are lucky enough to have very good web-servers and web-API libraries in Haskell which allows to compose such an hybrid system – this hybrid system is handy for the developer-mode.&lt;/p&gt; &lt;p&gt;A key aspect of the pipeline (highlighted in the picture) is that the &lt;code&gt;assemble&lt;/code&gt; function actually is a bit more complicated than a mere mapping from JS, Markdown etc. There are two complications:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Extra-Targets can be computed from main targets, for instance each topic gets a listing page. These rules mainly are written in Haskell: the &lt;code&gt;index.cmark&lt;/code&gt; also needs the list of all &lt;code&gt;Article&lt;/code&gt; targets to generate extra content on top of some text written in Commonmark; for each &lt;code&gt;tag&lt;/code&gt; we create an index Target page and they all use the same &lt;code&gt;tags.cmark&lt;/code&gt; instructions &lt;/li&gt; &lt;li&gt;&lt;code&gt;Articles&lt;/code&gt; are written in Commonmark however the blog engine expects a special format that contains &lt;code&gt;Sections&lt;/code&gt;, these Sections contain the meaty content but also metadata information in JSON and commands that could lead to generating more files &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Overall, I need to use an ad-hoc mix of Haskell and Commonmark to generate pages and their templates. This mix is means there sometimes is two ways to do a thing (e.g., should I add some default CSS file in the layout or via includes in the CSS-section of individual articles so that I can override it entirely?) with no clear immediate tradeoff.&lt;/p&gt; &lt;h3 id="sample-output"&gt;sample output&lt;/h3&gt; &lt;p&gt;When the binary executes you get an uninteresting log of what occurs. This log can help understand what happens.&lt;/p&gt; &lt;div id="sample-output-txt"&gt; &lt;pre&gt;&lt;code class="language-text"&gt;found site-src/talks.md found site-src/how-this-blog-works.md found site-src/snake-cube.md found site-src/alphabets.md found site-src/tags.md found site-src/santa-wrap.md found site-src/about-me.md found site-src/index.md generating out/gen/out/index.md__gen-date.txt executing `date` with args [] generating out/gen/out/index.md__gen-git-head-sha.txt executing `git` with args [&amp;quot;rev-parse&amp;quot;,&amp;quot;HEAD&amp;quot;] assembling out/talks.html assembling out/how-this-blog-works.html assembling out/snake-cube.html assembling out/alphabets.html assembling out/santa-wrap.html assembling out/about-me.html assembling out/index.html copying out/images/snake-cube-folded.jpeg copying out/images/snake-cube-l-shape.png copying out/images/snake-cube-mzn-003.png copying out/images/snake-cube-coords.png copying out/images/snake-cube-mzn-001.png copying out/images/sword.png copying out/images/layout-restricted.png copying out/images/geost-doc.png copying out/images/parts.png copying out/images/background.png copying out/images/snake-cube-mzn-002.png copying out/images/layout-robot-200x240.png copying out/images/deps.png copying out/images/layout-190x150.png copying out/images/layout-190x160.png copying out/images/haddock-jp.png copying out/images/snake-cube-unfolded.jpeg copying out/images/linear-layout.png generating out/gen/images/blog-phases.dot.png executing `dot` with args [&amp;quot;-Tpng&amp;quot;,&amp;quot;-o&amp;quot;,&amp;quot;/dev/stdout&amp;quot;,&amp;quot;site-src/blog-phases.dot&amp;quot;] generating out/gen/images/blog-engine.dot.png executing `dot` with args [&amp;quot;-Tpng&amp;quot;,&amp;quot;-o&amp;quot;,&amp;quot;/dev/stdout&amp;quot;,&amp;quot;site-src/blog-engine.dot&amp;quot;] copying out/css/index-wide.css copying out/css/index-narrow.css copying out/css/main.css copying out/js/autoreload.js assembling out/topics/about-me.html assembling out/topics/constraint-programming.html assembling out/topics/formal-methods.html assembling out/topics/fun.html assembling out/topics/haskell.html assembling out/topics/minizinc.html assembling out/topics/optimization.html assembling out/topics/sre.html assembling out/topics/web.html generating out/json/paths.json generating out/json/filecounts.json &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(this excerpt is out of date but not you get the boring feeling)&lt;/p&gt; &lt;/div&gt; &lt;h2 id="section-based-file-format"&gt;Section-based file format&lt;/h2&gt; &lt;p&gt;An input file for an Article is suffixed &lt;code&gt;.cmark&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The content of a single file with multiple sections is a file like the following example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:build-info.json {&amp;quot;layout&amp;quot;:&amp;quot;article&amp;quot; } =base:preamble.json {&amp;quot;author&amp;quot;: &amp;quot;Lucas DiCioccio&amp;quot; ,&amp;quot;date&amp;quot;: &amp;quot;2022-02-01T12:00:00Z&amp;quot; ,&amp;quot;title&amp;quot;: &amp;quot;An article about Haskell&amp;quot; } =base:topic.json {&amp;quot;topics&amp;quot;:[&amp;quot;haskell&amp;quot;, &amp;quot;some-tag&amp;quot;] ,&amp;quot;keywords&amp;quot;:[&amp;quot;some keyword&amp;quot;] } =base:social.json {&amp;quot;twitter&amp;quot;: &amp;quot;me&amp;quot; ,&amp;quot;linkedin&amp;quot;: &amp;quot;myself&amp;quot; ,&amp;quot;github&amp;quot;: &amp;quot;again-me&amp;quot; } =base:summary.cmark Some summary. =base:main-content.cmark # this is an h1 title ## this is an h2 title lorem ipsum ... =base:main-css.css @import &amp;quot;/css/main.css&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each section is a textual block starting with a special delimiter like &lt;code&gt;=base:build-info.json&lt;/code&gt;. The layout code actually interprets these sections and look for various information. For instance, the &lt;code&gt;=base:topic.json&lt;/code&gt; contains information to add some topic-index and &lt;code&gt;meta&lt;/code&gt; tags. The &lt;code&gt;=base:main-css.css&lt;/code&gt; section allows to write some CSS that will be inlined in the HTML (conversely, &lt;code&gt;.css&lt;/code&gt; files found in the source directory will be copied around).&lt;/p&gt; &lt;p&gt;These sections could all be collapsed in a single section however I find it convenient to have one small datatype per logical ‘metadata’ piece.&lt;/p&gt; &lt;h2 id="dev-mode-and-auto-reload"&gt;Dev-mode and auto-reload&lt;/h2&gt; &lt;p&gt;The dev-server API itself is written with my &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;prodapi&lt;/a&gt; API library, which curates some good Haskell libraries for building APIs. There is enough to help running background tasks in the process (e.g., to watch for file-changes), and also to expose other dev-mode-only endpoints.&lt;/p&gt; &lt;p&gt;Examples of dev-mode-only endpoints are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a listing of all targets (which is useful when I lose track of what targets exist) &lt;/li&gt; &lt;li&gt;an endpoint I can call to rebuild the static-file outputs from the dev-server directly (rather than running the binary with different parameters) &lt;/li&gt; &lt;li&gt;build-time statistics &lt;/li&gt; &lt;li&gt;autoreload-helpers (see the dedicated section below) &lt;/li&gt; &lt;/ul&gt; &lt;h3 id="autoreload"&gt;autoreload&lt;/h3&gt; &lt;p&gt;I have a poor-man’s &lt;code&gt;autoreload.js&lt;/code&gt; script (source here &lt;a href="/js/autoreload.js"&gt;source of auto-reload script&lt;/a&gt;). That perform long-polling to a API route &lt;code&gt;/dev/watch&lt;/code&gt; that only the dev-webserver knows about (i.e., there won’t be a Target to generate for this URL path). The &lt;code&gt;autoreload.js&lt;/code&gt; script performs a full-page reload, which is acceptable as most of the articles I will ever write will mostly be stateless texts but.&lt;/p&gt; &lt;p&gt;The current implementation works using the amazing Software Transactional Memory (STM) support in Haskell and supports live-reloading mutliple pages simultaneously from different clients connected to a same server (not like I really use this feature but it does not incur much more work). Implementation of the live-reload is illustrated as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/autoreload-watches.dot.png" alt="autoreload" /&gt;&lt;/p&gt; &lt;p&gt;The server API route mediates a rendez-vous between:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;Web Browser&lt;/code&gt; who waits for an answer to the API call &lt;/li&gt; &lt;li&gt;&lt;code&gt;Filesystem&lt;/code&gt; changes that are propagated via inotify &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Overall, from a high-level perspective the live-reload follows these four simple steps:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Step-0. after loading the &lt;code&gt;.js&lt;/code&gt; a browser starts a watch over the HTTP request API handler &lt;/li&gt; &lt;li&gt;Step-1. inotify notifies the file-system change &lt;/li&gt; &lt;li&gt;Step-2. the watch terminates &lt;/li&gt; &lt;li&gt;Step-3. the HTTP request finishes, the browser reloads (which will return to Step-0) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Three threads co-exist in the server:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the &lt;code&gt;inotify&lt;/code&gt; callbacks loads targets then propagates them in a &lt;em&gt;Site&lt;/em&gt; (using a &lt;code&gt;TMVar Site&lt;/code&gt;), this thread is like if an event-stream of updated Sites was available but we only hold-on to the latest value &lt;/li&gt; &lt;li&gt;the &lt;code&gt;api&lt;/code&gt; registers a &lt;em&gt;Watch&lt;/em&gt; (using one &lt;code&gt;TMVar ()&lt;/code&gt; per HTTP-request) and inserts it in a list of pending watchers &lt;em&gt;[Watch]&lt;/em&gt; , then waits for the Watch to end &lt;/li&gt; &lt;li&gt;the server &lt;code&gt;background&lt;/code&gt; waits for the filesystem flag changes, clears the flag, then fans-out the signal to waiting HTTP-clients, all of this is atomic outside the STM area (all the changeds are annotated &lt;code&gt;flush&lt;/code&gt; in orange on the picture) &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="experience-report"&gt;Experience report&lt;/h1&gt; &lt;p&gt;It has been fun to write some get-stuff-done Haskell. I sincerely believe this blog engine does not have to shy away in face of other tools. I will surely try to extract the library code as a standalone engine at some point, but for now my repository mixes library, specific layout and rules for my own blog, and content.&lt;/p&gt; &lt;p&gt;Let me explain a few things that I find rather pleasant.&lt;/p&gt; &lt;h2 id="sections-and-file-generators"&gt;Sections and file generators&lt;/h2&gt; &lt;p&gt;Some interesting Sections and ProductionRules:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;dotfile conversion: turn a &lt;code&gt;.dot&lt;/code&gt; file into a &lt;code&gt;.png&lt;/code&gt; with &lt;a href="https://graphviz.org/"&gt;GraphViz&lt;/a&gt;; the live-reload in the output web-page without leaving &lt;code&gt;vim&lt;/code&gt; makes it a breeze (see video below) &lt;/li&gt; &lt;li&gt;section command-gen: generates a file from a UNIX command (e.g., to get a special file with the git-sha or build timestamp) &lt;/li&gt; &lt;li&gt;section summary: short Commonmark content that appear in article listings (it also gets stripped down to text to add a meta tag) &lt;/li&gt; &lt;li&gt;section taken-off: stuff that is in the source but will be ignored, useful for draft sections &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following video gives an idea of how the live-reload of GraphViz-generated images work:&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/demo-blog.webm.mp4" type="video/mp4"&gt; &lt;source src="/videos/demo-blog.webm" type="video/webm"&gt; &lt;/video&gt; &lt;p&gt;I find this live-reload good enough to now run my blog-engine when I need to quickly edit such a graph for work.&lt;/p&gt; &lt;h2 id="commonmark-is-great"&gt;Commonmark is great&lt;/h2&gt; &lt;p&gt;The Commonmark package &lt;a href="https://github.com/jgm/commonmark-hs/tree/master/commonmark-extensions"&gt;supports extensions&lt;/a&gt;. For instance, I have enabled the emoji syntaxt that turns &lt;code&gt;:smiley:&lt;/code&gt; into &lt;span class="emoji" data-emoji="smiley"&gt;😃&lt;/span&gt;. I also enabled support for directly adding HTML tags (including JS) or annotating sections of code with HTML attributes if the rendering is not sufficient. Another use case is when you want to drop down to HTML or if you need small-scripting capabilities.&lt;/p&gt; &lt;p&gt;With HTML-tagging and JS inclusion, the following code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;::: {.example} press to get an alert &amp;lt;button class=&amp;quot;example-button&amp;quot; onClick=&amp;quot;alert('hi from commonmark')&amp;quot;&amp;gt;press me&amp;lt;/button&amp;gt; ::: &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;… gives the following rendering (with some CSS style defined in the CSS-section).&lt;/p&gt; &lt;div class="example"&gt; &lt;p&gt;&lt;strong&gt;press to get an alert&lt;/strong&gt; &lt;button class="example-button" onClick="alert('hi from commonmark')"&gt;press me&lt;/button&gt;&lt;/p&gt; &lt;/div&gt; &lt;h2 id="you-can-get-creative"&gt;You can get creative&lt;/h2&gt; &lt;p&gt;Direct-embedding of JavaScript allows me to write JavaScript as page-enhancement snippets (e.g., adding a ‘mail-to’ tag for each talk in the &lt;a href="/talks.html"&gt;Talks&lt;/a&gt; page). What excites me the most is that I can also build some full-blown visualizations (e.g., the graph-view on the &lt;a href="/index.html"&gt;home page&lt;/a&gt;). The Haskell-side of the blog-engine allows me to implement pretty much arbitrary logic to prepare some JSONs objects as special targets. Such objects typically are article-specific or site-wide summaries. I can then treat these targets as API endpoints that have fixed content once the site is entirely-produced but where the data is dynamically-recomputed while in developer mode.&lt;/p&gt; &lt;h3 id="site-wide-statistics"&gt;site-wide statistics&lt;/h3&gt; &lt;p&gt;An example of this JavaScript usage below shows you can embed JavaScript for visualizations (example with &lt;a href="https://vega.github.io/vega-lite/usage/embed.html"&gt;Vega-Lite&lt;/a&gt;). Further, the visualization loads a special file &lt;a href="/json/filecounts.json"&gt;json-file-counts&lt;/a&gt; that has been generated as a special Target part of the layout. However, a generator section could also create a similar target.&lt;/p&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega@5.21.0"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@5.2.0"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.20.2"&gt;&lt;/script&gt; &lt;div id="vis"&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var yourVlSpec = { $schema: 'https://vega.github.io/schema/vega-lite/v5.json', description: 'A simple bar chart with embedded data.', data: { url: "/json/filecounts.json" }, mark: 'bar', encoding: { x: {field: 'srctype', type: 'ordinal'}, y: {field: 'count', type: 'quantitative'} } }; vegaEmbed('#vis', yourVlSpec); &lt;/script&gt; &lt;h3 id="article-shape-statistics"&gt;article-shape statistics&lt;/h3&gt; &lt;p&gt;I typically try to balance-out my articles. While writing LaTex, it’s easy to see the page/column count per page. In HTML we do not really have an immediate equivalent.&lt;/p&gt; &lt;p&gt;A good example of per-article statistics is a histogram made with &lt;a href="https://echarts.apache.org"&gt;Apache ECharts&lt;/a&gt; that I produce and display while in developer-mode to get a visual glimpse of how the article is shaped.&lt;/p&gt; &lt;script src="js/echarts.min.js"&gt;&lt;/script&gt; &lt;script src="js/jquery-3.6.0.min.js"&gt;&lt;/script&gt; &lt;script src="js/echart-histogram.js"&gt;&lt;/script&gt; &lt;div id="histogram"&gt; &lt;/div&gt; &lt;p&gt;On the X-axis you get an index of text blocks in the Commonmark file. Whereas the Y-axis is the cumulative number of words so far. This way I can visualize what is the shape of the article and detect highly-imbalanced paragraphs. This histogram is “work in progress” and I tend to adapt it when I feel like it (I would like to also have markers for images/links). This visualization is automatically-inserted in the “developer mode” layout. However, given that the JSON object target with the article stats is &lt;a href="/json/how-this-blog-works.cmark.json"&gt;a generated target&lt;/a&gt;, I can show you in this article by manually inserting the &lt;a href="/js/echart-histogram.js"&gt;JavaScript&lt;/a&gt;. The JavaScript code knows the URL to the special target for the current article with statistics by looking up a custom &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag, so that the JavaScript include does not require tweaking or per-page configuration. Longer term, I may decorate every article with such a navigation help.&lt;/p&gt; &lt;h2 id="future-ideas"&gt;Future ideas&lt;/h2&gt; &lt;p&gt;Besides open-sourcing the engine (which means tracking hardcoded things or personal-layouts, plus maintaining an external project). There is much I would like to implement. Unfortunately, these ideas have an activation function a bit higher than I have energy these days. More bluntly, I’d rather focus on writing more content rather than working on the blog engine itself.&lt;/p&gt; &lt;p&gt;Regarding &lt;em&gt;templating&lt;/em&gt;. I still would like some interpreted templating (e.g., Mustache) for some very specific cases such as data tables, with data generated from another section. The reason is that to add a new article I should write code only for the article rather than splitting haskell and Commonmark around (exceptions are special pages like &lt;code&gt;tags.md&lt;/code&gt; and &lt;code&gt;index.md&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;This will require some extra wiring in the Target-assembly part and some difficult decision as to what is really-static and what is in-fact dynamic. My main inspiration are &lt;a href="https://jupyter.org/"&gt;Jupyter&lt;/a&gt; notebooks.&lt;/p&gt; &lt;p&gt;Regarding new &lt;em&gt;sections&lt;/em&gt;, &lt;em&gt;targets&lt;/em&gt;, or &lt;em&gt;layouts&lt;/em&gt;. I would like to allow to have scripting-language sections (for now I only have direct shell commands). For instance to generate a picture using &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Python&lt;/code&gt;. It would be nice as well to inline the dot-source of GraphViz pictures directly in the &lt;code&gt;.cmark&lt;/code&gt; file. RSS targets also are on my wishlist, however I do not use a lot of RSS myself. I also would like to have some article-type layouts for photo albums and snippet-like entries (e.g. to improve on the &lt;a href="/tips.html"&gt;Tips page&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Regarding &lt;em&gt;dependency-graphs&lt;/em&gt;. I would like to have a section where required URLs can be declared. Doing so will enable more interesting build sequences.&lt;/p&gt; &lt;p&gt;As a &lt;em&gt;fluid static to web-app engine&lt;/em&gt;, I think this blog-engine is a good starting-point for mixed website where some pages or endpoint are dynamic API calls. I already have a “serve mode” for the day where I feel compelled to move out of GitHub pages. The “serve-mode” for now is just the “dev mode” but without the special-routes and special-layouts but it would need some extra configurations and simple caching strategies to reduce security-risk vectors (e.g., to prevent arbitrary-commands generators and costly targets to be run on demand).&lt;/p&gt; &lt;p&gt;Some inspiration for future work can also be found in the &lt;a href="/readings.html#static-and-personal-site-technology"&gt;Readings&lt;/a&gt; page (section “Static and personal site technology).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/how-this-blog-works.html" rel="alternate"/>
        <summary type="text">
            The overengineering behind this blog. Or is it not over-engineered?
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/snake-cube.html
        </id>
        <title type="text">
            Solving the Snake Cube puzzle
        </title>
        <updated>
            2022-01-01T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In 2021, Santa brought me this puzzle: &lt;img src="images/snake-cube-unfolded.jpeg" alt="an unfolded Snake-Cube" /&gt; This is sometimes named the “Snake-Cube” because the device looks like a snake &lt;span class="emoji" data-emoji="snake"&gt;🐍&lt;/span&gt; when unfolded. The goal of this game is to fold it into a cube &lt;span class="emoji" data-emoji="package"&gt;📦&lt;/span&gt; like this. &lt;img src="images/snake-cube-folded.jpeg" alt="a folded snake cube" /&gt; The device is built with cubes that are drilled across some faces so that a strap runs trough cubes like beads. Cubes thus have some degree of freedom to rotate around the strap. Overall, two cubes are terminal and the other ones then either are straight or corners depending on the shape of hole. Whether you can visualize how “it works” or not, you should definitely check this link can give you an appreciation of the &lt;a href="https://woodgears.ca/puzzles/snake_cube.html"&gt;craft behind a wooden Snake Cube&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After solving the Snake-Cube by hand, the puzzle started pinching my interest. I could imagine a procedure to invent “new” Snake-Cube puzzles (by drawing a path that fills the cube in 3D, a common graph-theory problem) but I wanted to convince myself: is there only one solution? Can I make a program to solve the Snake-Cube automatically and somewhat efficiently? I decided to give it a try with &lt;a href="https://www.minizinc.org/"&gt;MiniZinc&lt;/a&gt;, a &lt;em&gt;constraint programming&lt;/em&gt; toolbox. This article is an introduction to MiniZinc and illustrates how one can solve real-world problem with MiniZinc. We explain basic formal modeling techniques and touch on some advanced topics as well. No prior knowledge of MiniZinc is required although we will not run you through the menus of the IDE before showing screenshots.&lt;/p&gt; &lt;h1 id="a-minizinc-model"&gt;A MiniZinc model&lt;/h1&gt; &lt;p&gt;MiniZinc is a language for finite-search discrete programming. These complicated words mean that you get to declaratively specify, in a restricted formal language, what the characteristics of your problem are. A key restriction is that all variables are known and have a finite number of possible states. This restriction is not really a limitation in our case. A computer program then ingests the formal specification and automatically find solutions to the problem, or proves there are none.&lt;/p&gt; &lt;h2 id="basic-formalism-for-the-snake-cube"&gt;Basic formalism for the Snake-Cube&lt;/h2&gt; &lt;p&gt;To solve the Snake-Cube we need to capture interesting properties of the puzzle with &lt;em&gt;variables&lt;/em&gt;. Introducing variables is like &lt;strong&gt;having words to discuss concepts&lt;/strong&gt;. Variables must have a name and a &lt;em&gt;domain&lt;/em&gt; (i.e., a range of allowed values).&lt;/p&gt; &lt;p&gt;For instance, the snake is made of small &lt;em&gt;cubes&lt;/em&gt;. There are 27 (3x3x3) cubes in total. Thus we can give a name to each individual cube in the snake. Since solvers work with numbers, the easiest way is to use numerical names (i.e., indexing of values).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;set of int: CUBE = 1..27; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This MiniZinc statement says that we number each individual cube starting from &lt;code&gt;1 up to 27&lt;/code&gt;. We could have used &lt;code&gt;0..26&lt;/code&gt; or another &lt;em&gt;indexing scheme&lt;/em&gt;. The choice is a matter of preference but sometimes in MiniZinc it is convenient to leave &lt;code&gt;0&lt;/code&gt; as a special index to represent ‘absence of cube’.&lt;/p&gt; &lt;p&gt;Another way to imagine the Snake-Cube, rather than focusing on the snake &lt;span class="emoji" data-emoji="snake"&gt;🐍&lt;/span&gt;, let’s focus on the cube &lt;span class="emoji" data-emoji="package"&gt;📦&lt;/span&gt; . Let’s introduce the concept of &lt;em&gt;folded-cube&lt;/em&gt;, which represents the cube as a collection of 27 slots or &lt;em&gt;positions&lt;/em&gt;. This concept of position allows-us to explain the rules of Snake-Cube. Thus, let’s give a numerical index to each final position.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;set of int: POS = 1..27; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Astute readers may wonder why both &lt;code&gt;CUBE&lt;/code&gt; and &lt;code&gt;POS&lt;/code&gt; are numbered &lt;code&gt;1..27&lt;/code&gt;. The enumeration of values 1 to 27 is merely the representation of integers backing the individual and separate concepts. Another way to put it, is to say that &lt;code&gt;POS&lt;/code&gt; and &lt;code&gt;CUBE&lt;/code&gt; represent two different sets, and hence have different types. Which means that whenever we use a &lt;code&gt;CUBE&lt;/code&gt; in a function or as an array index, we get a MiniZinc compiler warning.&lt;/p&gt; &lt;p&gt;At this point, we have not achieved much yet, but we set up the basics of the problem. We can start recognizing and formulating the puzzle in a more formal way. Goal of the Snake-Cube: we need to &lt;strong&gt;attribute exactly one of the 27 positions to each one of the 27 cubes&lt;/strong&gt;. The new concept here is the &lt;em&gt;assignment&lt;/em&gt;, and we will need to introduce new variables in MiniZinc to be able to speak about the assignment. Further, the &lt;code&gt;POS&lt;/code&gt; and &lt;code&gt;CUBE&lt;/code&gt; concepts are immanent in our problem, there is not much work for MiniZinc, whereas this new concept of assignment is like a guess or a blank that MiniZinc will have to fill-in. We refer to these variables as &lt;em&gt;decision variables&lt;/em&gt; which are annotated with the &lt;code&gt;var&lt;/code&gt; keyword. Since we need to guess one position for each cube, we need as many decision variables as there are cubes. Rather than writing 27 times &lt;code&gt;var POS&lt;/code&gt; , we can bundle these variables in a &lt;em&gt;dimensional arrays&lt;/em&gt;. Like variables, dimension variables must have some initial domain. For instance machine integers, 1..100, or some set introduced beforehand. In our case, for each &lt;code&gt;CUBE&lt;/code&gt; we want a &lt;code&gt;var POS&lt;/code&gt;. So let’s introduce one array, indexed by &lt;code&gt;CUBE&lt;/code&gt; and containing &lt;code&gt;var POS&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;array[CUBE] of var POS: positions; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Repeating for clarity: this statement says that &lt;code&gt;positions&lt;/code&gt; is an array, which is indexed by &lt;code&gt;CUBE&lt;/code&gt; (i.e., it has one item for each of the 27 cubes) and of which items are positions to be decided.&lt;/p&gt; &lt;p&gt;If we run the solver like this, MiniZinc will happily find a solution (that is, it will be able to determine a concrete &lt;code&gt;POS&lt;/code&gt; for each &lt;code&gt;var POS&lt;/code&gt; in the &lt;code&gt;positions&lt;/code&gt; array &lt;img src="images/snake-cube-mzn-001.png" alt="solution showing all-ones" /&gt;&lt;/p&gt; &lt;p&gt;This screenshot shows an output of MiniZinc in the bottom pane (with our trivial problem model in the top pane). The message roughly said that MiniZinc found a correct assignment so far: every cube is put in the same position. This solution is unsatisfactory for the puzzle, but the reason is obvious: we have not given any “rules” of the Snake-Cube yet.&lt;/p&gt; &lt;h2 id="modeling-the-rules-of-snake-cube"&gt;Modeling the rules of Snake-Cube&lt;/h2&gt; &lt;p&gt;I claim there are two broad set of rules in the Snake-Cube.&lt;/p&gt; &lt;p&gt;On the first hand, some rules &lt;strong&gt;are enforced by physics&lt;/strong&gt;. For instance, cubes cannot overlap in space, corners force a change of direction, the rubber band filing through the cube forces a sort of continuity. On the other hand, other rules are &lt;strong&gt;enforced by our curiosity&lt;/strong&gt;, in the Snake-Cube the fact that the final shape actually is a cube, rather than, say, a L-shape is quite important. Otherwise, Snake-Cube would not be a puzzle but a mere toy to hammer things and make noise.&lt;/p&gt; &lt;p&gt;Encoding such rules into a model requires some process to &lt;strong&gt;express a vague intention&lt;/strong&gt; of a high-level statement – like the rules I stated above – &lt;strong&gt;into some given formalism&lt;/strong&gt;. Such a translation takes some practice, but you do not have to be intimidated. I would say that the formulating a constraint-programming problem has some similarities with formulating complicated SQL queries given an imprecise business requirement: you need to take care of NULLs, whether a RIGHT or LEFT join and all these sorts of things that can ruin the validity or the performance of the query.&lt;/p&gt; &lt;p&gt;The MiniZinc formalism, is built around a set of &lt;em&gt;constraints&lt;/em&gt; statements with a small set of basic logic introduction rules rules (equality, negation, inequalities, connectives: roughly what you get in &lt;a href="https://en.wikipedia.org/wiki/First-order_logic"&gt;predicate logic&lt;/a&gt;). Constraints add some coupling between variables, and allow the solver to perform some reasoning to shrink the domain of decision variables via a series of deductions. For instance, if you must guess a number between 1 to 10 but you learn that doubling this number is at least 16, then you can reduce the choice to 8, 9, or 10. In a proper business setup 16 could represent a target number of sales and the guess could represent the amount to spend on advertisement. In this example you would try to find the least amount to spend that still hit the target. In more involved examples, the target 16 could instead also be a decision variable in relationship with other commitments (i.e., there are more indirect coupling between two sets of decisions but the solver can still reason about these). Summarizing, a model requires to formalize how variables are linked to each other with a web constraints. These constraints have limited expressively so that a solver can propagate information between variables and along the connections that constraints impose.&lt;/p&gt; &lt;p&gt;Coming back to the Snake-Cube, let’s take for instance a physical rule that cubes cannot overlap. Let’s iteratively reformulate this statement in the MiniZinc language. Without doing to much maths ceremony, we could say that &lt;strong&gt;cubes cannot overlap&lt;/strong&gt; means that &lt;strong&gt;there can be at most one CUBE per POS&lt;/strong&gt;. Alas &lt;code&gt;at most one&lt;/code&gt; is a pretty complicated term, we so far only have &lt;code&gt;CUBE&lt;/code&gt;, &lt;code&gt;POS&lt;/code&gt;, and &lt;code&gt;positions&lt;/code&gt; as objects to manipulate. Thus, if we want to count how many &lt;code&gt;CUBE&lt;/code&gt; exists in each &lt;code&gt;POS&lt;/code&gt; we would have to introduce variables for counting occurrences of POS. All theses variables seem like a lot of extra work and we can try to find simpler expressions of the same rule. If we try to rephrase further, we could find a “simpler” way to encode our rule. We don’t need to count every occurrence but rather we should prevent co-occurrences. That is, to say, in a formal tone &lt;strong&gt;no two distinct CUBEs can be attributed to the same POS in the position array&lt;/strong&gt;. Even if this formulation hurts the ears, this formulation is good because we already have everything at our disposal. In MiniZinc, this statement would be written like this&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;constraint forall(c1, c2 in CUBE c1 != c2) (position[c1] != position[c2])`; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;constraint&lt;/code&gt; keyword introduces a new constraint. The &lt;code&gt;forall&lt;/code&gt; keyword has two sets of braces: an iteration binds variable names, in that case over all pairs of distinct &lt;code&gt;CUBE&lt;/code&gt;. The second set of braces contains another constraint, which in this case is merely looking up the positions of &lt;code&gt;CUBEs&lt;/code&gt; and requesting that their &lt;code&gt;POS&lt;/code&gt; are different, since &lt;code&gt;position&lt;/code&gt; is an array indexed by &lt;code&gt;CUBE&lt;/code&gt; we just need to perform a lookup. This indexing illustrates how natural it becomes to have arrays indexes by variables defined. You do not have to translate back to numerical indices starting at zero (or one depending on your typical programming language), MiniZinc translates indices for you.&lt;/p&gt; &lt;p&gt;Such a constraint of uniqueness of decision variables often arises while formalizing problems. Even if terse, it would be cumbersome to rewrite such a constraint every single time. Fortunately MiniZinc has a number of features to help with repetitive work: &lt;em&gt;functions&lt;/em&gt; and &lt;em&gt;predicates&lt;/em&gt; functions are like your typical programming function with arguments and an output. However they behave morally more like macros (i.e., MiniZinc will expand their content). Whereas predicates are functions that return constraints. As a modeler you would use predicates and functions to create increasingly-high level constraints from atomic constraints. You will find a library predicate in MiniZinc named &lt;code&gt;all_different&lt;/code&gt;. Thus we can rewrite our statement above with&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;include &amp;quot;all_different.mzn&amp;quot;; constraint all_different(positions); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This formulation is better than the &lt;code&gt;forall&lt;/code&gt; because it is more declarative: you cannot really mix it up. This formulation also has an incredible advantage: solvers can recognize these predicates and implement special routines to solve them faster. In constraint programming, such predicates are named &lt;em&gt;globals&lt;/em&gt; because &lt;strong&gt;globals can efficiently propagate information to all variables at once&lt;/strong&gt;, rather than the more point-to-point propagation which occurs with the “pedestrian” implementation. If a specific solver doesn’t know how global, MiniZinc defaults to a semantically-equivalent implementation (in short: the compatibility matrix is built-in). If we run MiniZinc we now get something better.&lt;/p&gt; &lt;p&gt;&lt;img src="images/snake-cube-mzn-002.png" alt="solution showing all-differents but not a real folded-cube" /&gt;&lt;/p&gt; &lt;p&gt;The assignment we get now looks &lt;em&gt;more correct&lt;/em&gt; (whatever that means). In a sense we can convince ourselves that we already have forced every &lt;code&gt;CUBE&lt;/code&gt; to fit in a box, and that no two cubes will ever be in the same position. Remember that we have 27 &lt;code&gt;CUBEs&lt;/code&gt;. All stars align, &lt;strong&gt;we have enforced the folded-cube rule without thinking too much&lt;/strong&gt; about it! Did we? actually it is not &lt;em&gt;that&lt;/em&gt; simple. Constraint programming is a bit like an evil genie: it will answer your wishes but did you clearly state your wish? Let’s recap what we have done.&lt;/p&gt; &lt;p&gt;So far we have discussed MiniZinc and brushed some vague explanation about how a constraint-solver works. We have seen the basics of what formalizing a game with variables and constraints. We managed to define variables to name every &lt;code&gt;CUBE&lt;/code&gt; in the snake and every &lt;code&gt;POS&lt;/code&gt; in the folded-cube. We recognized that we need to find one &lt;code&gt;POS&lt;/code&gt; for every &lt;code&gt;CUBE&lt;/code&gt; and thus built an array to store a decision &lt;code&gt;POS&lt;/code&gt; for every &lt;code&gt;CUBE&lt;/code&gt;. We also used the global predicate &lt;code&gt;all_different&lt;/code&gt; to force every &lt;code&gt;CUBE&lt;/code&gt; to be in a different POS, hence encoding some rules. All of this setup was mostly introductory.&lt;/p&gt; &lt;p&gt;Now what’s left: well, the folding problem is left! At this point, there are no connections between individual cubes. It’s like if we torn apart the Snake and stacked all the cubes and re-ordered them. We have not spoken about geometry at all. We don’t even know if the &lt;code&gt;POS&lt;/code&gt; numbering represents a 3x3x3 object because we have not inserted that into our model at all. To go further we’ll need to introduce some notion of coordinates.&lt;/p&gt; &lt;h2 id="a-coordinates-system"&gt;A coordinates system&lt;/h2&gt; &lt;p&gt;Coordinates will be useful for two things: first, ensure that our &lt;code&gt;POS&lt;/code&gt; numbering represents a 3x3x3 cube (remind that if you somehow forget this, the evil genie will mis-interpret your wish). And the coordinates will also be able to enforce the rules of what are valid folds that do not tear the snake apart.&lt;/p&gt; &lt;h3 id="3d-coordinates-of-positions"&gt;3d-coordinates of positions&lt;/h3&gt; &lt;p&gt;Let’s take a direct approach and define one type per dimension. Each &lt;code&gt;POS&lt;/code&gt; will have one coordinate value in every dimension. We can model this characteristics with three array indexed by &lt;code&gt;POS&lt;/code&gt; and that contains one dimensional value.&lt;/p&gt; &lt;p&gt;In object-oriented programming you would model that with a list of Position object, each containing three coordinates named x, y, and z. In MiniZinc you have three lists in parallel, each one encoding a single coordinate. Such a modeling with “one column per field” is typical in ‘columnar databases’ or in ‘ECS frameworks’, or even good old ‘CSV files’.&lt;/p&gt; &lt;p&gt;In MiniZinc you write:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;set of int: X = 0..2; set of int: Y = 0..2; set of int: Z = 0..2; array[POS] of X: xs = [ (p - 1) mod 3 | p in POS ]; array[POS] of Y: ys = [ ((p - 1) div 3) mod 3 | p in POS ]; array[POS] of Z: zs = [ ((p - 1) div 9) mod 3 | p in POS ]; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;An important note here is that we restrict upfront the interesting coordinates to be 0, 1, or, 2. Indeed, the folded-cube is only 3x3x3 and hence we do not really need to discuss what happens outside the folded-cube. On the opposite, if we limit ourself to a narrow world with 3 values per dimension, we can make sure our folded-cube does not “leak” because each &lt;code&gt;CUBE&lt;/code&gt; has a &lt;code&gt;POS&lt;/code&gt; via the &lt;code&gt;position&lt;/code&gt; array, and hence each &lt;code&gt;CUBE&lt;/code&gt; transitively has a X, a Y, and a Z in the 0..2 range, which means that every &lt;code&gt;CUBE&lt;/code&gt; is born to live ‘constrained’ in our 3x3x3 world, without explicitly adding constraints like &lt;code&gt;constraint forall(c in CUBE)( position[CUBE] &amp;lt;= 2 ) &lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;mod&lt;/code&gt; merely is arithmetic to give 3d coordinates for a ‘natural’ numbering of cube as shown in the following poor diagram I made&lt;/p&gt; &lt;p&gt;&lt;img src="images/snake-cube-coords.png" alt="diagram of 3d 3x3x3 cube" /&gt;&lt;/p&gt; &lt;p&gt;On this picture, the numbers correspond to &lt;code&gt;POS&lt;/code&gt; objects; not shown the values along X, Y, and Z start at &lt;code&gt;0&lt;/code&gt; at the ‘origin’ (and thus, &lt;code&gt;POS-1&lt;/code&gt; is at coordinates &lt;code&gt;{0,0,0}&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Also, since this computation is entirely determined from the input data, nothing is variable (i.e., MiniZinc runs the arithmetic before asking the solver to run guesses).&lt;/p&gt; &lt;h3 id="segmenting-the-snake"&gt;Segmenting the Snake&lt;/h3&gt; &lt;p&gt;Now that it’s clear that the folded-cube is 3x3x3, let’s talk about the snake. I decided to model the snake as a series of &lt;code&gt;SEGMENTs&lt;/code&gt; which are characterized by a starting and an ending &lt;code&gt;CUBE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For instance the following snake as initial segments &lt;code&gt;[1,3] [3,5] [5,7] [7,9]...&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 1 2 3 9 o-o-o o-.... | | 4 o o 8 | | o-o-o 5 6 7 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is the part of the puzzle where I had to verify five times I did the right counting because I’m not very good at counting above ten.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;set of int: SEGMENT = 1..17; array[SEGMENT,1..2] of CUBE: segments = [|1,3|3,5|5,7|7,9|9,10|10,11|11,12|12,14|14,16|16,17|17,18|18,20|20,21|21,23|23,24|24,25|25,27|]; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This compact syntax allows to declare a &lt;em&gt;two-dimensional array&lt;/em&gt; and its content. The array is declared as having two indexing keys and contains &lt;code&gt;CUBEs&lt;/code&gt;. The index &lt;code&gt;1..2&lt;/code&gt; represents the start or the end of the segment. Thus &lt;code&gt;segments[5,1] = 9&lt;/code&gt; is the &lt;code&gt;CUBE&lt;/code&gt; that starts the fifth &lt;code&gt;SEGMENT&lt;/code&gt; of the snake, whereas &lt;code&gt;segments[5,2] = 10&lt;/code&gt; is the &lt;code&gt;CUBE&lt;/code&gt; that ends the fifth &lt;code&gt;SEGMENT&lt;/code&gt; of the snake. Alternatively we could have two separate arrays for starting end ending &lt;code&gt;CUBEs&lt;/code&gt; of &lt;code&gt;SEGMENTS&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now what’s interesting in the physical version of the puzzle is that handling this snake is a bit overwhelming. Each segment is stiff, however between two segments the snake can rotate (or pivot around). That is, &lt;em&gt;along&lt;/em&gt; a segment, the &lt;code&gt;CUBEs&lt;/code&gt; of a &lt;code&gt;SEGMENT&lt;/code&gt; cannot move. However at &lt;code&gt;junctions between two segments&lt;/code&gt;, segments are free to rotate.&lt;/p&gt; &lt;h3 id="enforcing-the-physics-of-the-game"&gt;Enforcing the physics of the game&lt;/h3&gt; &lt;p&gt;We just need to encode these two rules (which will refer to as &lt;em&gt;pivot&lt;/em&gt; or &lt;em&gt;straight&lt;/em&gt;) and we will be done. There are no major difficulty for this but it is not entirely straightforward given how many indirections exist in our model. To recap, our main input is a list of &lt;code&gt;SEGMENTs&lt;/code&gt;, which inform us about how &lt;code&gt;CUBEs&lt;/code&gt; can be laid out relative to each other. Each &lt;code&gt;CUBE&lt;/code&gt; must be given a &lt;code&gt;POS&lt;/code&gt; and each &lt;code&gt;POS&lt;/code&gt; has three coordinates. We now need to link every &lt;code&gt;CUBE&lt;/code&gt; in a &lt;code&gt;SEGMENT&lt;/code&gt; with some &lt;code&gt;straight&lt;/code&gt; rule to force coordinates to form a line. And we need to link the coordinates of the &lt;code&gt;POS&lt;/code&gt; of connecting &lt;code&gt;CUBEs&lt;/code&gt; in consecutive &lt;code&gt;SEGMENTs&lt;/code&gt; to form a &lt;code&gt;corner&lt;/code&gt; . Yes it’s a lot of words but when you handle the puzzle it becomes very intuitive.&lt;/p&gt; &lt;p&gt;&lt;img src="images/snake-cube-l-shape.png" alt="diagram of L-shape cubes illustrating straight and corner rules" /&gt;&lt;/p&gt; &lt;p&gt;The above picture summarizes the two rules with two &lt;code&gt;SEGMENT&lt;/code&gt; forming an L-shape. Along the arrow, &lt;code&gt;CUBEs:{1,2,3}&lt;/code&gt; must follow each other and form a &lt;code&gt;straight&lt;/code&gt;, whereas at &lt;code&gt;CUBE:3&lt;/code&gt; a junction forces &lt;code&gt;CUBES:{2,3,4}&lt;/code&gt; to form a &lt;code&gt;corner&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I said two rules? sorry I was too fast. Actually the rule &lt;code&gt;straight&lt;/code&gt; is sufficient &lt;span class="emoji" data-emoji="thinking"&gt;🤔&lt;/span&gt; Why? the argument needs to connect three clues together:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;each &lt;code&gt;SEGMENT&lt;/code&gt; of the Snake will have at least two &lt;code&gt;CUBEs&lt;/code&gt; &lt;/li&gt; &lt;li&gt;with the ‘straight’ rule, each &lt;code&gt;SEGMENT&lt;/code&gt; will span at least 2 in any dimension &lt;/li&gt; &lt;li&gt;we forced coordinates to be in the 0..2 range, and at the time I stressed how useful that was Thus you cannot align two &lt;code&gt;SEGMENT&lt;/code&gt; without leaking outside the &lt;code&gt;CUBE&lt;/code&gt; &lt;span class="emoji" data-emoji="exploding_head"&gt;🤯&lt;/span&gt; . &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In typed-programming languages like Haskell and OCaml, we speak about making impossible states representables, this reasoning is roughly similar. Such shortcuts, however, in constraint-programming are a point of attention. You need to be careful when iterating on your models. The model does not represent the reality, where I can unfold the Snake along one dimension, but I only care about arrangements where the Snake is folded. That is, my model explicitly departs from the physics of the game. Such a shortcut is convenient because there is likely less typing, the solver will likely be faster because it will not be spending time evaluating solutions doomed to fail. However I cannot just extend my model to the 4x4x4 case without some extra work first because our elaborate argument for the lazy modeler would fall apart.&lt;/p&gt; &lt;h3 id="minizinc-formalization-of-the-physics"&gt;MiniZinc formalization of the physics&lt;/h3&gt; &lt;p&gt;Let’s now formulate the &lt;code&gt;straight&lt;/code&gt; rule. Remember that MiniZinc speaks of constraints, and a way to build re-usable constraints is a &lt;code&gt;predicate&lt;/code&gt;. I’m deliberately developing and elaborating bits by bits what &lt;code&gt;straight&lt;/code&gt; formally means in &lt;strong&gt;top-to-bottom fashion&lt;/strong&gt; so that the motivation for introducing a “sub-predicate” is to break-down the higher-level predicate we wrote before. A number of new syntaxes (like &lt;em&gt;let-bindings&lt;/em&gt;) will not be explained so you may have to read code-examples slowly before and after reading the explanation.&lt;/p&gt; &lt;p&gt;We would like to do something like saying &lt;strong&gt;all SEGMENT must form straight lines&lt;/strong&gt;. Which is a straightforward.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;constraint forall(s in SEGMENT)(straight(s)); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MiniZinc will complain that &lt;code&gt;straight&lt;/code&gt; is not defined yet, but at least the only new “top-level constraint” is written down and we are left with elaborating our predicate. We need to break-down what it means to form a straight line because we can place segments along any of the three dimensions. This predicate thus needs another set other predicates (&lt;code&gt;alongX, alongY, and alongZ&lt;/code&gt;) in a &lt;em&gt;boolean OR disjunction&lt;/em&gt;. Note that in formal methods &lt;code&gt;x = a \/ b&lt;/code&gt; has information flowing in both directions, so if you can determine that &lt;code&gt;x&lt;/code&gt; is true then it tells you that at least &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; is true, which seems logical when stated but can look unusual to programmers used to handling ORs with information flowing in a single direction. Let’s write down our disjunction along all three axes:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate straight(SEGMENT: s) = let {CUBE: c0 = segments[s,1]; CUBE: c1 = segments[s,2]} in alongX(c0..c1) \/ alongY(c0..c1) \/ alongZ(c0..c1); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point I am saying that a straight segment can be straight &lt;code&gt;along X OR along Y OR along Z&lt;/code&gt;. Since we have not really specified what these individual predicates mean our &lt;code&gt;SEGENT&lt;/code&gt; could be placed along two dimensions at a same time: in some puzzles being placed along multiple dimensions might mean a form of diagonal, but we’ll not allow it here. With &lt;code&gt;c0..c1&lt;/code&gt; I expand the &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; &lt;code&gt;CUBE&lt;/code&gt; of the segment and turn that into an array of &lt;code&gt;CUBEs&lt;/code&gt; to the individual predicates because we want to start discussing about coordinates of positions of cubes.&lt;/p&gt; &lt;p&gt;In plain English, being ‘along X’ means that the &lt;code&gt;X&lt;/code&gt; coordinates of the positioned cubes vary whereas the &lt;code&gt;Y&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt; coordinates are fixed (if you go back to my pictures, the three cubes in the L-shape are “along X”, hence &lt;code&gt;Y&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt; are fixed and &lt;code&gt;X&lt;/code&gt; vary). We can thus encode such a predicate with a &lt;em&gt;boolean AND conjunction&lt;/em&gt; of three clauses:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate alongX(array[int] of CUBE: cubes) = along(cubes, xs) /\ samePos(cubes, ys) /\ samePos(cubes, zs); predicate alongY(array[int] of CUBE: cubes) = samePos(cubes, xs) /\ along(cubes, ys) /\ samePos(cubes, zs); predicate alongZ(array[int] of CUBE: cubes) = samePos(cubes, xs) /\ samePos(cubes, ys) /\ along(cubes, zs); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That’s a bit of boilerplate as we repeat ourselves for each dimension. To avoid repeating ourselves while elaborating further, we will pass the useful information “in which dimension we are” as arguments to the lower-level predicates: &lt;code&gt;along&lt;/code&gt; and &lt;code&gt;samePos&lt;/code&gt; . Both predicates take a series of cubes and a the coordinates in the dimension of interest as arguments. Let’s formulate &lt;code&gt;along&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate along(array[int] of CUBE: cubes, array[POS] of int: proj) = let { CUBE: c0 = cubes[1]} in forall(c1 in cubes where c1 &amp;gt; c0)(abs(proj[positions[c0]] - proj[positions[c1]]) = c1 - c0); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Some discussion around the design of the parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;taking an array of &lt;code&gt;CUBEs&lt;/code&gt; rather than a single &lt;code&gt;SEGMENT&lt;/code&gt; because I didn’t want to repeat &lt;code&gt;segments[s,1]&lt;/code&gt; many times, and also because I started with another (more complex) model that had no &lt;code&gt;SEGMENT&lt;/code&gt; yet and was lazy to change it for cosmetics &lt;/li&gt; &lt;li&gt;taking an &lt;code&gt;array[POS] of int&lt;/code&gt; named ‘proj’ for “projection along an axis”: the proper definition of the rule is a bit picky but is exactly the same in all the three dimensions, so let’s write it only once and avoid typos &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;What is important is that the first CUBE is taken as a reference, then I force the distance of the positioned cubes (i.e., via the indirection &lt;code&gt;proj[positions[ ]]&lt;/code&gt; and with &lt;code&gt;abs&lt;/code&gt; the absolute value function) of the positions to match the distance on the unfolded Snake &lt;code&gt;c1 - c0&lt;/code&gt;. For instance, for the segment of &lt;code&gt;CUBEs-{5,6,7}&lt;/code&gt; along X. We enforce that, once positioned in folded-cube, the distance between CUBE-5&lt;code&gt;and&lt;/code&gt;CUBE-6&lt;code&gt;is exactly 1 and the distance between&lt;/code&gt;CUBE-5&lt;code&gt;and&lt;/code&gt;CUBE-7` is exactly 2. The absolute value encodes the fact that the segment could be in either direction (left to right or right to left) while along the same axis.&lt;/p&gt; &lt;p&gt;Now we are left specifying the &lt;code&gt;samePos&lt;/code&gt; predicate. This predicate takes the same arguments as &lt;code&gt;along&lt;/code&gt; to avoid typing it for each dimension. However &lt;code&gt;samePos&lt;/code&gt; is simple to write: while &lt;code&gt;along&lt;/code&gt; enforced some distance along an axis, &lt;code&gt;samePos&lt;/code&gt; enforce no changes along an axis. Thus, we do not need complicated arithmetics with absolute values, a simple &lt;em&gt;equality&lt;/em&gt; will do.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate samePos(array[int] of CUBE: cubes, array[POS] of int: proj) = forall(c0, c1 in cubes where c0 &amp;lt; c1)(proj[positions[c0]] = proj[positions[c1]]); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And we are done! Overall, forcing successive coordinates along X and same coordinates along Y and Z ensure our segment is stiff. Elaborating from a top-level constraint we have written a number of helper-predicates. It may feel superfluous but writing all the constraints by hand would have been especially boring and hard to get right without copy-paste-edit typos. If you fiddle with intermediary MiniZinc files you’ll realize that the extra constraint adds 488 atomic constraints. As a point of comparison the lonely global “all_different” from previous section generate a single atomic constraint.&lt;/p&gt; &lt;h3 id="running-minizinc-at-last"&gt;Running MiniZinc at last&lt;/h3&gt; &lt;p&gt;When we now run MiniZinc, we are greeted with a solution after roughly one second.&lt;/p&gt; &lt;p&gt;&lt;img src="images/snake-cube-mzn-003.png" alt="proper solution but oddly-formatted" /&gt;&lt;/p&gt; &lt;p&gt;I was pretty excited when I got my first solution. I verified it by twisting my fingers. Something pretty interesting happened: &lt;strong&gt;I could not fold the Snake-Cube&lt;/strong&gt; &lt;span class="emoji" data-emoji="dizzy_face"&gt;😵&lt;/span&gt; . What on Earth has gone wrong?&lt;/p&gt; &lt;h1 id="the-mystery-and-the-symmetries"&gt;The mystery and the symmetries&lt;/h1&gt; &lt;p&gt;Alright, me failing to fold a Snake, even with a solution given by MiniZinc has only a few possible explanations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Hypothesis-A: I made a mistake in the model (likely &lt;span class="emoji" data-emoji="frowning"&gt;😦&lt;/span&gt;) &lt;/li&gt; &lt;li&gt;Hypothesis-B: I failed at following the output (very likely &lt;span class="emoji" data-emoji="nerd_face"&gt;🤓&lt;/span&gt;) &lt;/li&gt; &lt;li&gt;Hypothesis-C: Even if we have a valid positioning, it is not feasible to operate the sequence of moves (the cube is only 3x3x3 so I estimate it unlikely, I might need to start folding from the middle, however &lt;span class="emoji" data-emoji="exploding_head"&gt;🤯&lt;/span&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I audited my model, added some traces and redundant constraints to quickly verify/check some more invariants: nothing seemed off. Then, rather than following the output again I took a rather barbaric approach: rather than starting folding from &lt;code&gt;CUBE-0&lt;/code&gt; in my solution I started from &lt;code&gt;CUBE-27&lt;/code&gt; and it miraculously worked &lt;span class="emoji" data-emoji="relieved"&gt;😌&lt;/span&gt;. &lt;strong&gt;Maybe the solver gave me a different solution the second time&lt;/strong&gt; and Hypothesis-C is correct. After-all I was not doing exhaustive checks and I made the rookie mistake of &lt;em&gt;not&lt;/em&gt; storing my first output.&lt;/p&gt; &lt;p&gt;With a sucessfully folded-cube (as shown in the early pictures), I had strong clue that my MiniZinc model was right because &lt;strong&gt;at least one solution it gave was empirically correct&lt;/strong&gt; . There still is the room for a combination of errors: what if the output was incorrect and at a same time I failed at following the output and also ended up following a valid folding by “luck” - extremely unlikely and against &lt;a href="https://en.wikipedia.org/wiki/Occam%27s_razor"&gt;Occam’s principle &lt;span class="emoji" data-emoji="razor"&gt;🪒&lt;/span&gt;&lt;/a&gt; at this level of debugging.&lt;/p&gt; &lt;p&gt;Hypothesis-C was still piking my interest. I spent some time on YouTube and people recommend to fold the snake starting at the middle. Something I had not really foreseen and could be really frustrating: it would be incredibly hard to model the exact folding sequence as a hobby project. Such a folding requires to introduce a notion of time and verify that along time all rotations are allowed: it’s a much more ambitious model than our the small introduction I hope to give in this blog post.&lt;/p&gt; &lt;p&gt;I preferred to take another approach to rule-out Hypothesis-C: &lt;strong&gt;trying to find all possible folding and if I find only one then there is only one solution&lt;/strong&gt;. In MiniZinc it’s really easy, in the configuration you just ask “print all solutions”. Actually, I did that and not only the program found many solutions (six in ten seconds), it also kept running and searching and searching and searching. Switching the solver to &lt;strong&gt;Chuffed found 48 solutions in two seconds and proved that no-other solutions exist&lt;/strong&gt;. That is still a lot for me to try given how bad I am at following one solution by hand, we need an idea to compare two solutions. The idea was to manipulate the folded-cube &lt;span class="emoji" data-emoji="bulb"&gt;💡&lt;/span&gt; : if I turn the folded-cube around then I have reorganized the coordinates of each &lt;code&gt;POS&lt;/code&gt; (say POS:1 is no longer in &lt;code&gt;{1,1,1}&lt;/code&gt; but in &lt;code&gt;{3,1,1}&lt;/code&gt; by rotating the cube along the &lt;code&gt;Y&lt;/code&gt; vertical axis: it’s a new solution, but not an especially interesting one compared to my first solution. In constraint-programming and in general in physics, the phenomenon we want to control is named &lt;em&gt;symmetry&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="symmetries"&gt;Symmetries&lt;/h2&gt; &lt;p&gt;Say you give me a valid &lt;code&gt;positions&lt;/code&gt; array. I can also build another valid &lt;code&gt;positions&lt;/code&gt; array by changing the numbering (so that X and Y coordinates are ‘swapped’ – the physical equivalent is to rotate around Z). I could tell you “here, a new solution” but you would be really right to feel cheated.&lt;/p&gt; &lt;p&gt;Besides running Chuffed, I have not taken the time to enumerate symmetries in a formal way but I guess there exist at least three things to break (two &lt;em&gt;rotations&lt;/em&gt; along Y and Z times plus &lt;em&gt;flipping&lt;/em&gt; positive directions into negative directions). In constraint-programming (and in general in search problems) you &lt;em&gt;break symmetries&lt;/em&gt; by adding extra constraints that do not come from the initial rules of the problem. These extra constraints will force the search algorithm to look for interestingly-different solutions. This technique also has the benefit to accelerate the resolution as more “branches” are pruned “sooner”. Sometimes, breaking symmetries is mandatory to find any solution when the problem is actually hard.&lt;/p&gt; &lt;p&gt;In the Snake-Cube game, the way I ended up breaking symmetries was to the follow this line of reasoning:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;the first segment defines the &lt;code&gt;X&lt;/code&gt; axis (and &lt;code&gt;CUBE&lt;/code&gt; indices increments along X) &lt;/li&gt; &lt;li&gt;the second segment defines the &lt;code&gt;Y&lt;/code&gt; axis (and &lt;code&gt;CUBE&lt;/code&gt; indices increment along Y) &lt;/li&gt; &lt;li&gt;then the first segment that is not along X nor Y will must be along Z (so you don’t win much) but will define the positive Z values &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;What is important to keep in mind is that what defines the &lt;code&gt;Z&lt;/code&gt; axis is not always “the third segment” because nothing tells you that the third segment will not be along X in the decreasing direction (i.e., the three first segments could form a U-shaped). We really would like to say, “the first segment along &lt;code&gt;Z&lt;/code&gt; defines &lt;code&gt;Z&lt;/code&gt;”, but that would be a circular definition without spending extra work formalizing what it means to define an axis.&lt;/p&gt; &lt;p&gt;A problem with symmetry-breaking constraints is to convince yourself the rules are valid and do not mistakenly prune-out desireable solutions. I found it easier to think in terms of directions in the coordinate system than thinking about what it means for all the “next segments” to take a turn-right at the beginning. Another way to convince ourselves is to count how many coordinate systems we can generate around a fixed folded-snake. Defining the first &lt;code&gt;DIR&lt;/code&gt; has 3 possible choices (any of three-dimensions), we have 2. Then at each definition we can pick positive or negative indices, so we have &lt;code&gt;2*2*2&lt;/code&gt; symmetries here. In total we get &lt;code&gt;3*2*2*2*2 = 48&lt;/code&gt; possible coordinate systems for our Snake. Which is consistent with what Chuffed has found (cf. &lt;a href="/raw/snake-cube-extra-all-solutions-chuffed.txt"&gt;Chuffed raw output&lt;/a&gt;), mystery solved &lt;span class="emoji" data-emoji="muscle"&gt;💪&lt;/span&gt;. We could stop here, but at this point we have done the hard thinking coupled with the brute-force approach, we want to see if from our own eyes. Let’s turn this into hard thinking with an elegant encoding of symmetry-breaking constraints.&lt;/p&gt; &lt;p&gt;The difficulty to formalize these rules in MiniZinc is twofold:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;introducing a notion of ‘direction of segments’ &lt;/li&gt; &lt;li&gt;using this new notion to add constraints to break symmetries &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So far in our model the &lt;code&gt;SEGMENT&lt;/code&gt; merely were a collection of consecutive CUBEs. We managed to give a &lt;code&gt;POS&lt;/code&gt; to each &lt;code&gt;CUBE&lt;/code&gt;. We however have yet to turn these &lt;code&gt;POS&lt;/code&gt; into a notion of direction. In Snake-Cube, we care about three dimensions, and for each dimension we care about the particular direction (left-to-right or right-to-left). In total it means six directions. We could use &lt;code&gt;set of int: DIR = 1..6&lt;/code&gt; but I instead use a pretty similar construct when you want to give individual names to directions: enums. We somehow now that every &lt;code&gt;SEGMENT&lt;/code&gt; will have a &lt;code&gt;DIR&lt;/code&gt;, so let’s declare that at the same time.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;enum DIR = {XP, XN, YP, YN, ZP, ZN}; array[SEGMENT] of var DIR: directions; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For instance, &lt;code&gt;directions[3] = XP&lt;/code&gt; stands for ‘segment number 3 has cubes laid out along the X-axis with increasing values’.&lt;/p&gt; &lt;p&gt;The remaining work is to connect &lt;code&gt;DIRs&lt;/code&gt; of &lt;code&gt;SEGMENTs&lt;/code&gt; with the coordinates of positioned &lt;code&gt;CUBEs&lt;/code&gt;. I did that by augmenting the predicate &lt;code&gt;straight&lt;/code&gt; to impose extra conditions with &lt;code&gt;alongX&lt;/code&gt; (and the same for Z and Y).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate straight(SEGMENT: s) = let {CUBE: c0 = segments[s,1]; CUBE: c1 = segments[s,2]} in (alongX(c0..c1) /\ direction(s, xs, XP, XN)) \/ (alongY(c0..c1) /\ direction(s, ys, YP, YN)) \/ (alongZ(c0..c1) /\ direction(s, zs, ZP, ZN)); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Other designs would have been equally valid. For instance, we could also have modified &lt;code&gt;alongX&lt;/code&gt; directly to pass the &lt;code&gt;SEGMENT&lt;/code&gt; rather than its &lt;code&gt;CUBEs&lt;/code&gt; expansion. What is important is that we now force yet another predicate relating the &lt;code&gt;SEGMENT&lt;/code&gt; and the &lt;code&gt;DIR&lt;/code&gt; together. The &lt;code&gt;direction&lt;/code&gt; predicate is defined as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;predicate direction(SEGMENT: s, array[POS] of int: proj, DIR: dp, DIR: dn) = (proj[positions[segments[s,1]]] &amp;lt; proj[positions[segments[s,2]]] /\ directions[s] = dp) \/ (proj[positions[segments[s,1]]] &amp;gt; proj[positions[segments[s,2]]] /\ directions[s] = dn); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This predicate allows to say that along a given axis, either the segment is positioned ‘left to right’ and the position of the first &lt;code&gt;CUBE&lt;/code&gt; is before the second &lt;code&gt;CUBE&lt;/code&gt;, or the opposite is true.&lt;/p&gt; &lt;p&gt;At this point, we merely have setup extra variables that really do not change the solutions to the solver. However this extra wiring allows us to formulate symmetry-breaking constraints.&lt;/p&gt; &lt;p&gt;One way to say that the first segment defines the X axis, and the first bent segment defines Y is to add.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;constraint directions[1] = XP; constraint directions[2] = YP; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, such a scheme would be insufficient for breaking all symmetries. Indeed, it is unclear whether the third &lt;code&gt;SEGMENT&lt;/code&gt; will be positioned along X again or along Z. Further, it could be positioned along XP or XN if the two first &lt;code&gt;SEGMENT&lt;/code&gt; have length 2. In short, it is important to note that we cannot force &lt;code&gt;XN&lt;/code&gt; to be before or after &lt;code&gt;ZP&lt;/code&gt; because that would enforce a constraint stronger than just breaking symmetries (this is merely repeating the lengthy argument when we enumerated the types of symmetries we want to break, but with variable names). Thus, when adding symmetry-breaking symmetries we need to be diligent because there is a risk to mistakenly remove some solutions we would have preferred to keep around. In our snake-folding game, what we can say, however, is that the first time we move in the third dimension, the &lt;code&gt;SEGMENT&lt;/code&gt; has to be aligned with ZP.&lt;/p&gt; &lt;p&gt;Building this &lt;strong&gt;notion of the first time we move in the third dimension&lt;/strong&gt; is doable but is cumbersome and error prone: we need to give a name at the first occurrence of each &lt;code&gt;DIR&lt;/code&gt; in the &lt;code&gt;directions&lt;/code&gt; array and relate the index of these first occurrences with each other. Fortunately for us, MiniZinc has a number of functions listed under the name “symmetry-breaking constraints” to encode that ‘the first occurrence of XP is before the first occurrence of XN and so on and so forth’. I’ve decided to pick &lt;code&gt;value_precede_chain&lt;/code&gt; and &lt;code&gt;value_precede&lt;/code&gt; to encode the fact that &lt;code&gt;XP&lt;/code&gt; is before &lt;code&gt;YP&lt;/code&gt; which in turns is before &lt;code&gt;ZP&lt;/code&gt; and that &lt;code&gt;positive&lt;/code&gt; is before &lt;code&gt;negative&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;include &amp;quot;globals.mzn&amp;quot;; constraint value_precede(XP,XN, directions); constraint value_precede(YP,YN, directions); constraint value_precede(ZP,ZN, directions); constraint value_precede_chain([XP,YP,ZP], directions); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These constraints fully-characterize our precedence rules. Running in MiniZinc, we still get a solution, and now even Gecode can prove exhaustiveness (the line with &lt;code&gt;====&lt;/code&gt; of a single under four seconds).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;positions = array1d(1..27, [1, 2, 3, 6, 9, 8, 7, 16, 25, 26, 17, 18, 15, 12, 11, 10, 19, 22, 13, 4, 5, 14, 23, 20, 21, 24, 27]); directions = array1d(1..17, [XP, YP, XN, ZP, XP, ZN, XP, YN, XN, ZP, YP, ZN, XP, ZP, YN, XP, YP]); ---------- ========== &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;One reason why I may have failed at following my first solution is that the output is a bit austere. The output of &lt;code&gt;directions&lt;/code&gt; actually is more exploitable as it reads as folding instructions, we immediately see that the first three &lt;code&gt;SEGMENT&lt;/code&gt; form a U-shape. Elided for brevity: it is actually possible to ask MiniZinc customize the output via a rendering function. Also, with some extra fiddling I managed to have Gecode prove exhaustiveness in under 100ms (this is yet another advanced technique I may cover in a separate blog post).&lt;/p&gt; &lt;p&gt;Somehow, finding a single solution, and proving that I am not able to follow instructions, is a nice conclusion to conclude this story &lt;span class="emoji" data-emoji="book"&gt;📖&lt;/span&gt;.&lt;/p&gt; &lt;h1 id="summary-and-discussion"&gt;Summary and Discussion&lt;/h1&gt; &lt;p&gt;We have formalized the problem of the Snake-Cube, solved it, and proved the solution unique. Proving the solution unique means that we pretty much have a complete characterization of the Snake-Cube puzzle. And to recap, our model formalizes the Snake-Cube puzzle as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;CUBE&lt;/code&gt;, &lt;code&gt;SEGMENT&lt;/code&gt;, &lt;code&gt;POS&lt;/code&gt;, &lt;code&gt;DIR&lt;/code&gt; are key entities that need well-defined names &lt;/li&gt; &lt;li&gt;the snake consists of a series of &lt;code&gt;CUBE&lt;/code&gt;, each consecutive line of &lt;code&gt;CUBE&lt;/code&gt; defines a &lt;code&gt;SEGMENT&lt;/code&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;POS&lt;/code&gt; provide coordinates to all final positions of &lt;code&gt;CUBE&lt;/code&gt; in each of the x, y, and z dimensions of the 3x3x3 folded-cube &lt;/li&gt; &lt;li&gt;the problem is an &lt;em&gt;attribution problem&lt;/em&gt;, in which each &lt;code&gt;CUBE&lt;/code&gt; is given a &lt;code&gt;POS&lt;/code&gt;, thus we can use the &lt;code&gt;all_different&lt;/code&gt; &lt;em&gt;global&lt;/em&gt; constraint to efficiently capture this property &lt;/li&gt; &lt;li&gt;physical constraints of &lt;code&gt;straight&lt;/code&gt;-lines and &lt;code&gt;corners&lt;/code&gt; impose a relationship between the coordinates of the positioned &lt;code&gt;CUBE&lt;/code&gt; of a same &lt;code&gt;SEGMENT&lt;/code&gt; &lt;/li&gt; &lt;li&gt;we used &lt;em&gt;predicates&lt;/em&gt; to re-use a good chunk of the domain logic when encoding &lt;code&gt;straight&lt;/code&gt; &lt;/li&gt; &lt;li&gt;we took some shortcuts eliding the &lt;code&gt;corners&lt;/code&gt; rule because we recognized that the minimal length for a &lt;code&gt;SEGMENT&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; and the maximum extent for the folded-cube is &lt;code&gt;3&lt;/code&gt;, thus we do not really need to force consecutive &lt;code&gt;SEGMENTs&lt;/code&gt; to turn around &lt;/li&gt; &lt;li&gt;we broke rotational and mirroring &lt;em&gt;symmetries&lt;/em&gt; with the &lt;code&gt;value_precede&lt;/code&gt; global constraints, allowing to convince oneself only one solution to this Snake-Cube puzzle exists &lt;/li&gt; &lt;li&gt;I am not especially good at following mechanical output instructions &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The article is already a bit long and we could discuss a number of other techniques such as &lt;em&gt;channeling&lt;/em&gt;, observing how different &lt;em&gt;families of solvers&lt;/em&gt; fare in this problem, or modifying the &lt;em&gt;search strategy&lt;/em&gt;. We could also decide to complexify the model for the puzzle on purpose (e.g., support a &lt;code&gt;4x4x4&lt;/code&gt; cube as well). Rather, we’ll cut it short and may leave these advanced topics for another blog post. That said, before concluding I cannot resist to ask you a question for thought: Is &lt;code&gt;POS&lt;/code&gt; really required? it is an interesting question because &lt;code&gt;POS&lt;/code&gt; is merely and indirection that adds more typing work to get from a &lt;code&gt;CUBE&lt;/code&gt; to a set of coordinates.&lt;/p&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We can solve real-world and business-critical problems in MiniZinc. Although the Snake-Case, is not as complicated as a real-world models where constraint-programming can really shine, this puzzle is a good illustration of how to solve problems using constraint-programming: it is not immediately obvious how to formalize and to formulate the puzzle into a computer program.&lt;/p&gt; &lt;p&gt;Constraint-programming is declarative: we state a problem and let the solver grind through solutions for us. You can thus answer questions more succinctly, sometimes constraint programming allow you to reach further and find solutions to problem that would be unattainable or impractical in your typical programming style. Since the Snake-Cube has a single solution we cannot really add interesting rules to spice the game, but real-world is full of examples where an off-the-shelf algorithm does not work because of some extra constraint (e.g., a shortest-path with road-closures time tables). In short, I believe MiniZinc and Constraint-Programming are extremely-valuable tools. Although it requires a high personal investment to learn MiniZinc, the application of the skill has high value-for-the-cost.&lt;/p&gt; &lt;p&gt;We could have stopped at the first iteration of the solver, before discussing symmetries (and in many contexts stopping at this solution could have been sufficient). However I think it is important to show that we can, and sometimes are forced, to go further deep in the understanding of the problem.&lt;/p&gt; &lt;p&gt;I typically build models iteratively as shown in this blog-post. However, from experience, there is little continuity between having no solutions, a useless solution, being swamped with solutions, and finding the one and only correct solution. There also are vastly more interesting modeling perspectives than you have time for. Thus it is key to know when to stop and you must know how to convince yourself that your overall model and solving strategy are good enough.&lt;/p&gt; &lt;p&gt;I believe these characteristics are shared among all declarative systems (e.g., SQLs, Prologs, and DataLogs, but also devop tools like Terraform) &lt;em&gt;because&lt;/em&gt; we explicitly forfeit control to a black-box in exchange for extra reach. I like to say that these tools are evil genies, they will answer you wishes but you must be careful when articulating your wish. To overcome this downside of declarative style, you need knowledge and practice. In particular, you need a good capacity at abstracting away so that you can recognize familiar problems in some ad-hoc problem that life has thrown at us. And then you need to be able to activate the many knobs in a rich toolbox like MiniZinc.&lt;/p&gt; &lt;p&gt;If you are interested or want to apply these techniques and feel overwhelmed or lost, please reach-out.&lt;/p&gt; &lt;h2 id="links"&gt;Links&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.minizinc.org"&gt;MiniZinc&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Snake_cube"&gt;Snake Cube on Wikipedia&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/lucasdicioccio/snakecube"&gt;My solution on GitHub&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/snake-cube.html" rel="alternate"/>
        <summary type="text">
            We solve a simple wooden puzzle with MiniZinc. The Snake-Cube puzzle is a good introductory problem and thus a number of formal modeling techniques are explained. We also touch advanced topic like symmetries and discuss a bit our modeling choices.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/santa-wrap.html
        </id>
        <title type="text">
            Advent of Haskell 2020: Santa Wrap
        </title>
        <updated>
            2020-12-24T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;This article is part of &lt;a href="https://adventofhaskell.com/"&gt;Advent of Haskell&lt;/a&gt; 2020 &lt;span class="emoji" data-emoji="christmas_tree"&gt;🎄&lt;/span&gt;. Make sure to check the other articles too! You will find the code for this blog-post at &lt;a href="https://github.com/lucasdicioccio/santa-wrap/"&gt;the original GitHub publication&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="our-christmas-project"&gt;Our Christmas project&lt;/h2&gt; &lt;p&gt;Year 2020 is terrible. Santa’s Workshop had to take stay-at-home restrictions. However, Elves want to do the utmost to keep Christmas’ spirit alive. This year, Elves will work from home rather than work in the streamlined workshop &lt;span class="emoji" data-emoji="factory"&gt;🏭&lt;/span&gt; . They will get back to a more traditional way of preparing presents, like Elderly Elves who live more than 500 years, remember. In short, every Elf works in their own garage &lt;span class="emoji" data-emoji="house"&gt;🏠&lt;/span&gt;. They receive the Christmas wishlists of neighboring families: crafting toys &lt;span class="emoji" data-emoji="space_invader"&gt;👾&lt;/span&gt;, sewing clothes &lt;span class="emoji" data-emoji="shirt"&gt;👕&lt;/span&gt;, or cooking delicious cookies &lt;span class="emoji" data-emoji="cookie"&gt;🍪&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;One particularly annoying task for work-from-home Elves, however, is to wrap presents &lt;span class="emoji" data-emoji="gift"&gt;🎁&lt;/span&gt;. They had avoided this task in the recent years thanks to automation. Elves all have different pieces of wrapping-paper at home, in particular wrapping-paper rolls vary in ratio and vary in size from one Elf to another one. Elves want some software to help them cut wrapping-paper for the presents they prepare &lt;span class="emoji" data-emoji="scissors"&gt;✂️&lt;/span&gt;. Some Elves have tools to cut paper (think of a cookie-cutter, but for large sheets of paper), whereas others only have cissors. Wrapping may become scarce if used inefficiently, and anyway ordering takes time. Thus, they would like to have a rough idea of how to efficiently cut the paper rolls given their own specific constraints. It does not have to be perfect, but it cannot be completely naive either. Thus, Elves need some creative idea to save Christmas’ spirit. For the better or for the worst Elves resorted to use software &lt;span class="emoji" data-emoji="computer"&gt;💻&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Fortunately, an Elf has learnt Haskell, a language especially good for building small command line tools and with libraries to generate images. He also has learnt MiniZinc, a language especially good for solving this family of problems. Put together, these languages can help building a small tool that Elves can run at home with their own input. This computer-savvy Elf suggests the following &lt;a href="/hashtags/trade-off.html"&gt;&lt;span class="hashtag" data-hashtag="trade-off"&gt;#trade-off&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Elves will input the quantity and shape of the wrapping for the presents (or the shape of their cookie-cutter tools that fit for the present) &lt;/li&gt; &lt;li&gt;the shape of the wrapping is blocky, that is, made of various rectangle blocks, rather than arbitrarily shaped (it simplifies cutting and folding paper with rulers and guides anyway) &lt;/li&gt; &lt;li&gt;Elves will also input the size of their own paper sheets &lt;/li&gt; &lt;li&gt;the output is a footprint image of how to cut the paper to fit all present (when possible) Some Elves expected more specialized tools, some cared especially about saving wrapping paper. However, time is running out, our software Elf-ineer only has a day to build this software or it will be too late to save Christmas. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I am not sure I should reveal this, but, I work in Santa Incorporated oh oh oh. Do not tell your kids! in exchange I’ll explain you how I built &lt;code&gt;santa-wrap&lt;/code&gt; in a rush to help the Elf. Thus, the main goal for this article is to relate how to iterate quickly on a practical one short day project. Secondary goals are to pike your interest about MiniZinc and introduce you a library named &lt;code&gt;minizinc-process&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="approach"&gt;Approach&lt;/h2&gt; &lt;p&gt;The type of problem for cutting wrapping paper is known as a Packing problem. These problems are generally difficult to solve efficiently. However, for small sizes or particular form of constraints, some solutions could be efficiently found (or the litterature may have some heuristics that work well empirically). Generally, the difficulty comes from integrality of constraints, that is you either can wrap a present or not wrap the present, you cannot wrap a fraction of a present. Such problems come up a lot in industrial settings where some resource is scarce. In this particular case, we cheated a bit as we came with an idea to write a blog post. However, with a bit of practice you will recognize packing problems everywhere.&lt;/p&gt; &lt;p&gt;We want to show off how to combine MiniZinc (a mathematical &lt;a href="/hashtags/optimization.html"&gt;&lt;span class="hashtag" data-hashtag="optimization"&gt;#optimization&lt;/span&gt;&lt;/a&gt; language and toolchain) with Haskell (which readers of this Advent of Haskell submission are familiar with). We will show the progression of a tool, with building a value-adding prototype in a day or two of work for some Elf familiar with Haskell and Minizinc.&lt;/p&gt; &lt;h2 id="motivating-our-iterations"&gt;Motivating our Iterations&lt;/h2&gt; &lt;p&gt;The author built this tool in four broad iterations: implement a demo solver in MiniZinc, generate simple pictures for each wrapping, introduce the concept of layout, and, bridge the solver. We motivate each iteration before jumping into lengthier explanations.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Implemeting a solver in MiniZinc&lt;/em&gt;: I wanted to leverage powerful global constraints with their own heuristics/optimized solutions that exist in MiniZinc. Such a model helps us formalize the problem in better terms and understand what are inputs and what are outputs. In a business settings, such prototypes allow to raise the important questions. In that case, the whole problem is solved with a single &lt;a href="https://www.minizinc.org/doc-2.3.0/en/lib-globals.html#packing-constraints"&gt;global contraint&lt;/a&gt; named &lt;code&gt;geost_bb&lt;/code&gt;. Knowing which constraints help modeling a problem is a type of expertise that takes time to acquire but that can change drastically the viability of such a tool.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Generate simple pictures&lt;/em&gt;: our tool needs to generate pictures of the wrapping, and I find a blog-post with picture more appealing than without. Visualizations illustrate the problem. I am not familiar with low-level graphics libraries. I typically use high-level tools for my charts like &lt;a href="https://ggplot2.tidyverse.org/"&gt;ggplot in R&lt;/a&gt; – they typically get in the way if what you want is pixel-perfect position of image width/height. For this exercise, I found &lt;a href="https://hackage.haskell.org/package/JuicyPixels"&gt;JuicyPixels&lt;/a&gt; and I need to validate quickly that JuicyPixels will fit the needs. This library is appealing because I could generate PNGs with little dependencies. I had some experience with &lt;a href="https://hackage.haskell.org/package/gloss"&gt;Gloss&lt;/a&gt;. However, I discarded this choice for I only need static images and not animations (and Gloss has way more dependencies than JuicyPixels).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Introduce the concept of layout&lt;/em&gt;: pictures become more interesting when we start to have multiple boxes. Once I know how to print a layout I am done with the graphical aspects of the problem. Minor improvements can still come later but it is mind-relaxing to call something done. Further, at this point it is easy to show some naive layouts.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Bridge the solver&lt;/em&gt;: this is the boiler-plate part of the work. &lt;code&gt;minizinc-process&lt;/code&gt; actually have a TemplateHaskell helper to generate an input and output representations but this approach is limited: it cannot work with sets in its current version and does not preclude writing boilerplate to transform between “business-domain” representations and solver input/output representations. Plus, the goal of the article is to illustrate the pro/cons. This part of boiler-plate is the one requiring the most care, hence my usage of newtypes to differentiate indices.&lt;/p&gt; &lt;p&gt;Graphically, the following dependency graph shows the various steps I had in mind. &lt;img src="images/deps.png" alt="img" /&gt; In red are the two chunks of work which I assessed has being the most uncertain (i.e., requiring the most discovery) or most meticulous (i.e., spending time building accurate types to reduce the risk of bugs).&lt;/p&gt; &lt;p&gt;Let’s discuss how this four iterations looked like.&lt;/p&gt; &lt;h2 id="the-four-iterations"&gt;The four iterations&lt;/h2&gt; &lt;p&gt;We now dive in more details into each iteration. Recall that I time-boxed this project to the equivalent of a short-day-of-work. Readers should be able to read these independently.&lt;/p&gt; &lt;h3 id="a-solver-in-minizinc"&gt;A solver in MiniZinc&lt;/h3&gt; &lt;p&gt;We basically call the &lt;em&gt;global contstraint&lt;/em&gt; &lt;code&gt;geost_bb&lt;/code&gt;. Let’s unpack how it works, starting from a small MiniZinc overview and a mini tutorial on &lt;code&gt;geost_bb&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In &lt;a href="https://www.minizinc.org/"&gt;MiniZinc&lt;/a&gt; you separate the structure of a problem (which we call a model) and its particular instance (determined by input parameters). Thus a model can run for various input parameters. Further, the model separate two families of variables: the &lt;em&gt;par&lt;/em&gt; variables (parameters that are given or can be deterministically computed from other parameters) and &lt;em&gt;var&lt;/em&gt; variables (decisions that the solver will make). Constraints are statement that link variables together. The solver, then works out solutions (that is assignments of variables) that are consistent with all constraints. It is typically easy to verify that a given assignment matches all constraints. For instance, in our Santa-Wrap tool can visually inspect whether or not cutting guides for different present intersect. Whereas, it is typically hard to find a given assignment for all possible &lt;em&gt;par&lt;/em&gt; inputs (or an optimal one when a criteria of goodness exists).&lt;/p&gt; &lt;p&gt;In Haskell parlance: &lt;code&gt;solver :: Model -&amp;gt; Parameters -&amp;gt; Maybe Decisions&lt;/code&gt;, which, partially-applied for some &lt;code&gt;Model&lt;/code&gt; would give &lt;code&gt;solveProblem :: Parameters -&amp;gt; Maybe Decisions&lt;/code&gt;. To encode this faithfully in Haskell we would need to ensure that the &lt;code&gt;Parameters&lt;/code&gt; and &lt;code&gt;Decisions&lt;/code&gt; types actually depends on the &lt;code&gt;Model&lt;/code&gt;; somehow, discussing these type-level programming techniques is out of scope for this article.&lt;/p&gt; &lt;p&gt;Typically, writing MiniZinc is a bit like SQL queries: you describe what you want and let the engine fetch it for you. The ability to summon a magic tool to solve our wishes comes with some limitations: expressivity is limited, and you need to be careful what you wish for. For instance, when writing MiniZinc you need to discuss about finite inputs/outputs (e.g, no unbounded recursion). Further, small changes on the structure of the problem can drastically change performance (like switching from a index scan to a table scan in SQL query plan).&lt;/p&gt; &lt;p&gt;The comparison with SQL does not stops at the declarative aspect. Typical domain models in Haskell have collections such as &lt;a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-List.html"&gt;Lists&lt;/a&gt; or &lt;a href="https://hackage.haskell.org/package/containers-0.6.4.1/docs/Data-Map.html"&gt;Maps&lt;/a&gt; or custom &lt;a href="http://www.cse.chalmers.se/edu/year/2018/course/TDA452/lectures/RecursiveDataTypes.html"&gt;recursively-shaped objects&lt;/a&gt; etc. Once mapped into tabular form in SQL, special conversion care is required. For instance, in Haskell, a type &lt;code&gt;User { age :: Int , height :: Int }&lt;/code&gt; would map to a set of integers (one user-id per user) and two arrays indexed by user-id. So that Haskell domain objects like these.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;users ::&lt;/span&gt; [ &lt;span class="dt"&gt;User&lt;/span&gt; ]&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;users &lt;span class="ot"&gt;=&lt;/span&gt; [ &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="dv"&gt;23&lt;/span&gt; &lt;span class="dv"&gt;172&lt;/span&gt;, &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="dv"&gt;45&lt;/span&gt; &lt;span class="dv"&gt;180&lt;/span&gt;, &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="dv"&gt;36&lt;/span&gt; &lt;span class="dv"&gt;165&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Would translate to the following MiniZinc.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;set of int: USER = 1..3; array[USER] of int: age = [ 23, 45, 36 ]; array[USER] of int: height = [ 172, 180, 165 ]; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Readers familiar with Relational Algebra, DataParallel Haskell, Columnar Storage, or Entity Component System will find comonalities. We will work this out for our problem in more detail in the last iteration. So now let’s look at &lt;code&gt;geost_bb&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is a snapshot of &lt;code&gt;geost_bb&lt;/code&gt; &lt;a href="https://www.minizinc.org/doc-2.5.0/en/lib-globals.html"&gt;documentation&lt;/a&gt; &lt;img src="images/geost-doc.png" alt="img" /&gt;. Which sorts of packs blocky-structure on a multi-dimensional space. This constraint does not try to shrink gaps between objects, it “merely” (I don’t want to downplay how great this is) force assignments of variables such that no overlap exists between the packed objects.&lt;/p&gt; &lt;p&gt;We annotate the parameters below to explain why using this function make sense in Santa-Wrap. Besides the opaque name, it does exactly what we want to help the Elves and even a bit more.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;k&lt;/em&gt;: here we live in two dimensions, that an easy parameter, we’ll hardcode it &lt;/li&gt; &lt;li&gt;&lt;em&gt;rect_size&lt;/em&gt;: size of each rectangles along each dimension &lt;/li&gt; &lt;li&gt;&lt;em&gt;rect_offset&lt;/em&gt;: offset of rectangles long each dimension &lt;/li&gt; &lt;li&gt;&lt;em&gt;shape&lt;/em&gt;: wrapping shapes are built from a set of a rectangles, for instance presents we can wrap in a simple rectangle would have a single rectangle. More elaborated wrapping shapes may require two or more adjacent rectangles. For instance the sword here is built with two overlapping rectangles: &lt;img src="images/sword.png" alt="img" /&gt; a rectangle is horizontal (largest &lt;em&gt;rect_size&lt;/em&gt; is the 1st dimension) and another rectangle is vertical (largest &lt;em&gt;rect_size&lt;/em&gt; is the 2nd dimension) and both rectangles are translated along an axis (i.e., one non-zero &lt;em&gt;rect_offset&lt;/em&gt;). Multiple shapes could re-use the same rectangles if they happen to match (hence, saving a bit on the complexity – but we won’t go into this level of sophistication). &lt;/li&gt; &lt;li&gt;&lt;em&gt;l&lt;/em&gt; and &lt;em&gt;u&lt;/em&gt;: upper and lower bounds for each wrapping, in our case all objects can equally be positioned on the wrapping, hence the lower bound is 0 and the upper bound the size of the roll (minus one if you care about millimeters and took no margins of error at all in your measurements) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Then &lt;code&gt;geost_bb&lt;/code&gt; then contributes constraints to tell the solver to make a number of decisions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;x&lt;/code&gt;: the coordinates of the &lt;em&gt;wrapping shapes&lt;/em&gt; (which are themselves built of rectangular blocks). For our sword example, we need to add the &lt;code&gt;rect_offset&lt;/code&gt; to the &lt;code&gt;x&lt;/code&gt; coordinate of the shape to position a rectangle. &lt;/li&gt; &lt;li&gt;&lt;code&gt;kind&lt;/code&gt;: the shape used by each object. This mechanism allows &lt;code&gt;geost_bb&lt;/code&gt; to chose any shape for the different objects. External constraints actually prevent &lt;code&gt;geost_bb&lt;/code&gt; does not know how many times it must be using the wrapping-shape for a sword, and unconstrained the solver would rather prefer the simpler wrapping-shape for a book. This mechanism actually is a feature: the freedom to pick among shapes allows to model rotation of shapes, we will not use this for now. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In our case, for a first version of the tool we do not need to make that many decisions: only &lt;code&gt;x&lt;/code&gt; above is required. Declaring all inputs to give to &lt;code&gt;geost_bb&lt;/code&gt; is required, however. We still need to actually declare our &lt;code&gt;par&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; variables.&lt;/p&gt; &lt;p&gt;We will have to discuss about a number of entities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;two dimensions: &lt;code&gt;int: nDims = 2; set of int: DIM = 1..nDims&lt;/code&gt; &lt;/li&gt; &lt;li&gt;wrapping shapes: &lt;code&gt;int: nShapes; set of int: SHAPE = 1..nShapes&lt;/code&gt; &lt;/li&gt; &lt;li&gt;rectangular blocks: &lt;code&gt;int: nBlocks; set of int: BLOCK = 1..nBlocks&lt;/code&gt; &lt;/li&gt; &lt;li&gt;each object we need to wrap: &lt;code&gt;int: nObjs; set of int: OBJ = 1..nObjs&lt;/code&gt; &lt;/li&gt; &lt;li&gt;the roll: it is implicit that we cut one roll, so we do not need to declare anything &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Then, some characteristics of entities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the size of the roll: &lt;code&gt;int: x_max; int: y_max&lt;/code&gt; &lt;/li&gt; &lt;li&gt;the size of individual rectangular blocks and their offsets in each dimension: &lt;code&gt;array[BLOCK,DIM] of int: rect_sizes; array[BLOCK,DIM] of int: rect_offs&lt;/code&gt; &lt;/li&gt; &lt;li&gt;the coordinates of where to position cuts for our solution: &lt;code&gt;array[OBJ,DIM] of var int: coordinates&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Finally there is relational information linking various entities.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;to each object we associate a given shape (present1 is a Guitar, present2 is a book etc.): &lt;code&gt;array[OBJ] of SHAPE: object_shapes;&lt;/code&gt; &lt;/li&gt; &lt;li&gt;each shape is the collage of a set of rectangle, we could use various external representation to model the set of rectangles (e.g., an &lt;code&gt;array[SHAPE,RECTANGLE] of bool&lt;/code&gt; is isomorphic to an &lt;code&gt;array[SHAPE] of set of RECTANGLE&lt;/code&gt;) but we will stick to the &lt;code&gt;set&lt;/code&gt; representation that &lt;code&gt;geost_bb&lt;/code&gt; requires (using another input would require extra constraints to link input and &lt;code&gt;geost_bb&lt;/code&gt; representations) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All in all, the model is in &lt;code&gt;models/santa-wrap.mzn&lt;/code&gt; and an example input for it is &lt;code&gt;models/santa-wrap001.dzn&lt;/code&gt;. You can run it with &lt;code&gt;minizinc models/santa-wrap.mzn models/santa-wrap001.dzn&lt;/code&gt;. And the output I got was:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-minizinc"&gt;coordinates = array2d(1..10, 1..2, [8, 0, 0, 6, 7, 0, 0, 5, 6, 0, 0, 4, 4, 0, 0, 2, 2, 0, 0, 0]); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Which you can read as “first object” is a (8,0), the “second object” is at (0,6) etc. Elves could work with such an output, however a visual display is better. Plus they want to prepare their cutting boards, build guides, or simply pass an eye-check that things are in the right place.&lt;/p&gt; &lt;h3 id="generate-simple-pictures"&gt;Generate simple pictures&lt;/h3&gt; &lt;p&gt;I have had little interest in graphics in the past. Thus I vaguely know some Haskell libraries exist like &lt;a href="https://hackage.haskell.org/package/diagrams"&gt;diagrams&lt;/a&gt;, &lt;code&gt;gloss&lt;/code&gt;, &lt;code&gt;JuicyPixels&lt;/code&gt;, or &lt;a href="https://hackage.haskell.org/package/reanimate"&gt;reanimate&lt;/a&gt;. For this project, I had to dive a bit more and actually pick some library. My choice settled on &lt;code&gt;JuicyPixel&lt;/code&gt; for two main reasons: on the first hand, this library has only a small amount of dependencies (especially system dependencies – &lt;code&gt;gloss&lt;/code&gt; requires some OpenGL). On the other hand, the documentation was welcoming: I looked for &lt;code&gt;IO ()&lt;/code&gt; because I looked for some “main” or “print” equivalent. The first hit on the top module is &lt;code&gt;generateImage&lt;/code&gt;. No kidding, here is the screenshot to prove it: first hit &lt;img src="images/haddock-jp.png" alt="img" /&gt;.&lt;/p&gt; &lt;p&gt;The type information tells me the library actually scans every pixel one by one. It is very likely super inefficient. That said, the cost of optimizing the packing is the major bottleneck in this problem. Elves can wait a minute to save hours. A warming case that does not corroborate the claim that Haskell libraries are poorly documente. My first action was to verify that the example actually works.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cabal repl &amp;gt; import Code.Picture &amp;gt; let path = &amp;quot;images/background.png&amp;quot; &amp;gt; let pixelRenderer x y = PixelRGB8 (fromIntegral x) (fromIntegral y) &amp;gt; writePng path $ generateImage pixelRenderer 250 300 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And voila! &lt;img src="images/background.png" alt="img" /&gt; thank you so much &lt;code&gt;JuicyPixels&lt;/code&gt;. It’s not “too good to be true”: the example works.&lt;/p&gt; &lt;p&gt;Having secured that I can generate PNG, what is left? we need to define some Haskell data types to map loosely with what I’ve learnt is required in the MiniZinc optimization. However we’ll be using Haskell records rather than columnar values. The idea here is to use these data types as main Haskell types for parsing a format that Elves are likely to know such as JSON. Further we want to allow Elves to pass extra information like quantities of each present they will wrap, colors and names for pictures before crafting the guides etc.&lt;/p&gt; &lt;p&gt;Some excerpt:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Wrapping&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Wrapping&lt;/span&gt; {&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; name ::&lt;/span&gt; &lt;span class="dt"&gt;Name&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; colorNum ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; quantity ::&lt;/span&gt; &lt;span class="dt"&gt;Quantity&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; rectangles ::&lt;/span&gt; [ &lt;span class="dt"&gt;Rectangle&lt;/span&gt; ]&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Generic&lt;/span&gt;)&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;FromJSON&lt;/span&gt; &lt;span class="dt"&gt;Wrapping&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Rectangle&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Rectangle&lt;/span&gt; {&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; rectX ::&lt;/span&gt; &lt;span class="dt"&gt;Length&lt;/span&gt;&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; rectY ::&lt;/span&gt; &lt;span class="dt"&gt;Length&lt;/span&gt;&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; offX ::&lt;/span&gt; &lt;span class="dt"&gt;X&lt;/span&gt;&lt;/span&gt; &lt;span id="13"&gt;&lt;a href="#13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; offY ::&lt;/span&gt; &lt;span class="dt"&gt;Y&lt;/span&gt;&lt;/span&gt; &lt;span id="14"&gt;&lt;a href="#14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Generic&lt;/span&gt;)&lt;/span&gt; &lt;span id="15"&gt;&lt;a href="#15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;FromJSON&lt;/span&gt; &lt;span class="dt"&gt;Rectangle&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Wrappings are built of Rectangles. Each Rectangle as length/width (lengths in both dimensions &lt;code&gt;rectX&lt;/code&gt;, &lt;code&gt;rectY&lt;/code&gt;) as well as some offset in both dimension. In addition, each Wrapping has a name, a quantity and some color to visualize more easily a layout. But before speaking about Layouts, what we can do is to generate pictures for each Wrapping. This way, Elves can calibrate the units and verify individual length.&lt;/p&gt; &lt;p&gt;I need to adapt the &lt;code&gt;JuicyPixels&lt;/code&gt; example I copy pasted to build a function &lt;code&gt;printWrapping :: Wrapping -&amp;gt; IO()&lt;/code&gt;. In short, it has a &lt;code&gt;Wrapping&lt;/code&gt; and its associated &lt;code&gt;Rectangles&lt;/code&gt; in scope and we need to implement &lt;code&gt;pixelRenderer&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;So I’ll build utility functions &lt;code&gt;findRectangle x y&lt;/code&gt; which finds a rectangle with the right sizes and offset to contain the pixel &lt;code&gt;(x,y)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A single pixel and rectangle test is&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;rectangleContainsPixel x y rect &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;let&lt;/span&gt; x0 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; offX rect&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; x1 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; offX rect &lt;span class="op"&gt;+&lt;/span&gt; rectX rect&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; y0 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; offY rect&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; y1 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; offY rect &lt;span class="op"&gt;+&lt;/span&gt; rectY rect&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;in&lt;/span&gt; x0 &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; x &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; x1 &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; y0 &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; y &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; y1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Which checks for intervals in both X and Y. The &lt;code&gt;scale&lt;/code&gt; function just multiplies tenfold every magnitude (i.e., a dimension of 1 Length is shown with 10 pixel). With that utility function we can now test every rectangles: if some is found, we color the Pixel with some value, otherwise we use default background value.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pixelRenderer x y &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;case&lt;/span&gt; findRectangle x y &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;PixelRGB8&lt;/span&gt; (&lt;span class="fu"&gt;fromIntegral&lt;/span&gt; x &lt;span class="ot"&gt;`mod`&lt;/span&gt; &lt;span class="dv"&gt;32&lt;/span&gt;) (&lt;span class="fu"&gt;fromIntegral&lt;/span&gt; y &lt;span class="ot"&gt;`mod`&lt;/span&gt; &lt;span class="dv"&gt;32&lt;/span&gt;) &lt;span class="dv"&gt;128&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; idx &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pixelColor idx&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;findRectangle x y &lt;span class="ot"&gt;=&lt;/span&gt; List.findIndex (rectangleContainsPixel x y) (rectangles wrapping)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;I use &lt;code&gt;List.findIndex&lt;/code&gt; so that on a hit i can also attribute some color (see &lt;code&gt;pixelColor :: Int -&amp;gt; PixelRGB8&lt;/code&gt; which defines a palette) and paint the rectangle in a different color.&lt;/p&gt; &lt;p&gt;Another utility function is needed to give &lt;code&gt;JuicyPixel&lt;/code&gt; the size of the picture to create. This size corresponds to the farthest point in the set of off-set rectangles &lt;code&gt;maxX = maximum (0 : [ rectX r + offX r | r &amp;lt;- rectangles wrapping ])&lt;/code&gt;, I named this value the &lt;code&gt;extentX&lt;/code&gt; of a &lt;code&gt;Wrapping&lt;/code&gt; in later commits. I use comprehension list notation. I add a 0 so that &lt;code&gt;maximum&lt;/code&gt; does not crash on an empty list.&lt;/p&gt; &lt;p&gt;Our &lt;code&gt;main&lt;/code&gt; function basically parses &lt;code&gt;stdin&lt;/code&gt; into some &lt;code&gt;[Wrapping]&lt;/code&gt; and &lt;code&gt;traverse&lt;/code&gt; this list with our PNG generator.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;mainParts &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; wrappings &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; eitherDecode&amp;#39; &lt;span class="op"&gt;@&lt;/span&gt;[&lt;span class="dt"&gt;Wrapping&lt;/span&gt;] &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;getContents&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;case&lt;/span&gt; wrappings &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Left&lt;/span&gt; err &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;print&lt;/span&gt; err&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;Right&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; traverse_ printWrapping xs&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;done!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The parsing leverages the automatically-generated &lt;code&gt;instance FromJSON&lt;/code&gt; from &lt;code&gt;aeson&lt;/code&gt; (extension &lt;code&gt;DeriveGeneric&lt;/code&gt;). Note that we use &lt;code&gt;TypeApplications&lt;/code&gt; for the syntax &lt;code&gt;@[Wrapping]&lt;/code&gt; which explicitates what we are decoding from the content in &lt;code&gt;stdin&lt;/code&gt;, which also helps GHC provide less general error message when I change and break things.&lt;/p&gt; &lt;p&gt;This way, our main binary can generate individual images.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ santa-wrap parts &amp;lt; input/wrapping001.json $ done! &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The parts are individual &lt;code&gt;.png&lt;/code&gt; files as this listing shows: &lt;img src="images/parts.png" alt="img" /&gt;. Elves can use these parts to prepare some guides to later cut wrapping paper rapidly.&lt;/p&gt; &lt;p&gt;Now let’s finally introduce the concept of layout.&lt;/p&gt; &lt;h3 id="introduce-the-notion-of-layout"&gt;Introduce the notion of layout&lt;/h3&gt; &lt;p&gt;The layout is a collection of positioned wrappings. There’s an obvious Functor instance for Positioned. I could refactor Rectangle into a Positioned Rect. This way, a Layout is a &lt;code&gt;[ Positioned [ Positioned Rect ] ]&lt;/code&gt; and it is probably collapsable into a single list by translating the inner Positioned objects. Something like &lt;code&gt;flatten :: [ Positioned [ Positioned a ] ] -&amp;gt; [ Positioned a ]&lt;/code&gt; I feel tempted to actually dig in this direction. However, I’m far from done and the clock ticks. In short, I will save this for later and perform a good amount of copy-pasting.&lt;/p&gt; &lt;p&gt;The Haskell code is simply:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Positioned&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Positioned&lt;/span&gt; {&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; posX ::&lt;/span&gt; &lt;span class="dt"&gt;X&lt;/span&gt; &lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; posY ::&lt;/span&gt; &lt;span class="dt"&gt;Y&lt;/span&gt; &lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; item ::&lt;/span&gt; a &lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Functor&lt;/span&gt;)&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt; {&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; positionedWrappings ::&lt;/span&gt; [ &lt;span class="dt"&gt;Positioned&lt;/span&gt; &lt;span class="dt"&gt;Wrapping&lt;/span&gt; ]&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And now my &lt;code&gt;printLayout&lt;/code&gt; function has a very similar &lt;code&gt;pixelRenderer&lt;/code&gt;. Two distinctions though:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;to color a pixel you need to determines if a &lt;code&gt;Wrapping&lt;/code&gt; has a &lt;code&gt;Rectangle&lt;/code&gt; and the &lt;code&gt;Rectangles&lt;/code&gt; are translated by &lt;code&gt;posX&lt;/code&gt; and &lt;code&gt;posY&lt;/code&gt;. &lt;/li&gt; &lt;li&gt;we want to add a few pixels of &lt;code&gt;margin&lt;/code&gt; so that a series of adjacent squares do not appear like a long rectangle, this small margin will ease verifying layouts at a glance. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Hence, our &lt;code&gt;rectangleContainsPixel&lt;/code&gt; test takes all these things into account:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;rectangleContainsPixel ::&lt;/span&gt; &lt;span class="dt"&gt;X&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Y&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Rectangle&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;rectangleContainsPixel posx posy x y rect &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;let&lt;/span&gt; x0 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; posx &lt;span class="op"&gt;+&lt;/span&gt; offX rect&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; x1 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; posx &lt;span class="op"&gt;+&lt;/span&gt; offX rect &lt;span class="op"&gt;+&lt;/span&gt; rectX rect&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; y0 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; posy &lt;span class="op"&gt;+&lt;/span&gt; offY rect&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; y1 &lt;span class="ot"&gt;=&lt;/span&gt; scale &lt;span class="op"&gt;$&lt;/span&gt; posy &lt;span class="op"&gt;+&lt;/span&gt; offY rect &lt;span class="op"&gt;+&lt;/span&gt; rectY rect&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;in&lt;/span&gt; (x0 &lt;span class="op"&gt;+&lt;/span&gt; margin) &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; x &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; (x1 &lt;span class="op"&gt;-&lt;/span&gt; margin) &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (y0 &lt;span class="op"&gt;+&lt;/span&gt; margin) &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; y &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; (y1 &lt;span class="op"&gt;-&lt;/span&gt; margin)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;How do you verify that the margin is pretty enough? Simply generate a naive Layout function. We just lay out shapes left-to-right.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;linearLayout ::&lt;/span&gt; [ &lt;span class="dt"&gt;Wrapping&lt;/span&gt; ] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;linearLayout wrappings &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; List.zipWith (\w (x,y) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Positioned&lt;/span&gt; x y w) wrappings xys&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; xys ::&lt;/span&gt; [(&lt;span class="dt"&gt;X&lt;/span&gt;,&lt;span class="dt"&gt;Y&lt;/span&gt;)]&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; xys &lt;span class="ot"&gt;=&lt;/span&gt; List.scanl placeToTheLeft (&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;) wrappings &lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; placeToTheLeft ::&lt;/span&gt; (&lt;span class="dt"&gt;X&lt;/span&gt;, &lt;span class="dt"&gt;Y&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Wrapping&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;X&lt;/span&gt;, &lt;span class="dt"&gt;Y&lt;/span&gt;)&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; placeToTheLeft (x,y) w &lt;span class="ot"&gt;=&lt;/span&gt; (x &lt;span class="op"&gt;+&lt;/span&gt; extentX w, &lt;span class="dv"&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The interesting aspect is the use of &lt;code&gt;List.scanl&lt;/code&gt; to perform a fold an accumulate intermediary values. The accumulator is the position for the next &lt;code&gt;Wrapping&lt;/code&gt; (hence, we start at &lt;code&gt;(0,0)&lt;/code&gt; and then we move right by an amount large enough to ensure there will be no overlap: what we named the &lt;em&gt;extent&lt;/em&gt; of the wrapping shape.&lt;/p&gt; &lt;p&gt;This function does not even take care of the bounds of the roll. This function is merely useful to have some comparison point and to exercise the &lt;code&gt;printLayout&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;Running the following command will give the image below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ santa-wrap linear-layout ./layout.png &amp;lt; input/wrapping003.json done! &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src="images/linear-layout.png" alt="img" /&gt;&lt;/p&gt; &lt;p&gt;Now we see the margins, the coloring. We also have a MiniZinc model for non-naive layouts. Let’s bring the two things together.&lt;/p&gt; &lt;h3 id="actually-bridge-the-haskell-and-minizinc-code"&gt;Actually bridge the Haskell and MiniZinc code&lt;/h3&gt; &lt;p&gt;Showcasing my &lt;code&gt;minizinc-process&lt;/code&gt; library is, a main motivator (second to saving Christmas’ spirit, though).&lt;/p&gt; &lt;p&gt;Remember that, we want to approach ergonomics for the solver so that in Haskell-land it feels like we have a function &lt;code&gt;solver :: Model -&amp;gt; Parameters -&amp;gt; Maybe Decisions&lt;/code&gt;. Here enters &lt;code&gt;minizinc-process&lt;/code&gt;, an helper library that actually uses MiniZinc support for JSON input/outputs. This is feasible with &lt;code&gt;runLastMinizincJSON&lt;/code&gt;, which has type:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runLastMinizincJSON ::&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; (&lt;span class="dt"&gt;ToJSON&lt;/span&gt; input, &lt;span class="dt"&gt;FromJSON&lt;/span&gt; answer) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;MiniZinc&lt;/span&gt; input answer &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; input &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; answer)&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;runLastMinizincJSON &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The typeclass constraints on &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; allow to serialize back and forth using JSON. The &lt;code&gt;Minizinc input answer&lt;/code&gt; actually contains the model (e.g., a filepath to the &lt;code&gt;models/santa-wrap.mzn&lt;/code&gt; file) and parameters for driving MiniZinc (i.e., which solver to use, whether there is a timeout or to search forever, but also, how to create intermediary &lt;code&gt;.json&lt;/code&gt; input files that play the role of the &lt;code&gt;models/santa-wrap001.dzn&lt;/code&gt; for each different possible input). For this project, we use the &lt;code&gt;simpleMiniZinc&lt;/code&gt; constructor to get a &lt;code&gt;Minizinc&lt;/code&gt;that also adds some &lt;code&gt;Hashable&lt;/code&gt; constraint on the input type so that we can generate filenames. Fortunately, &lt;code&gt;Hashable&lt;/code&gt; is generically-derivable as well so little boilerplate is incured.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;runLastMinizincJSON&lt;/code&gt; functions runs for up to the timeout provided in the MiniZinc option and return the latest decisions (if there is any). A more general function &lt;code&gt;runMinizincJSON&lt;/code&gt; exists. This function takes a state-machine named &lt;code&gt;ResultHandler&lt;/code&gt; to handle individual results. Indeed, we can ask MiniZinc to return multiple solutions, prove that there are no more solutions, and handling this variety of cases asks for more complicated types.&lt;/p&gt; &lt;p&gt;The underlying type are:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SearchState&lt;/span&gt; a&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Exhausted&lt;/span&gt; a&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Incomplete&lt;/span&gt; a&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Unsatisfiable&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;InternalError&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ResultHandler&lt;/span&gt; obj b&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ResultHandler&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; handleNext ::&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SearchState&lt;/span&gt; obj &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (b, &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;ResultHandler&lt;/span&gt; obj b))&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The result handler is parametrized by &lt;code&gt;obj&lt;/code&gt; which are the decisions that the solver makes, and the handler is also parametrized by &lt;code&gt;b&lt;/code&gt; – an accumulator state like in a fold. A handler is called each time the search changes SearchState. The handler is free to do what it wants but must return an updated state and an updated handler (or an absence of handler to tell the library that we can stop the search). Later versions of the library will likely generalize IO in the handler to some parametric class.&lt;/p&gt; &lt;p&gt;There is not much more to &lt;code&gt;minizinc-process&lt;/code&gt;. Let’s use it in practice.&lt;/p&gt; &lt;p&gt;We need to translate two worldviews for the same information, back and forth. MiniZinc expects data in array shapes and other parameters giving the length of these arrays whereas our Haskell data is meant to help interactions with users. Hence, the Haskell datatypes closely follow Elf-semantics. Typically, translation code between two worldviews benefits from careful newtypes to distinguish array indices. Indeed, every entity becomes identified by an index and it is all too common to make an error. Multi-dimensional arrays have some support for types in MiniZinc but the data serialized in JSON do not.&lt;/p&gt; &lt;p&gt;The risk we want to reduce is to mix-up array indices and mix-up the terminology. This is where newtypes shine in Haskell. Two extensions, &lt;code&gt;DerivingStrategies&lt;/code&gt; and &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; come handy to save on boilerplate.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;ShapeIdx&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ShapeIdx&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; stock &lt;span class="dt"&gt;Show&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; stock &lt;span class="dt"&gt;Eq&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Hashable&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;BlockIdx&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BlockIdx&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; stock &lt;span class="dt"&gt;Show&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Hashable&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;We can now write an Haskell data type for the input. This data type has fields mapping closely the names of &lt;code&gt;par&lt;/code&gt; variables in MiniZinc (which you find declared in the &lt;code&gt;./models/santa-wrap001.dzn&lt;/code&gt;). Arrays map to lists, two dimensional arrays become nested lists. Sets required me to define an indirection named &lt;code&gt;MinizincSet&lt;/code&gt; (will be merged upstream) to match MiniZinc expectations for its JSON inputs. Thus, my Input and Output types become.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Input&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Input&lt;/span&gt; {&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; nBlocks ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; rect_sizes ::&lt;/span&gt; [[&lt;span class="dt"&gt;Int&lt;/span&gt;]]&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; rect_offs ::&lt;/span&gt; [[&lt;span class="dt"&gt;Int&lt;/span&gt;]]&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; nShapes ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; shapes ::&lt;/span&gt; [ &lt;span class="dt"&gt;MinizincSet&lt;/span&gt; &lt;span class="dt"&gt;BlockIdx&lt;/span&gt; ]&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; nObjs ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; object_shapes ::&lt;/span&gt; [ &lt;span class="dt"&gt;ShapeIdx&lt;/span&gt; ]&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; x_max ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; y_max ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Generic&lt;/span&gt;)&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Hashable&lt;/span&gt; &lt;span class="dt"&gt;Input&lt;/span&gt;&lt;/span&gt; &lt;span id="13"&gt;&lt;a href="#13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt; &lt;span class="dt"&gt;Input&lt;/span&gt;&lt;/span&gt; &lt;span id="14"&gt;&lt;a href="#14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="15"&gt;&lt;a href="#15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Output&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Output&lt;/span&gt; {&lt;/span&gt; &lt;span id="16"&gt;&lt;a href="#16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt; coordinates ::&lt;/span&gt; [ (&lt;span class="dt"&gt;X&lt;/span&gt;, &lt;span class="dt"&gt;Y&lt;/span&gt;) ]&lt;/span&gt; &lt;span id="17"&gt;&lt;a href="#17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt; &lt;span id="18"&gt;&lt;a href="#18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Generic&lt;/span&gt;)&lt;/span&gt; &lt;span id="19"&gt;&lt;a href="#19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;FromJSON&lt;/span&gt; &lt;span class="dt"&gt;Output&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The rest of the work now requires to build a &lt;code&gt;convertInput&lt;/code&gt; function that takes Haskell domain values, map that into an Input. This mapping will require to give integral IDs to entities. For instance, each individual &lt;code&gt;Wrapping&lt;/code&gt; in the input requires as many &lt;code&gt;OBJECT&lt;/code&gt; as the &lt;code&gt;quantity&lt;/code&gt; requires. I typically use list-comprehensions and zipping with &lt;code&gt;[1..]&lt;/code&gt; to achieve this indexing.&lt;/p&gt; &lt;p&gt;For instance, each &lt;code&gt;Wrapping&lt;/code&gt; has one &lt;code&gt;SHAPE&lt;/code&gt; in our problem. Thus, we provide an indexed list of shapes and its “originating” &lt;code&gt;Wrapping&lt;/code&gt; as follows.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;indexedWrappings ::&lt;/span&gt; [(&lt;span class="dt"&gt;ShapeIdx&lt;/span&gt;, &lt;span class="dt"&gt;Wrapping&lt;/span&gt;)]&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;indexedWrappings &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;zip&lt;/span&gt; (&lt;span class="fu"&gt;fmap&lt;/span&gt; &lt;span class="dt"&gt;ShapeIdx&lt;/span&gt; [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;]) wrappings&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;BLOCK&lt;/code&gt; and their &lt;code&gt;rect_sizes, rect_offs&lt;/code&gt; are a bit more complicated. To build everything we want, we need a “table” with, for each SHAPE, what BLOCK it is made of, and the “originating” &lt;code&gt;Rectangle&lt;/code&gt; to get carry the sizes and offsets.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;indexedRects ::&lt;/span&gt; [(&lt;span class="dt"&gt;ShapeIdx&lt;/span&gt;, &lt;span class="dt"&gt;BlockIdx&lt;/span&gt;, &lt;span class="dt"&gt;Rectangle&lt;/span&gt;)]&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;indexedRects &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;zipWith&lt;/span&gt; (\blockIdx (shapeIdx, r) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (shapeIdx, blockIdx, r))&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; (&lt;span class="fu"&gt;fmap&lt;/span&gt; &lt;span class="dt"&gt;BlockIdx&lt;/span&gt; [ &lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt; ])&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ (shapeIdx, r) &lt;span class="op"&gt;|&lt;/span&gt; (shapeIdx,w) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedWrappings, r &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; rectangles w ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;We can then compute the number of &lt;code&gt;BLOCK&lt;/code&gt;, which is &lt;code&gt;nBlocks = length indexedRects&lt;/code&gt;. An optimization could have been to share equal blocks when shared across &lt;code&gt;SHAPEs&lt;/code&gt; (i.e., when a same &lt;code&gt;Rectangle&lt;/code&gt; appears in two &lt;code&gt;Wrappings&lt;/code&gt;). Let’s not suffer from early optimization.&lt;/p&gt; &lt;p&gt;We can now build the &lt;code&gt;rect_sizes&lt;/code&gt; and &lt;code&gt;rect_offs&lt;/code&gt; of each &lt;code&gt;BLOCK&lt;/code&gt; by directly looking at the values associated in the “originating” &lt;code&gt;Rectangle&lt;/code&gt;.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;rect_sizes &lt;span class="ot"&gt;=&lt;/span&gt; [ [rectX r, rectY r] &lt;span class="op"&gt;|&lt;/span&gt; (_,_,r) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedRects ]&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;rect_offs &lt;span class="ot"&gt;=&lt;/span&gt; [ [offX r, offY r] &lt;span class="op"&gt;|&lt;/span&gt; (_,_,r) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedRects ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and the relational information “which SHAPE contains which BLOCK” is a reading of the ‘join’ of the &lt;code&gt;indexedRects&lt;/code&gt; and the &lt;code&gt;indexedWrappings&lt;/code&gt; tables. Again, we use comprehension-lists to the cardinal product of the two tables (and collecting that in &lt;code&gt;MinzincSet&lt;/code&gt;).&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;shapes &lt;span class="ot"&gt;=&lt;/span&gt; [ &lt;span class="dt"&gt;MinizincSet&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; [ blockIdx &lt;span class="op"&gt;|&lt;/span&gt; (shapeIdx2,blockIdx,_) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedRects&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; , shapeIdx1 &lt;span class="op"&gt;==&lt;/span&gt; shapeIdx2&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;|&lt;/span&gt; (shapeIdx1,_) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedWrappings&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Performance could become a concern for large amount of &lt;code&gt;Wrapping&lt;/code&gt; and large amount of &lt;code&gt;Rectangle&lt;/code&gt;. However, again, we are not chasing seconds in serialization/translation code as we are ready to spend minutes of solver-time to saves hours to our Elves. If data proves this piece of code is the bottleneck in practice, we can then try to optimize further this type of code. Since the code is pure, it is really amenable to property testing under QuickCheck or HedgeHog: for any data, both the (slow)-reference and (putatively-optimized)-candidate functions are returning equal outputs.&lt;/p&gt; &lt;p&gt;Finally, our MiniZinc model wants &lt;code&gt;OBJECT&lt;/code&gt;, one per present rather than one per Wrapping objects (the Haskell data model holds a quantity). I mistakenly did two things at a time: expanding quantities and associating a Shape to each Wrapping. &lt;code&gt;flattenedWrappings&lt;/code&gt; in the heat to release something early for our Elves.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;flattenedWrappings ::&lt;/span&gt; [(&lt;span class="dt"&gt;ShapeIdx&lt;/span&gt;, &lt;span class="dt"&gt;Wrapping&lt;/span&gt;)]&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;flattenedWrappings &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;mconcat&lt;/span&gt; [ &lt;span class="fu"&gt;replicate&lt;/span&gt; (quantity w) (shapeIdx, w) &lt;span class="op"&gt;|&lt;/span&gt; (shapeIdx, w) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; indexedWrappings ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This code means that if we have &lt;code&gt;Wrapping { name = abc , quantity = 2 }&lt;/code&gt; and &lt;code&gt;Wrapping {name = def, quantity = 5}&lt;/code&gt; then we have to lay out seven &lt;code&gt;OBJECT&lt;/code&gt;, two of &lt;code&gt;SHAPE&lt;/code&gt; associated to &lt;code&gt;abc&lt;/code&gt; and five of &lt;code&gt;SHAPE&lt;/code&gt; associated to &lt;code&gt;def&lt;/code&gt;. The corresponding boilerplate is:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;nObjs &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; flattenedWrappings&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;object_shapes &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;fmap&lt;/span&gt; &lt;span class="fu"&gt;fst&lt;/span&gt; flattenedWrappings&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;I think this covers most of the boiler-plate. Extra function arguments are the size of the roll&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;x_max &lt;span class="ot"&gt;=&lt;/span&gt; sizeX&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;y_max &lt;span class="ot"&gt;=&lt;/span&gt; sizeY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is tempting to just write the “forward translation code” and call it a day. In reality, if you were a consumer of such a library, you would like to minimize this horrendous boiler plate, and you still need some “reverse translation code”. Be kind to your users. You have done a lot of work to create “indexed” arrays once, you’d rather not duplicate this code. Even if you do not duplicate the code, having colocated everything within the constraints of a pure function will guarantee you that no non-determinism creeps in. Hence, you should make a “reverse translation function” at the same time as you translate forward. Bonus: you can guarantee that calls of unsafe functions (like array indexing) actually are safe because you are writing the providing and consuming dynamically-shaped data at the same place.&lt;/p&gt; &lt;p&gt;Indeed, because we have access to &lt;code&gt;flattenedWrappings&lt;/code&gt; our “reverse translation code” is a single line.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;layoutOutput ::&lt;/span&gt; &lt;span class="dt"&gt;Output&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;layoutOutput (&lt;span class="dt"&gt;Output&lt;/span&gt; coords) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;zipWith&lt;/span&gt; (\w (x,y) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Positioned&lt;/span&gt; x y w) [w &lt;span class="op"&gt;|&lt;/span&gt; (_,w) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; flattenedWrappings] coords&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Writing all this boilerplate takes time (hence why I circled it red at the beginning in my dependency graph for the tasks in this project). Such translation code would be hard to generate in the general case. Hence I do not have very good solutions but to be careful and use &lt;code&gt;newtype&lt;/code&gt; for each index. The good news, however, is that it is pretty easy to debug: generate simple cases with one then two &lt;code&gt;Wrapping&lt;/code&gt;, observe the generated &lt;code&gt;.json&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;At last we can be gratified. A simple &lt;code&gt;main&lt;/code&gt; that ressembles the one for &lt;code&gt;linearLayout&lt;/code&gt; allows us to generate layouts for given roll sizes.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ santa-wrap minizinc-layout ./layout-190x150.png 190 150 &amp;lt; input/wrapping003.json done! $ santa-wrap minizinc-layout ./layout-170x160.png 170 160 &amp;lt; input/wrapping003.json done! $ santa-wrap minizinc-layout ./layout-170x159.png 170 159 &amp;lt; input/wrapping003.json no layout found! &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first command greets us with the following picture &lt;img src="./images/layout-190x150.png" alt="img" /&gt;. We can try shrinking the Y-coordinates, 160 is still good, but 159 is too hard (note: it is actually infeasible but the &lt;code&gt;runLastMinizincJSON&lt;/code&gt; function makes no distinctions between timeout and unfeasible). Visual inspection of the Y=160 case seems to show that the two cross-shaped and the big rectangle are the main reasons to limit the roll size &lt;img src="./images/layout-190x150.png" alt="img" /&gt;.&lt;/p&gt; &lt;p&gt;Convince yourself with this picture (done by modifying the input JSON to delete everything but the &lt;em&gt;shoes&lt;/em&gt; and the &lt;em&gt;sword&lt;/em&gt; entries: &lt;img src="./images/layout-restricted.png" alt="img" /&gt;.&lt;/p&gt; &lt;p&gt;OK, with this &lt;code&gt;santa-wrap&lt;/code&gt; tool, Elves are in good shape to save Christmas’ spirit. Thank you MiniZinc and Haskell!&lt;/p&gt; &lt;p&gt;For the fun try packing that yourselves (input is &lt;code&gt;input/wrapping005.json&lt;/code&gt;) &lt;img src="images/layout-robot-200x240.png" alt="img" /&gt;&lt;/p&gt; &lt;h2 id="discussion"&gt;Discussion&lt;/h2&gt; &lt;p&gt;Given more times, a number of possible improvements could happen. For a work project more discussions with the Elves would help adding more constraints to the Model. We next discuss some possible “improvements”.&lt;/p&gt; &lt;h3 id="possible-improvements"&gt;Possible improvements&lt;/h3&gt; &lt;p&gt;Elves have deadlines too, although they would love to keep improving their tools, they have other important (albeit slightly more mundane) tasks at their day jobs. Besides the discussion about Positioned being an interesting abstraction, I want to discuss improvements to the solver/problem itself and illustrate how business ideas are generated/pruned with such discussions.&lt;/p&gt; &lt;p&gt;A user may suggest improvements to the tool, but not all improvements are equally easy to introduce. Here are a few options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;easy: reduce some cost (material spent) ; you would need to change the satisfyability into some optimiziation trying to minimize the area bounded by maximum X-Y coordinates &lt;/li&gt; &lt;li&gt;medium: pick an orientation (left-right vs. up-down) ; you would need to change Input, Output, and the model to tell which shapes an object can take, but &lt;code&gt;geost&lt;/code&gt; already takes care of that &lt;/li&gt; &lt;li&gt;hard: attribute multiple rolls at once ; you would need to change Input, Output, and the model to pass a number rolls (maybe to each one their size) and modify the MiniZinc model to decide a roll for each object; you’d generate two pictures per problem &lt;/li&gt; &lt;li&gt;crazy-hard: time taken to cut with cissors ; you would need to significantly alter the model to express the notion of “gaps” or “external”. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In a typical setup I would propose to deliver the easy and medium improvements before calling the tool done. I would suggest to propose the hard improvement as more data is generated to understand if Elves actually would benefit from such changes. I would root against the crazy hard, and even propose to equip Elves with cutting-tools and drop cissors would probably use total surface as a good enough proxy, simulators can help assess how bad.&lt;/p&gt; &lt;p&gt;Elves would love to hear about your improvement suggestions or merge requests! Feel free to contact me or to open some Issues to discuss them together.&lt;/p&gt; &lt;h3 id="epilogue"&gt;Epilogue&lt;/h3&gt; &lt;p&gt;Alright, this blog post was longer than I expected. I wanted to show how Haskell can be used to solve a very practical problem and also put onto words some “tactical thinking” to avoid losing time on the less-important aspects (the one I have not circled red in my dependency diagram). My main challenge was to time-box my work to one day of code: on top of my Elvish missions I have a day job and all-in-all this is a good constraint to simulate a real-world situation. The information I had before starting: I knew &lt;code&gt;JuicyPixels&lt;/code&gt; existed but had never used it before, I sort of framed the Santa-Wrap problem to illustrate a non-trivial MiniZinc global (&lt;code&gt;geost_bb&lt;/code&gt; arguably is pretty advanced). I built the &lt;code&gt;minizinc-process&lt;/code&gt; library and wanted a pretext to show-case it. I could have taken a shortcut as &lt;code&gt;minizinc-process&lt;/code&gt; offers some TemplateHaskell to generate &lt;code&gt;Input&lt;/code&gt; and &lt;code&gt;Output&lt;/code&gt; datatypes (with no newtypes and no support for sets, the pedagogy would have suffered).&lt;/p&gt; &lt;p&gt;An advantage of the Haskell + MiniZinc combination is to be able to use each tool for what they are best at. Haskell allows me to write solid backend services and command line tools whereas MiniZinc allows me to model using MiniZinc IDE (e.g., with a nice syntax for multi-dimensional arrays). In this setup the key difficulty is the boilerplate code required to translate inputs and outputs.&lt;/p&gt; &lt;p&gt;I hope this article piqued your interest. Feel free to contact me if you are curious whether these types of techniques are a good fit for you. I gave a presentation of MiniZinc at an online event this year, and you will find much more on the website and on the Coursera lessons (time consuming).&lt;/p&gt; &lt;p&gt;Thanks to Advent of Haskell organizers and all the other articles authors.&lt;/p&gt; &lt;p&gt;I wish you all the best for the end of 2020 and cheers to a better 2021!&lt;/p&gt; &lt;p&gt;Oh oh oh!&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/santa-wrap.html" rel="alternate"/>
        <summary type="text">
            We help Santa Elves optimize cutting wrapping paper to accomodate various shapes. The difficult optimization requires a dedicated solver in MiniZinc. Haskell allows to integrate with MiniZinc, reads JSON and outputs a PNG image with the footprint of the positionned shapes to cut. This article shows that a one-day-of-work project can reach pretty far.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/notes.html
        </id>
        <title type="text">
            Some notes
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="notes"&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;db delete fks&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;db&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;need an index for delete although a deletion follows an expected order, would require some way to tell the DB to disallow reinserting keys for deleted rows for pending deletes&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;user trust in analytics dashboard&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;business&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;if it's new data (e.g., ga) they trust, otherwise (e.g., jira board digest) they will distrust&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;types of code&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;types of code&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;there are three broad type of code, producer, consumer (in duality), and glue code (oblivious); defining primitive types in either packages is annoying&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;how photos are judged&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;photo&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;little time to judge a #photo, photos without a clear subjet, lack of intentionality, border; follow the theme binary then jury appreciation&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;types of structures&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;engineering&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;A number of structures exists: bookeeping, control, data. We typically have different ideas about performance/usability tradeoffs of these structures. Would be nice to be able to annotate structures to tell whether some substructure serves a domain need or is artificial.&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;mutation tar-pit&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;engineering&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;As stated in the tar-pit paper: there's a combinatorial explosion due to the very nature of mutation, so it can become cumbersome to have a data-type that perfectly espouse the set of valid values. We can go further and say that due to the time there is not a single value but a fluid value where each observer contributes to the combinatorial explosion.&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;complexity increasing&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;engineering&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;as project matures, even small fixes take more time because you need more preconditions to make some piece of code works (coupling creeps in)&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;pareto and exploratory prototypes&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;philosophy&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;There are really various types of prototypes: pareto-prototypes where you know where you're going (e.g., build a query-language) but aim to grow iteratively and exploration-prototypes where you don't know what you're doing.&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;in defense of dense code&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;rant&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;balance between repeated code, golang-amounts of repetition means more to review, more to move, increased amounts of refactorings and branch conflicts&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;unit blindness&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;idea&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;there's already some knowledge about boolean blindness in API-design, we should not miss the unit-blindness, when a 'delete operation' occurs for instance, you should return a `Tombstone =~ Unit`&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;postgrest-table is pretty good&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;idea&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;could re-use the table model outside of postgrest-though&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;encapsulation of db access is no better than lazy-io&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;dev practices&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;people like to dunk on Haskell lazy structures and often don't know what LazyIO is. still encapsulation with 'providers' that then fetch data when needed is akin to lazy IO, rather code should ask for the already-provided data to move fetching to common glue code only&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;autoformatters and reviews&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;dev practices&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;as much as i think code formatter are an advanced in engineering, other tools are a bit lagging/not-ready or there's a mismatch. in particular code reviews and diff tools&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;sloppy code slows readers down and leads to decision paralysis&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;dev practices&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;when some sloppy code has caveats but it's fine in context, and you need to recreate or reuse the same or similar logic; it hurts when you read, it makes impossible to know whether the sloppiness is acceptable or WAI, and makes it harder to gauge re-use-and-fix or reinvent the wheel&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a tweet thread?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;csv-like api would be better&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;dev practices&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;many apis would be better if they were returning tabledump-likes with integrity references rather than json objects&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a tweet thread?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;null fatigue&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;dev practices&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;I have some fair amount of null fatigue. When it's in your code you lose a couple of hours a week (still close to 5% of your work). When it's in public-APIs of large services I can't help but feel the scaling factor of these couple of hours across users of the API.&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a Tweet thread?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;a thing I find is bad taste in design&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;sometimes it feels like you need to add code to remove features, that is you build a feature by restricting a more general tool (e.g., middle-ware skipping logic)&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;being accurate vs being useful&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;products&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;in data-analytics there is a tension between being accurate with whatever data you have and being synthetic and helpful&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;onFoo handlers&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;idea&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;when you return some code capable of reacting some event, vs when you call the handler code -- mix of dual concepts (e.g., SWR returns a mutate function onFooChanged that is employed as an onClick handler)&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a POC?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;need for tools&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;idea&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;- a tool to help with API diffs - and a tool to help with templating live&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a POC?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;components do not compose well&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;web&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;CSS and layout are global-constraint problems, they do not compose well. hence components are somewhat doomed in complex environments unless the view aspects are constrained to what composes for real. current components merely combine&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a blog post?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;JS frameworks and components&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;soft&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;components dependencies are orthogonal to display nesting would be nice to instantiate components (with their sub components) but allow to nest views independently from the component hierarchy for instances a button inserted in a toolbar actually appears because it is in a component elsewhere in short, components exist in two realms: - hierarchical reasons to exists (a button is an active component because a particular pane is active) - visual embedding (a button is displayed within a particular location) what i want is to define a component with input/output/events/queries like in halogen and separately map that onto HTML+DOM-bindings-with-events &lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;is there prior work?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write a POC?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;golang after 1year&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;soft&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;after around a year using it, I still sincerely think that Golang power/weight ratio is pretty bad and doesn't feel modern. Pro: it compiles fast Con: but while doing so it checks so little and provides no affordance Perf-bound, I'd go for Rust, else a member of the ML-family. &lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I tweet that?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;encoding info in URLs&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;web&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;discussions on https://news.ycombinator.com/item?id=31310564 seem to tell that one should encode information in the hierarchy, seems like a failure to encode information in the page `meta` headers&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;example of optim&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;optim&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;good-fast-cheap triangle is a good example to discuss about pareto-optimality&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;lack of elegance can be simple&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;system&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;Sometimes having a brutalist solution is good because you can use it all the time with little second thoughts. Our desire to do things right wants us to use parcimony and elegance. However being nit-picky, extra complications arise due to combinatorics. Imperfect on many aspects but no-brainer to use and understand (see: bell-curve meme).&lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note"&gt; &lt;h1 class="note-title"&gt;dependencies in OOP and IO&lt;/h1&gt; &lt;div class="note-info"&gt; &lt;div class="topics"&gt;&lt;p&gt;&lt;span class="topic"&gt;oop&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class="note-score"&gt;&lt;p&gt;&lt;span class="score"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="note-body"&gt;&lt;blockquote&gt;About OOP hiding states. It's pretty common to bundle all dependencies in the object, say a Summarry object. Then there is no distinction between methods that make use of none, some, or all of these dependencies. Even when internally-occurring as private methods. Turns out it makes code-auditing and code-reviewing painful. As time passes, objects accrete more and more dependencies for single new methods. We should have more fine-grained &lt;/blockquote&gt;&lt;/div&gt; &lt;div class="questions"&gt;&lt;div class="question"&gt;&lt;p&gt;&lt;span&gt;should I write an article?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script type="text/javascript"&gt; (function(){ const xs = [... document.getElementsByTagName("h1")]; xs.forEach((x) =&gt; { const title = x.innerHTML ?? 'about your blog'; const subject = `About your note: ${title}`; const elt = document.createElement("a"); elt.innerHTML = " 📧"; elt.setAttribute("class", "enquire-link") elt.setAttribute("href", `mailto:lucas@dicioccio.fr?subject=${subject}`); x.appendChild(elt); }); })() &lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/notes.html" rel="alternate"/>
        <summary type="text">
            Notes that could become part of articles.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/gallery-2022-08-cabourg.html
        </id>
        <title type="text">
            Cabourg August 2022
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="photos"&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:416px; height:276px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9462.jpg"&gt; &lt;img src="/images/thumb_IMG_9462.jpg" loading="lazy" width=416 height=276&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;fish market&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:229px; height:129px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9221.jpg"&gt; &lt;img src="/images/thumb_IMG_9221.jpg" loading="lazy" width=229 height=129&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;pont sur Dives&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:500px; height:334px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9223-2.jpg"&gt; &lt;img src="/images/thumb_IMG_9223-2.jpg" loading="lazy" width=500 height=334&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;butee du port&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:204px; height:136px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9225.jpg"&gt; &lt;img src="/images/thumb_IMG_9225.jpg" loading="lazy" width=204 height=136&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;butee du port (2)&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9472.jpg"&gt; &lt;img src="/images/thumb_IMG_9472.jpg" loading="lazy" width=250 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;petits pecheurs&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:500px; height:334px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9474.jpg"&gt; &lt;img src="/images/thumb_IMG_9474.jpg" loading="lazy" width=500 height=334&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;bazar du port - 1&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:245px; height:164px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9475.jpg"&gt; &lt;img src="/images/thumb_IMG_9475.jpg" loading="lazy" width=245 height=164&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;bazar du port - 2&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9483.jpg"&gt; &lt;img src="/images/thumb_IMG_9483.jpg" loading="lazy" width=250 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;bazar du port - 3&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:167px; height:222px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9476.jpg"&gt; &lt;img src="/images/thumb_IMG_9476.jpg" loading="lazy" width=167 height=222&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;gros pecheurs&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:219px; height:146px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9479.jpg"&gt; &lt;img src="/images/thumb_IMG_9479.jpg" loading="lazy" width=219 height=146&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;bretons invites&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:141px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9047.jpg"&gt; &lt;img src="/images/thumb_IMG_9047.jpg" loading="lazy" width=250 height=141&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;maisons de littoral a Cabourg&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9001.jpg"&gt; &lt;img src="/images/thumb_IMG_9001.jpg" loading="lazy" width=250 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;les parasols&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:600px; height:600px; border: 30px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_8825.jpg"&gt; &lt;img src="/images/thumb_IMG_8825.jpg" loading="lazy" width=600 height=600&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;l' ecume&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:233px; height:155px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9598.jpg"&gt; &lt;img src="/images/thumb_IMG_9598.jpg" loading="lazy" width=233 height=155&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;vue de plage&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:141px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9042.jpg"&gt; &lt;img src="/images/thumb_IMG_9042.jpg" loading="lazy" width=250 height=141&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;la plage&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:214px; height:120px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9049.jpg"&gt; &lt;img src="/images/thumb_IMG_9049.jpg" loading="lazy" width=214 height=120&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;la mer, encore&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:400px; height:400px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9064.jpg"&gt; &lt;img src="/images/thumb_IMG_9064.jpg" loading="lazy" width=400 height=400&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;balade&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:211px; height:141px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9331.jpg"&gt; &lt;img src="/images/thumb_IMG_9331.jpg" loading="lazy" width=211 height=141&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;jeu de plage&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:618px; height:348px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_8995.jpg"&gt; &lt;img src="/images/thumb_IMG_8995.jpg" loading="lazy" width=618 height=348&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;face off&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9048.jpg"&gt; &lt;img src="/images/thumb_IMG_9048.jpg" loading="lazy" width=250 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;yellow block&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:466px; height:310px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9595.jpg"&gt; &lt;img src="/images/thumb_IMG_9595.jpg" loading="lazy" width=466 height=310&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;colonne de l'oceanie&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:233px; height:155px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9601.jpg"&gt; &lt;img src="/images/thumb_IMG_9601.jpg" loading="lazy" width=233 height=155&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;en promenade&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:250px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9596.jpg"&gt; &lt;img src="/images/thumb_IMG_9596.jpg" loading="lazy" width=250 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;shiny boats&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:408px; height:306px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_8829-1.jpg"&gt; &lt;img src="/images/thumb_IMG_8829-1.jpg" loading="lazy" width=408 height=306&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;evening chill&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:222px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9607.jpg"&gt; &lt;img src="/images/thumb_IMG_9607.jpg" loading="lazy" width=222 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;envie de manege&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:500px; height:334px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9109.jpg"&gt; &lt;img src="/images/thumb_IMG_9109.jpg" loading="lazy" width=500 height=334&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;vue nocturne&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:594px; height:444px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9161.jpg"&gt; &lt;img src="/images/thumb_IMG_9161.jpg" loading="lazy" width=594 height=444&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;coucher sur la mer&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:500px; height:334px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9558.jpg"&gt; &lt;img src="/images/thumb_IMG_9558.jpg" loading="lazy" width=500 height=334&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;sleepy boats&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:278px; height:167px; border: 20px solid white"&gt; &lt;a target="_blank" href="/images/thumb_IMG_9425.jpg"&gt; &lt;img src="/images/thumb_IMG_9425.jpg" loading="lazy" width=278 height=167&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;manege&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/gallery-2022-08-cabourg.html" rel="alternate"/>
        <summary type="text">
            A photo gallery from a summer trip to Cabourg, France.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/alphabets.html
        </id>
        <title type="text">
            Alphabets
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="the-nato-phonetic-alphabet-if-it-were-written-by-"&gt;The NATO phonetic alphabet if it were written by …&lt;/h1&gt; &lt;h2 id="haskellers"&gt;Haskellers&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Applicative &lt;/li&gt; &lt;li&gt;Bisimulation &lt;/li&gt; &lt;li&gt;Closure &lt;/li&gt; &lt;li&gt;Distributive &lt;/li&gt; &lt;li&gt;Exception &lt;/li&gt; &lt;li&gt;Functor &lt;/li&gt; &lt;li&gt;Generic &lt;/li&gt; &lt;li&gt;Haskell &lt;/li&gt; &lt;li&gt;Isomorphism &lt;/li&gt; &lt;li&gt;Join &lt;/li&gt; &lt;li&gt;Kleisli &lt;/li&gt; &lt;li&gt;Lazy &lt;/li&gt; &lt;li&gt;Monad &lt;/li&gt; &lt;li&gt;Natural &lt;/li&gt; &lt;li&gt;Operator &lt;/li&gt; &lt;li&gt;Parallel &lt;/li&gt; &lt;li&gt;Quotient &lt;/li&gt; &lt;li&gt;Recursive &lt;/li&gt; &lt;li&gt;Strict &lt;/li&gt; &lt;li&gt;Traversal &lt;/li&gt; &lt;li&gt;Unification &lt;/li&gt; &lt;li&gt;Version &lt;/li&gt; &lt;li&gt;Wrapped &lt;/li&gt; &lt;li&gt;XOR &lt;/li&gt; &lt;li&gt;Yoneda &lt;/li&gt; &lt;li&gt;Zoom &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="statisticians"&gt;Statisticians&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Average &lt;/li&gt; &lt;li&gt;Binomial &lt;/li&gt; &lt;li&gt;Confidence &lt;/li&gt; &lt;li&gt;Density &lt;/li&gt; &lt;li&gt;Estimate &lt;/li&gt; &lt;li&gt;Frequency &lt;/li&gt; &lt;li&gt;Gaussian &lt;/li&gt; &lt;li&gt;Hypothesis &lt;/li&gt; &lt;li&gt;Independant &lt;/li&gt; &lt;li&gt;Joint &lt;/li&gt; &lt;li&gt;Kurtosis &lt;/li&gt; &lt;li&gt;Logistic &lt;/li&gt; &lt;li&gt;Markov &lt;/li&gt; &lt;li&gt;Normal &lt;/li&gt; &lt;li&gt;Observation &lt;/li&gt; &lt;li&gt;Parameter &lt;/li&gt; &lt;li&gt;Quantity &lt;/li&gt; &lt;li&gt;Random &lt;/li&gt; &lt;li&gt;Sampling &lt;/li&gt; &lt;li&gt;Treatment &lt;/li&gt; &lt;li&gt;Universe &lt;/li&gt; &lt;li&gt;Variance &lt;/li&gt; &lt;li&gt;Weibull &lt;/li&gt; &lt;li&gt;X: ||x|| &lt;/li&gt; &lt;li&gt;Y: ||y|| &lt;/li&gt; &lt;li&gt;ZScore &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="computer-scientists"&gt;Computer Scientists&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Algorithm &lt;/li&gt; &lt;li&gt;Binary &lt;/li&gt; &lt;li&gt;Codec &lt;/li&gt; &lt;li&gt;Dynamic &lt;/li&gt; &lt;li&gt;Element &lt;/li&gt; &lt;li&gt;Function &lt;/li&gt; &lt;li&gt;Graph &lt;/li&gt; &lt;li&gt;Hashmap &lt;/li&gt; &lt;li&gt;Iteration &lt;/li&gt; &lt;li&gt;Jump &lt;/li&gt; &lt;li&gt;Kernel &lt;/li&gt; &lt;li&gt;List &lt;/li&gt; &lt;li&gt;Monotonic &lt;/li&gt; &lt;li&gt;Network &lt;/li&gt; &lt;li&gt;Operating &lt;/li&gt; &lt;li&gt;Partition &lt;/li&gt; &lt;li&gt;QuickSort &lt;/li&gt; &lt;li&gt;Redundancy &lt;/li&gt; &lt;li&gt;Scheduler &lt;/li&gt; &lt;li&gt;Tree &lt;/li&gt; &lt;li&gt;Unionfind &lt;/li&gt; &lt;li&gt;Vertex &lt;/li&gt; &lt;li&gt;Wiki &lt;/li&gt; &lt;li&gt;x86 &lt;/li&gt; &lt;li&gt;YACC &lt;/li&gt; &lt;li&gt;Zero-based &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="coders"&gt;Coders&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Application &lt;/li&gt; &lt;li&gt;Buggy &lt;/li&gt; &lt;li&gt;Code &lt;/li&gt; &lt;li&gt;Docker &lt;/li&gt; &lt;li&gt;Ecosystem &lt;/li&gt; &lt;li&gt;Framework &lt;/li&gt; &lt;li&gt;Git &lt;/li&gt; &lt;li&gt;Hacker &lt;/li&gt; &lt;li&gt;I=i+1 &lt;/li&gt; &lt;li&gt;JSON &lt;/li&gt; &lt;li&gt;Keyboard &lt;/li&gt; &lt;li&gt;Linux &lt;/li&gt; &lt;li&gt;Manager &lt;/li&gt; &lt;li&gt;Namespace &lt;/li&gt; &lt;li&gt;Offer &lt;/li&gt; &lt;li&gt;Programmer &lt;/li&gt; &lt;li&gt;Quality &lt;/li&gt; &lt;li&gt;Recruiter &lt;/li&gt; &lt;li&gt;SanFrancisco &lt;/li&gt; &lt;li&gt;Trace &lt;/li&gt; &lt;li&gt;UnitTest &lt;/li&gt; &lt;li&gt;Viral &lt;/li&gt; &lt;li&gt;WebService &lt;/li&gt; &lt;li&gt;XML &lt;/li&gt; &lt;li&gt;YCombinator &lt;/li&gt; &lt;li&gt;Zombie &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/alphabets.html" rel="alternate"/>
        <summary type="text">
            The NATO phonetic alphabet if it were written by...
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/readings.html
        </id>
        <title type="text">
            Reading List
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="haskell-garbage-collection"&gt;Haskell Garbage Collection&lt;/h1&gt; &lt;p&gt;Functional programming used to have a bad reputation of being slow mostly due to garbage-collection. The Haskell garbage-collector (GC) actually has received some care and a number of options or programming constructs allow to reduce GC pause times.&lt;/p&gt; &lt;h2 id="theory"&gt;Theory&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/gen-gc-for-haskell.pdf"&gt;Generational GC For Haskell&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://simonmar.github.io/posts/2015-07-28-optimising-garbage-collection-overhead-in-sigma.html"&gt;Optimising GC Overhead&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://simonmar.github.io/bib/exploringbarrier04_abstract.html"&gt;Incremental GC&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://wiki.haskell.org/GHC/Memory_Management"&gt;GHC Memory management&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.well-typed.com/blog/2018/05/ghc-special-gc-objects/"&gt;GHC Special Objects&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="hands-on-optimization"&gt;Hands-On Optimization&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://donsbot.wordpress.com/2008/05/06/write-haskell-as-fast-as-c-exploiting-strictness-laziness-and-recursion/"&gt;Writing Fast Haskell&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://chrisdone.com/posts/fast-haskell-c-parsing-xml#the-dom-speed"&gt;Fast XML parser&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/haskell-perf/checklist"&gt;Performance Checklist&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="real-world-reports"&gt;Real-World Reports&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/13cpm3/waiting_for_garbage_collection_can_kill/"&gt;Parallelism and GC&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/5g8nd0/golangs_realtime_gc_in_theory_and_practice_from/"&gt;Pushers moving away from Haskell to Go for GC reasons&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/1kcce9/haskell_is_not_real_time_ready_yet/"&gt;Is Haskell real-time ready yet?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="systems"&gt;Systems&lt;/h1&gt; &lt;p&gt;There always is a host of interesting things to learn by studying complicated systems.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://aosabook.org/en/index.html"&gt;The Architecture of Open Source Applications&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://www.redbook.io/"&gt;Readings in db systems&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://cstack.github.io/db_tutorial/"&gt;How does a database work?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="optimization"&gt;Optimization&lt;/h1&gt; &lt;p&gt;It’s a bit harder to find good blog-style material on &lt;a href="/hashtags/optimization.html"&gt;&lt;span class="hashtag" data-hashtag="optimization"&gt;#optimization&lt;/span&gt;&lt;/a&gt; topics. Besides &lt;a href="/topics/optimization.html"&gt;articles on this site&lt;/a&gt; here are some links.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/institute-for-data-systems-and-society/ids-338j-multidisciplinary-system-design-optimization-spring-2010/index.htm?utm_source=OCWDept&amp;amp;utm_medium=CarouselSm&amp;amp;utm_campaign=FeaturedCourse"&gt;Multidisciplinary optimization&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://matthewcrews.com/blog/2020/12/2020-12-21/"&gt;Maximizing profitability of inventory&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="static-and-personal-site-technology"&gt;Static and personal site technology&lt;/h1&gt; &lt;p&gt;If you read &lt;a href="/how-this-blog-works.html"&gt;how this blog is built&lt;/a&gt;, you’ll figure out that I have some affection for personal and personalized websites. Thus I collect (do not hesitate to send yours to me) other viewpoints on how they built their website.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://j3s.sh/thought/my-website-is-one-binary.html"&gt;My Website is one binary&lt;/a&gt; by jes &lt;/li&gt; &lt;li&gt;XHTMLBoy’s &lt;a href="https://xhtmlboi.github.io/articles/yocaml.html"&gt;Website recipe&lt;/a&gt; &lt;/li&gt; &lt;li&gt;A list of &lt;a href="https://brainbaking.com/post/2022/04/cool-things-people-do-with-their-blogs/"&gt;Cool things people do with their blogs&lt;/a&gt; by Wouter Groeneveld &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="misc"&gt;MISC&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://gist.github.com/lucasdicioccio/256f854a17320b13856b"&gt;gilded tulip&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/readings.html" rel="alternate"/>
        <summary type="text">
            A collection of links and readings.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/gallery-001.html
        </id>
        <title type="text">
            Rolling gallery
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="photos"&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:200px; height:300px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-01-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-01-smol.jpeg" loading="lazy" width=200 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc du Luxembourg&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:200px; height:300px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-19-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-19-smol.jpeg" loading="lazy" width=200 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc du Luxembourg&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:200px; height:300px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-14-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-14-smol.jpeg" loading="lazy" width=200 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc du Luxembourg&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:300px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-15-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-15-smol.jpeg" loading="lazy" width=300 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc du Luxembourg&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-02-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-02-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc de Sceaux&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-05-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-05-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Asleep&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-11-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-11-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Paris XIV&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-18-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-18-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc de Sceaux&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:450px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-04-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-04-smol.jpeg" loading="lazy" width=300 height=450&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc Montsouris&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:350px; height:525px; border: 15px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-12-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-12-smol.jpeg" loading="lazy" width=350 height=525&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc Montsouris&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:400px; height:250px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-03-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-03-smol.jpeg" loading="lazy" width=400 height=250&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Paris V&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:400px; height:250px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-13-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-13-smol.jpeg" loading="lazy" width=400 height=250&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Paris XIV&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-06-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-06-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc Montsouris&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:400px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-10-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-10-smol.jpeg" loading="lazy" width=300 height=400&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Paris V&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:400px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-17-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-17-smol.jpeg" loading="lazy" width=300 height=400&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;La Baule&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-08-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-08-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;La Baule&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-16-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-16-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc de Sceaux&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-07-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-07-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Parc Montsouris&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:200px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-09-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-09-smol.jpeg" loading="lazy" width=300 height=200&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;Chambery&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:300px; height:300px; border: 10px solid #bbb"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-20-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-20-smol.jpeg" loading="lazy" width=300 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:270px; height:270px; border: 30px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-21-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-21-smol.jpeg" loading="lazy" width=270 height=270&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class="photo"&gt; &lt;figure class="photo-main"&gt; &lt;div class="photo-div" style="width:400px; height:300px; border: 10px solid white"&gt; &lt;a target="_blank" href="/images/thumb-gallery001-22-smol.jpeg"&gt; &lt;img src="/images/thumb-gallery001-22-smol.jpeg" loading="lazy" width=400 height=300&gt; &lt;/a&gt; &lt;/div&gt; &lt;hr class="photo-title-separator" /&gt; &lt;p class="photo-title"&gt;&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/gallery-001.html" rel="alternate"/>
        <summary type="text">
            A rolling photo gallery with mostly portraits.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/talks.html
        </id>
        <title type="text">
            Talks and Docs
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;I am a bit more quiet now that I have a daughter and now that the pandemic started devastating the world but I’ve done quite a few presentations in the past. I will probably blog more in the future. In addition I’ve added a link of document templates that you may find useful.&lt;/p&gt; &lt;p&gt;If you feel interested in some &lt;a href="/hashtags/talks.html"&gt;&lt;span class="hashtag" data-hashtag="talks"&gt;#talks&lt;/span&gt;&lt;/a&gt; becoming articles (or, on the opposite and article becoming a talk), please enquire.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="haskell-and-functional-programming"&gt;Haskell and Functional Programming&lt;/h2&gt; &lt;p&gt;Most of my talks spree was while actively learning and applying Haskell to real-world problems (in a sense I still do but not in a professional context).&lt;/p&gt; &lt;h3 id="the-haskell-pyramid"&gt;The Haskell Pyramid&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A recurring talk I gave (and other people did as well) to explain why Haskell seems so mystic to bystanders. It sort of diffused and has inspired a few people to detail what further better than I would.&lt;/p&gt; &lt;p&gt;&lt;em&gt;gist&lt;/em&gt; You can be productive in Haskell with ‘simple haskell’, but no-one is discussing ‘simple haskell’ on the social networks.&lt;/p&gt; &lt;p&gt;&lt;em&gt;related&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;not affiliated&lt;/em&gt; &lt;a href="https://www.reddit.com/r/haskell/comments/gwkn79/question_regarding_the_haskell_pyramid/"&gt;A reddit post asking what is the base of the pyramid&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;em&gt;not affiliated&lt;/em&gt; a proposition of a &lt;a href="https://nicksanford.io/posts/haskell-pyramid/"&gt;Haskell pyramid&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;em&gt;not affiliated&lt;/em&gt; a proposition for &lt;a href="https://gilmi.me/blog/post/2021/03/16/bottom-haskell-pyramid"&gt;the bottom of the Haskell pyramid&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1bSANLVcGnfVIFjicj81Uo_MYQhsF0FZi_EF-NEKFecE/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="functional-is-a-direction"&gt;Functional is a direction&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;gist:&lt;/em&gt; If you plot the programming languages on an X/Y graph with &lt;code&gt;X&lt;/code&gt; as the quality of the local reasoning and &lt;code&gt;Y&lt;/code&gt; the level of formalism you use. You’ll notice that languages tend to appear and move to the upper-right direction &lt;span class="emoji" data-emoji="arrow_upper_right"&gt;↗️&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1VkRkSgI6PTRli8j8SR0cASJEOLz8zUhMaV3Z9ItsMYE/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="haskell-teachings-applied-to-architecture"&gt;Haskell teachings applied to architecture&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; I am a software architect and I’ve designed pretty big systems. Haskell’s closeness to mathematical abstractions are useful to think. For instance, the duality between &lt;code&gt;sum-types&lt;/code&gt; and &lt;code&gt;product-types&lt;/code&gt; is a &lt;strong&gt;duality&lt;/strong&gt; you will find between &lt;code&gt;producers&lt;/code&gt; and &lt;code&gt;consumers&lt;/code&gt; services in large companies.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1HinBAMjkL5qNSRku8XntAhkniRbelLHQcwLyUyPr2X8/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="prodapi"&gt;ProdAPI&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; Slides showing how ProdAPI modularizes a service application like in web-service architectures.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1xpvw8bFWhA4mw4JJVc6ywYimU7O50oQ-exApyHyzmrw/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;github&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="grpc-native"&gt;gRPC native&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A talk I gave to introduce my gRPC library during Zurihac2020.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1MS7TxkpnSsorzbgg25boSZzOZr9iwPpXVh2Bcygb5JU/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/haskell-grpc-native"&gt;github&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="http2-client"&gt;http2-client&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A talk I gave to introduce my http2-client library at a Haskell-Paris Meetup.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1qD9Q2zrSMf0MsP4siWlbr7n7V78vZUggmZMtdv7Qu1U/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/lucasdicioccio/http2-client"&gt;github&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="composing-web-apis-with-servant"&gt;Composing Web APIs with Servant&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A talk I gave to introduce the amazing Servant library to write web-API and clients at a While42-London. It’s a bit lengthy as it tries to share my concept of ‘composition’. That said, the visualizations/animations of how to match ‘types together’ in a Servant API can be helpful. I guess most of the content is still up to date (early 2022) because the Servant concept are rock solid.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/110Xl7ZVKWEipc6jRbkIFye2Htp1VEJ-DAjRFK_s6Frg/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="an-introduction-to-functional-programming"&gt;An introduction to functional programming&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A talk I gave at Veepee to explain FP basics. I got plenty of appraisal from colleagues at the time, so I guess it is a decently-good starting material to get a feeling of things like &lt;strong&gt;immutability&lt;/strong&gt; , &lt;strong&gt;map&lt;/strong&gt; and &lt;strong&gt;fold&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1R5ODUBOtCxIbLBD_0xUG3prHQ6-OLyAEMwWVCIp5YxE/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="les-monades-en-comptant-sur-ses-doigts"&gt;Les monades en comptant sur ses doigts&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A monad-tutorial I gave at at Haskell-Paris meetup. Only the title of this talk is in French.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1qAcG-zfxQKH0EmYzl5MVj0Z_BAWbuRrbMsQI6L67jPc/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h2 id="minizinc-and-constraint-programming"&gt;MiniZinc and Constraint-Programming&lt;/h2&gt; &lt;p&gt;I have fallen in love with modeling and optimizing engineering (but not only) problems. You will likely see Alloy-content pop up at some point as well. &lt;a href="/hashtags/optimization.html"&gt;&lt;span class="hashtag" data-hashtag="optimization"&gt;#optimization&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id="constraint-programming-with-minizinc"&gt;Constraint-Programming with MiniZinc&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; A constraint-programming introduction I gave for VPTech. We also solve the cabbage-goat-wolf problem in MiniZinc.&lt;/p&gt; &lt;p&gt;&lt;em&gt;related&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;not affiliated&lt;/em&gt; &lt;a href="https://www.sasnauskas.eu/solving-river-crossing-puzzles-with-minizinc/"&gt;solving river crossing puzzles&lt;/a&gt; , my talk inspired Raimondas Sasnauskas to write down the solution to the cabbage-goat-wolf problem I used towards the later parts of the talk. His article is a good tutorial. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1Ze7jR6VbFNxLcvVYz9xmDfWKfXbgjUXpsH98doDB0lE/edit?usp=sharing"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kiX1FOw1GUU"&gt;youtube recording&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h2 id="architecture-and-site-reliability-engineering"&gt;Architecture and Site-Reliability Engineering&lt;/h2&gt; &lt;p&gt;I was an &lt;a href="/hashtags/SRE.html"&gt;&lt;span class="hashtag" data-hashtag="SRE"&gt;#SRE&lt;/span&gt;&lt;/a&gt; in one of the most hectic team at Google. Add this my especially-bad luck and one could say I’ve handled quite a lot of incidents. Then I’ve been an Architect in a pretty large company with a lot of complex business processes, a good amount of old and poorly-understood code where challenges abund.&lt;/p&gt; &lt;h3 id="aborder-la-production-comme-un-sre-fr"&gt;Aborder la production comme un SRE &lt;span class="emoji" data-emoji="fr"&gt;🇫🇷&lt;/span&gt;&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;&lt;em&gt;summary&lt;/em&gt; Trying to convey what the SRE approach is. When I gave this talk, few people were interested in the term SRE. In France we alas mostly renamed Devops but here in this &lt;strong&gt;recording in French&lt;/strong&gt; I explain what the SRE approach and mindset is in the place I’ve experienced it.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1sG5635YGkczUxwqNm1d7CsOPIzBaMQdjgpuVlS6kMG0/edit#slide=id.g1e386fa4fb_0_0"&gt;google slides&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lSqyeckTLl8"&gt;youtube recording&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="post-mortem-template"&gt;Post-Mortem Template&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;A good post-mortem takes time to write but it’s a goldmine of information. I’ve written this template after a request from a friend who had trouble going past the ‘incident report’ that was only scratching the surface. So I wrote a template of Post-Mortem with some text of a pseudo story of things that went wrong.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/document/d/1c48bRufHkWmSTUZv6RJuDQJOFXLRuV_TRZTX28XLCh4/edit?usp=sharing"&gt;google doc&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="design-doc-template"&gt;Design-Doc Template&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;A template of Design-Doc. A number of sections may be superfluous depending on how fast. But what is key (besides motivating the problem you are trying to solve) is to properly define the axes of analysis from the proper solution-analysis.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.google.com/document/d/1roAP7yafVq_ZwO7F66Q5T_gS_ZElWf3aYBPHooJkmU0/edit#"&gt;google doc&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3 id="vacat-page-template"&gt;Vacat Page Template&lt;/h3&gt; &lt;div class="talk"&gt; &lt;p&gt;A Vacat Page is a page intentionally left blank. Good vacat pages are hard to find. I’ve taken the freedom to plagiarize a vacat page from a book I paid 90euros.&lt;/p&gt; &lt;p&gt;&lt;em&gt;links&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="/page-intentionally-left-blank.html"&gt;vacat page template&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script type="text/javascript"&gt; (function(){ const xs = [... document.getElementsByTagName("h3")]; xs.forEach((x) =&gt; { const title = x.innerHTML ?? 'about your blog'; const subject = `About your blog: ${title}`; const elt = document.createElement("a"); elt.innerHTML = " 📧"; elt.setAttribute("class", "enquire-link") elt.setAttribute("href", `mailto:lucas@dicioccio.fr?subject=${subject}`); x.appendChild(elt); }); })() &lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/talks.html" rel="alternate"/>
        <summary type="text">
            A list of slides (with recording links when available) for presentations I gave. Also some template documents for architecture/devops.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/todo-list.html
        </id>
        <title type="text">
            todo list
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h2 id="code"&gt;code&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;[x] open source the blog engine &lt;/li&gt; &lt;li&gt;[x] DNS server &lt;/li&gt; &lt;li&gt;[x] ACME client for lets encrypt &lt;/li&gt; &lt;li&gt;[ ] PG api for comments and stats and serving stuff &lt;/li&gt; &lt;li&gt;[ ] some collectors of public info &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="ukulele"&gt;ukulele&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;[x] put daughter to bed with music &lt;/li&gt; &lt;li&gt;[x] participate to an online contest &lt;/li&gt; &lt;li&gt;[x] play at the daycare &lt;/li&gt; &lt;li&gt;[ ] play at a concert &lt;/li&gt; &lt;li&gt;[ ] record some song &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="photo"&gt;photo&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;[x] gallery for 2022 &lt;/li&gt; &lt;li&gt;[ ] gallery for 2023 &lt;/li&gt; &lt;li&gt;[ ] participate to a contest (contestant) &lt;/li&gt; &lt;li&gt;[x] participate to a contest (intendant) &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/todo-list.html" rel="alternate"/>
        <summary type="text">
            A personal public-achievements and todo list, for this blog or other things of life.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/about-me.html
        </id>
        <title type="text">
            About me
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h2 id="contacts"&gt;Contacts&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;lucas[@]dicioccio[dot]fr &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="experience"&gt;Experience&lt;/h2&gt; &lt;p&gt;I’ve been around quite some time and I have seen and taken a variety of roles. I’ve gone through a PhD programme, enjoyed it a lot but really preferred the materialistic benefits of higher-paying jobs than what French Academia has to offer. I’ve worked on small and extremely-large systems, microteams to mega-corp. I’ve done research, development, and operational work and found an interest in each of these fields.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;current&lt;/strong&gt; First hire at &lt;a href="https://www.echoeshq.com/"&gt;Echoes&lt;/a&gt; &lt;/li&gt; &lt;li&gt;Architect at &lt;a href="https://veepee.fr"&gt;Veepee&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="/hashtags/SRE.html"&gt;&lt;span class="hashtag" data-hashtag="SRE"&gt;#SRE&lt;/span&gt;&lt;/a&gt; at &lt;a href="https://www.google.com"&gt;Google&lt;/a&gt; London &lt;/li&gt; &lt;li&gt;Early &lt;a href="/hashtags/engineer.html"&gt;&lt;span class="hashtag" data-hashtag="engineer"&gt;#engineer&lt;/span&gt;&lt;/a&gt; at &lt;a href="https://scaleway.com/"&gt;Scaleway&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="/hashtags/PhD.html"&gt;&lt;span class="hashtag" data-hashtag="PhD"&gt;#PhD&lt;/span&gt;&lt;/a&gt; Student at &lt;a href="https://www.sorbonne-universite.fr/"&gt;UPMC Sorbonne Universités&lt;/a&gt; / &lt;a href="https://www.technicolor.com/"&gt;Technicolor&lt;/a&gt; &lt;/li&gt; &lt;li&gt;Break-year at PurpleLabs (became &lt;a href="https://connect.myriadgroup.com/"&gt;Myriad Group&lt;/a&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Besides, you’ll find a number of &lt;a href="/hashtags/talks.html"&gt;&lt;span class="hashtag" data-hashtag="talks"&gt;#talks&lt;/span&gt;&lt;/a&gt;, presentation, and document templates for tech leaders and SREs on my &lt;a href="/talks.html"&gt;Talks page&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="personal"&gt;Personal&lt;/h2&gt; &lt;p&gt;My name is Lucas DiCioccio. I prefer to define myself as a scientist/engineer generalist. However I lean and find creative ways to apply advanced techniques to software engineering. I am also a learning-dad and an hobbyist photographer.&lt;/p&gt; &lt;h2 id="automated-selfie"&gt;Automated selfie&lt;/h2&gt; &lt;p&gt;I now automatically generate a selfie sometimes when I update this website:&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/out/about-me.cmark__latest-selfie.jpg" alt="selfie" /&gt;&lt;/p&gt; &lt;h2 id="how-to-pronounce-my-last-name"&gt;How to pronounce my last name&lt;/h2&gt; &lt;p&gt;Apparently someone made a YouTube video to teach how to pronounce my last name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=uTA5aJtsIx4"&gt;how to pronounce DiCioccio&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/about-me.html" rel="alternate"/>
        <summary type="text">
            I am Lucas DiCioccio, a scientist and engineer. I apply modern techniques to engineering and lead #teams to deliver successful results.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/tips.html
        </id>
        <title type="text">
            Some tips
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h2 id="linux"&gt;linux&lt;/h2&gt; &lt;h3 id="screencast-to-mp4-in-ubuntu"&gt;screencast to mp4 in Ubuntu&lt;/h3&gt; &lt;p&gt;If you record your screen with &lt;code&gt;(ctrl+shift+alt+R)&lt;/code&gt; in Ubuntu, you’ll get a &lt;strong&gt;webm&lt;/strong&gt; file, GitHub, iPhones all want &lt;strong&gt;mp4&lt;/strong&gt;. So you need to convert from webm to mp4.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ffmpeg&lt;/code&gt; command allows such a conversion. As a bonus, Ubuntu’s file navigator allows to have some right-click scripts shortcuts.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="va"&gt;path&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;$1&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;ffmpeg&lt;/span&gt; &lt;span class="at"&gt;-y&lt;/span&gt; &lt;span class="at"&gt;-i&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="va"&gt;${path}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="va"&gt;${path}&lt;/span&gt;&lt;span class="st"&gt;.mp4&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;notify-send&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;converted &lt;/span&gt;&lt;span class="va"&gt;${path}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You can benefit from contextual menu in Ubuntu’s file navigator. If you drop the script at a special path like &lt;code&gt;~/.local/share/nautilus/scripts/ffmpeg-convert-to-mp4&lt;/code&gt; and do not forget to make it executable with &lt;code&gt;chmod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;As an illustration, you can see a demo screencast showing a conversion to mp4 of the demo screencast.&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/convert-screencast.mp4" type="video/mp4"&gt; &lt;/video&gt; &lt;h3 id="debian-qemu-serial"&gt;debian qemu serial&lt;/h3&gt; &lt;p&gt;Say you have an &lt;code&gt;.iso&lt;/code&gt; and would like to to nasty things with it, like enable serial console for &lt;code&gt;qemu&lt;/code&gt;. I needed that a while back and found it so hard to collect the right information that I’ve taken notes I swear I never want to lose.&lt;/p&gt; &lt;ol start="0"&gt; &lt;li&gt;mount the existing .iso in loop mode on a local dir &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-console"&gt;mkdir original mount -o loop $ISO original/ &lt;/code&gt;&lt;/pre&gt; &lt;ol&gt; &lt;li&gt;copy files from local dir to new dir with &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-console"&gt;mkdir new-iso rsync -a -H --exclude=TRANS.TBL original new-iso umount original &lt;/code&gt;&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;add a serial to &lt;code&gt;isolinux.cfg&lt;/code&gt; precisely: at the beginning of &lt;code&gt;isolinux/isolinux.cfg&lt;/code&gt; (1st line after comment) &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt; console serial 0 9600 0 &lt;/code&gt;&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;add a console to &lt;code&gt;txt.cfg&lt;/code&gt; on the kernel parameter append line &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code&gt; console=ttyS0,9600n8 &lt;/code&gt;&lt;/pre&gt; &lt;ol start="4"&gt; &lt;li&gt;regenerate md5 files inside ./new-iso &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-console"&gt;cd ./new-iso md5sum `find -follow -type f` &amp;gt; md5sum.txt &lt;/code&gt;&lt;/pre&gt; &lt;ol start="5"&gt; &lt;li&gt;build a bootable .iso from all this &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-console"&gt;genisoimage -o $NEWISO -r -J -no-emul-boot -boot-load-size 4 -boot-info-table -b isolinux/isolinux.bin -c isolinux/boot.cat ./new-iso &lt;/code&gt;&lt;/pre&gt; &lt;ol start="7"&gt; &lt;li&gt;start a qemu, pay attention to the &lt;code&gt;-serial&lt;/code&gt; argument &lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-console"&gt;qemu-img create -f qcow2 $IMG 5G qemu-system-x86_64 -nographic \ -m 512 \ -boot d \ -cdrom $NEWISO \ -hda $IMG \ -serial chardev:serial0 \ -chardev socket,id=serial0,path=$UNIXSOCKET,server,nowait \ -net nic,macaddr=52:54:11:22:33:01 \ -net tap,ifname=tap0,script=no,downscript=no minicom -D unix\#$UNIXSOCKET &lt;/code&gt;&lt;/pre&gt; &lt;h2 id="postgrest-table"&gt;postgrest-table&lt;/h2&gt; &lt;p&gt;Even if I built Postgrest-Table (an UI for PostgREST) I sometimes need to re-learn how to do stuff.&lt;/p&gt; &lt;h3 id="bookmarklet-link"&gt;bookmarklet link&lt;/h3&gt; &lt;p&gt;The bookmarklet to save is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;javascript:location.href='https://postgrest-table.netlify.app?postgrest='+document.location.href; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then, from a &lt;code&gt;/&lt;/code&gt; endpoint of your PostgREST service, the bookmarklet will auto-fill the form for you.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/tips.html" rel="alternate"/>
        <summary type="text">
            A collection of tips that also serves as a personal cheat-sheet.
        </summary>
    </entry>
</feed>
