<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2022-09-14T12:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/always-refactoring.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-2]
        </title>
        <updated>
            2022-09-14T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class=".note"&gt; &lt;p&gt;This article is the second in a series of articles on refactoring.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;From a non-developer viewpoint, it may be hard to connect with developers who are &lt;strong&gt;always refactoring&lt;/strong&gt;. I wrote this article to fill a gap I noticed during multiple discussions with non-technical stakeholders: some stakeholders have the feeling that tech teams are “always refactorin’”. Depending on the type of relationships between developers and other roles, the question whether to refactor or not can become a point of acute tension.&lt;/p&gt; &lt;h1 id="refactoring-to-support-project-scope-changes"&gt;Refactoring to support &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; changes&lt;/h1&gt; &lt;p&gt;Let’s recollect what we introduced in the &lt;a href="/what-is-the-project-scope.html"&gt;previous article about project scopes&lt;/a&gt; and the &lt;a href="/scope-explorer.html"&gt;complementary toy-application&lt;/a&gt;. As software projects grow, we accumulate code to enable features.&lt;/p&gt; &lt;p&gt;When a new feature is required, we are faced with an easy decision: pause in-progress work and prioritize on new features or continue on what is in progress. Conversely, when a new technical or process requirement pops-up, we are faced with more difficult decisions: we need to revisit everything in scope that has been shipped already. A decision to implement or postpone is required for each individual feature already shipped and in scope. Typically, one can live with some gaps for some time (e.g., missing tests, hardcoded parameters, outdated libraries, manual approval in an otherwise automated process, un-even edge-case coverages for two flavors of a same system). However, at some point the infamous &lt;em&gt;technical debt&lt;/em&gt; weighs too much and a feature can be considered unfinished. In short, as requirements pile-up there is some risk that your &lt;strong&gt;effective coverage reduces even though the amount of delivered tasks increases&lt;/strong&gt;, an effect that I refer to as a &lt;em&gt;coverage cave-in effect&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-timeline.png" alt="scope can suffer from cave-in" /&gt;&lt;/p&gt; &lt;p&gt;Refactoring is an attempt at mitigating cave-ins for upcoming requirements. The mitigation can be either anticipated or reacted-upon. If you anticipated, you do not observe the “cave-in” gap but the totalled amount of refactoring work incurs some delay. If the refactoring work is reactive you get to do the same amount of work anyway, except that you do it while your effective coverage is reduced. Overall, engineers tend to like refactors: they will recognize the risks of cave-ins and will often express the need to “refactor first”. As refactor are pushed in the future engineers keep discussing the need to refactoring. When the refactoring starts, it takes longer than expected and leaves even more extra work. Overall, I have witnessed, and I can see a number of scenarios in which product managers grow the feeling that engineers are always refactoring.&lt;/p&gt; &lt;h2 id="refactoring"&gt;Refactoring&lt;/h2&gt; &lt;p&gt;Refactoring is a technical task and a technical challenge: change how a component operates without affecting the external behavior. People obsessed with “customer value” raise eyebrows because a refactor brings “no value” to a product. Pedantic engineers will note that &lt;strong&gt;business value is not only customer value&lt;/strong&gt;. Indeed, engineers do not refactor for the desire of challenges: engineers refactor to reach a more favorable state than from where they started.&lt;/p&gt; &lt;p&gt;Examples of goals for refactors are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;uniformize some idioms in a code-base so that (e.g., when merging two implementations from two different maturity levels a your product) &lt;/li&gt; &lt;li&gt;keep an acceptable pain-level for people who need to maintain or operate the system &lt;/li&gt; &lt;li&gt;prepare for planned ulterior scope changes (e.g., in order to internationalize a service) &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In the first example, the value resides in paying-up some “tech debt”. In the second example, the value is pairwise: liberate resources for higher-value tasks and improve the satisfaction of team members (employee churn is an active threat to teams’ success). Finally, the third example is merely time-shifting future work into the present, without changing much the actual customer value.&lt;/p&gt; &lt;p&gt;Among engineers, some purely-technical tasks like “changing the logging format” may not be recognized as “a honest to god refactor”. Somehow, as far as our discussion is concerned, and as far as engineer-product communication goes, the decisive characteristics we care about is the absence of customer-value. The “refactoring” label merely is a shorthand for how to classify this task: it takes work but if you are not an engineer you need not know how the sausage is made.&lt;/p&gt; &lt;p&gt;Misunderstanding the goal of a refactoring task may lead to some &lt;em&gt;breach of trust&lt;/em&gt; between product and engineering &lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt;. The main catch is: developers’ happiness and morale are part of their productivity and you have an incentive and some moral obligation to create virtuous cycles rather than self-defeating feedback loops.&lt;/p&gt; &lt;h1 id="i-believe-my-team-is-always-refactoring-what-should-i-do"&gt;I believe my team is always refactoring what should I do?&lt;/h1&gt; &lt;p&gt;Now that background is setup, let start the real discussion. You are in a frustrating situation where the team delivery feels slow, and engineers seem to do refactoring over refactoring.&lt;/p&gt; &lt;h2 id="first-is-it-really-true"&gt;First, is it really true?&lt;/h2&gt; &lt;p&gt;In all companies, you need to settle on some acceptable amount of technical work, which includes refactors. In a sense, it is the “cost of doing business”. A fork of accepted technical work varies from 20% to 50% of technical work . The proportion you observe should probably fluctuate within this range and could deviate more depending on the erratic aspects of companies’ timelines.&lt;/p&gt; &lt;p&gt;However, a team deviating for too long may be a reason for concern: too little technical work probably means you are post-poning tasks you should have done already, too much time spent on technical work may mean your team lacks purposeful tasks or maybe they are circling and figuring things out (in the latter case, they need hindsights from senior engineers/architects).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/always-refactoring-tunnel-01.jpeg" alt="technical work acceptable band" /&gt;&lt;/p&gt; &lt;p&gt;As illustrated in the above picture, if you plot the fraction of work spent along time, you should expect some team to stay in the 20-50% band. In this example, the green-plain line is okay, the two dashed-lines probably deserve some investigation. The 20%-50% bracket is more a rule of thumb speaking from experience (personal, colleagues, also a &lt;a href="https://twitter.com/lucasdicioccio/status/1568665141662851073"&gt;recent Twitter poll I made in preparation of this article&lt;/a&gt;) than anything.&lt;/p&gt; &lt;p&gt;One caveat here is that you need some fair assessment of how much engineer time is taken by refactorings. From experience, I’ve seen that it may be challenging for tech leaders to provide such a fair assessment. Without turning this post into some advertisment, &lt;a href="https://www.echoeshq.com/"&gt;my current company&lt;/a&gt; provides a service to solve this question among many other questions.&lt;/p&gt; &lt;p&gt;Now, assuming that you have legitimate concerns regarding some refactoring work, let’s discuss the &lt;em&gt;timing of refactoring&lt;/em&gt;. Then we’ll discuss avenues to challenge and &lt;em&gt;push back&lt;/em&gt; a team member who wants to refactor something when you think there are better things to do.&lt;/p&gt; &lt;h2 id="the-timing-of-the-refactoring-is-key"&gt;The timing of the refactoring is key&lt;/h2&gt; &lt;p&gt;Project planning, sprint sessions, and similar corporate ceremonies are venues where teams discuss the need for refactorings. Alas, no-one is encitivized to tell the truth in such ceremonies: time or complexity estimates always are fudged and a complex meta-game between makers and askers happens around roadmaps. Such ceremonies deserve better. If your teams are always refactoring, you have likely witness a heated discussion when a developer brings up a refactoring task. In this situation, it is a good idea to keep in mind that developers will bring up refactoring tasks for a reason, and in general to avoid some functional cave-in.&lt;/p&gt; &lt;p&gt;Refactorings exist mostly to prevent some form of looming or occurred functional cave-in. Thus you cannot get a lot of information by challenging “why” people refactoring. A more interesting characteristics for a refactor is the question of “when”. A refactor can be preliminary work, wrap-up work, or intermediary work.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As preliminary work&lt;/em&gt;. Most features benefit from chunking into many small tasks. Preliminary refactors (e.g., moving all functions into some common umbrella module) are easy to plan and scope ahead of time. Consider these as stepping stones reducing the risk of a particular delivery.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As wrap-up work&lt;/em&gt;. One may consider a feature unfinished from a technical standpoint while it is already delivering on a functional standpoint. It is common to deploy some Proof of Concept early to test a feature. These Proof of Concept often are “too large”. The hindsight gained from running a system is light shedding. Engineers will find flaws and limitations in their system that would have been better handled in other ways. I would advise budgetting some time to perform such wrap-up as engineers still have a lot of working knowledge of the code. On the opposite, moving onto to new features in a haste with no time to wrap-up is a longer-term risk.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As intermediary work&lt;/em&gt;. The fractal nature of projects’ scopes and the erratic nature of scope discovery ensure that hiccups occur. Some severe obstacle may pop-up while implementing some feature (e.g., a third-party API exhibits severe rate-limitations on an endpoint you used to rely on and you need to pass some cache in a whole slice of code, adapt tests and so on). You may not be aware of most of these refactors as small refactors occur as part of the normal flow of development. Incredible delays may occur when the larger system or infrastructure require changes. A way to rationalize these intermediary refactors is to consider them preliminary or wrap-up of some subtask.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Thus, in the bad cases, for one single feature, team members may argue three times in favour of refactoring. Given that many features are discussed in ceremonies, engineers may come across as people who are always refactoring.&lt;/p&gt; &lt;p&gt;At this point, I mostly gave arguments in favor of refactor: they tend to go in the right direction. The real issue of refactoring is that they take up time from other concerns. Thus, if you feel like your team is always refactoring, the main problem is the one of arbitraging against other topics. You have two main ways to reduce the “refactoring-tax”: one one hand you can push-back on refactoring, on the other hand you can reduce the prevalence of refactoring with some prevention.&lt;/p&gt; &lt;h2 id="preventing-refactorings"&gt;Preventing refactorings&lt;/h2&gt; &lt;p&gt;In an ideal world, you never have debates about refactoring because the team orchestrate development with a perfect context and good understanding of the situational challenges of the day. As a leader you need to be candidly honest about upcoming tasks and deadlines. Having an idea for a feature it’s not the same as having a customer request and it’s not the same as having twenty customer requests. Needing something for next week is not the same as needing it for next month nor is the same as potentially needing it.&lt;/p&gt; &lt;p&gt;Summarily, engineers need to gauge the amount of uncertainty you have with a feature. Of critical importance are the following characteristics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;whether the feature will be in active use or in potential use &lt;/li&gt; &lt;li&gt;whether a requirement is definite or a sketch of an idea &lt;/li&gt; &lt;li&gt;what is the freedom for digressing &lt;/li&gt; &lt;li&gt;what are the business gains and risks &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Having this information at hand helps engineers understand how to shape the delivery of the code and associated “non-functional requirements”. For instance, if a feature requires some good amount of data-crunching, a preliminary data-exploration phase is welcome to help understand where edge cases lurk. If the task requires a system and not just some code, extra monitoring, sometimes ad-hoc, will have to be built. If engineers understand the business opportunities and risks associated with a feature, they’ll be in better place to gauge how-much these “extras” are required.&lt;/p&gt; &lt;h2 id="pushing-back-on-refactorings"&gt;Pushing back on refactorings&lt;/h2&gt; &lt;p&gt;Having in mind that refactorings are mostly-positive for the health of a software. Senior engineers on a &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; may resent push backs and even identify such push-backs as a threat to the qualify of the system. Therefore, a goal to keep in mind is not to say “no” to a refactor. Rather, a productive conversation seeks a good &lt;a href="/hashtags/tradeoff.html"&gt;&lt;span class="hashtag" data-hashtag="tradeoff"&gt;#tradeoff&lt;/span&gt;&lt;/a&gt; for every party.&lt;/p&gt; &lt;p&gt;There are a few avaialble directions to tackle a “refactor-or-not” discussion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Bluff&lt;/em&gt; it out. Bluffing is a good way to lose trust from your colleagues. You’ll come across someone who is dishonest if you bluff without success to celebrate aside. Some bluffing techniques are along delaying to improve the understanding of the system you want to refactor, or some planned work that will make the to-be-refactored system obsolete.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Clarify&lt;/em&gt; whether the refactoring is a pure-technical change or whether the refactoring enables new features. Sometimes refactoring is an enabler for pushing more feature (e.g., when you have data to filter/sort by a set of fixed criteria and suddenly it’s better to change some querying-scheme such as supporting “arbitrary” and likely-requested future criterias). This is the best situation as you’ll learn better what are/are-not low-hanging fruit features.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Characterize&lt;/em&gt; qualitatively and if possible quantitatively the friction induced by the absence of refactoring. You should be able to tell if the refactoring specifically adress the pain point. You should understand whether the gain is on the long-term or on the short-term. Maybe a piece of code is garbage, but is not touched very often leading to “one horrible day every quarter”, which may be acceptable pain.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Chunk&lt;/em&gt;. Like most software endeavours, it’s better to split refactoring in consecutive well-defined chunks. Often, one can split and time-box the refactoring effort: for instance, do some code re-organization in a first part then apply fundamental changes in a second part. If you frame a long-refactor as a low-risk migration tasks spread over weeks you also train your team for more dangerous and longer-to-rollout migrations. The risk here is that being low-ROI the task never finishes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In summary, you do not have a large number of options to push back on refactorings. Bringing more people on the team can help with a punctual increase in work. Oftentimes you’ll have a better luck ensuring the overall team momentum is maintained.&lt;/p&gt; &lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt; &lt;p&gt;Cautionary tale: challenging whether a refactoring is necessary or not is a sure-fire way to sow dissent and lose momentum. If you’ve read my long article on &lt;a href="/tactical-projects.html"&gt;successful tactical projects&lt;/a&gt;, you’ll know how much I care about momentum.&lt;/p&gt; &lt;p&gt;In general you should pay attention to functional cave-in and anticipate when your project will go sideways. Sometimes a business-requirement may ask for technical changes throughout the project (for instance, data-modeling changes incur verification on already-shipped code).&lt;/p&gt; &lt;p&gt;Allocate a fair amount of work onto technical tasks. Consider that purely-technical work is part of the cost of doing business. If engineers keep bringing-up refactorings over refactoring there are things you can do to push-back without too much trouble. Ask clarification around the functional benefits of the change, characterize with the team what pain-points the refactoring addresses, consider chunking the refactoring in a few steps to allievate only the most pressing pain-point.&lt;/p&gt; &lt;p&gt;If nothing works, consider the help from senior engineers (architects, lead-developers) because your team may lack from technical direction. Of course, if egos prevent your team members from seeking external consulting, you will have a hard time convincing them to change their way of doing thing.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/always-refactoring.html" rel="alternate"/>
        <summary type="text">
            I have ran into a number of product-owner puzzled by how often #developers in their team express a need to "refactor". Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article to demistify a bit the "always-refactoring team".
        </summary>
    </entry>
</feed>
