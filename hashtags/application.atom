<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2022-06-19T01:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/prometheus-monitor.html
        </id>
        <title type="text">
            Prometheus Monitor
        </title>
        <updated>
            2022-06-19T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Prometheus-monitor is a low-configuration web &lt;a href="/hashtags/application.html"&gt;&lt;span class="hashtag" data-hashtag="application"&gt;#application&lt;/span&gt;&lt;/a&gt;. Run Prometheus-Monitor to inspect data from services which expose metrics in the &lt;a href="https://prometheus.io/"&gt;Prometheus-format&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="intended-use-cases"&gt;Intended use cases&lt;/h1&gt; &lt;p&gt;Whether you are a developer running software locally or an &lt;a href="/hashtags/SRE.html"&gt;&lt;span class="hashtag" data-hashtag="SRE"&gt;#SRE&lt;/span&gt;&lt;/a&gt; investigating production hiccups, you sometimes need to inspect how a specific job behaves.&lt;/p&gt; &lt;p&gt;If you organization is mature, services probably provide logs and metrics that you collect and expose in a dashboard. In some situations, however, such platforms may feel too limited or too vast. In particular, monitoring platforms are meant to aggregate information across jobs and across time, thus if your problem is to identify how a single job operates at short time-scale you may feel limited or overwhelmed.&lt;/p&gt; &lt;p&gt;If you are a developer you likely find that configuring a whole metrics and dashboard infrastrucure is too much overhead for development purposes. As a results, counters rarely get added and low-hanging fruits around monitoring are missed. Rightfully, developers find a low return-on-efforts to pro-actively add metrics while developing new features.&lt;/p&gt; &lt;p&gt;Prometheus-monitor’s primary goal is to address such niche use cases where you need or want to focus on individual jobs or individual metrics. In particular, it is useful when your diagnostics have little repetition from one situation to another: point it to &lt;code&gt;/metrics&lt;/code&gt; endpoints and you get some live graphs to see.&lt;/p&gt; &lt;h1 id="how-to-run-it"&gt;How to run it?&lt;/h1&gt; &lt;p&gt;Prometheus-Monitor is a primitive JavaScript application so requirements are pretty low. The main operational caveat is that if the JavaScript runs in a web-page: HTTP GET queries to Prometheus endpoints are subject to CORS authorizations. The recommended way to circumvent CORS is to install the application as a browser extension.&lt;/p&gt; &lt;h2 id="firefox-extension-recommended"&gt;Firefox extension (recommended)&lt;/h2&gt; &lt;p&gt;You can install the &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/prometheus-monitor/"&gt;Firefox extension&lt;/a&gt;. An icon appears in your extension toolbar, press-it and it will open a static HTML page with the application JavaScript.&lt;/p&gt; &lt;h2 id="directly-in-the-browser"&gt;Directly in the browser&lt;/h2&gt; &lt;p&gt;The application also runs on this page if you scroll a bit below. However since the JavaScript for the application runs in-browser and CORS-limitations apply (you can proxy around – see the Troubleshooting section at the bottom of this page for some help).&lt;/p&gt; &lt;h2 id="chrome-extension"&gt;Chrome extension&lt;/h2&gt; &lt;p&gt;The submission and review process for Chrome is longer than for Firefox. My extension is currently in review. Once (if) approved, the usage will be the same as for Firefox.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="metrics" class="application"&gt; &lt;script src="/js/prometheus-monitor.js"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h1 id="in-progress"&gt;in progress&lt;/h1&gt; &lt;h2 id="bugs"&gt;bugs&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;fix bug with zombie polling threads when we go ‘too fast’ &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="small-improvements"&gt;small improvements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;some tooltips on buttons &lt;/li&gt; &lt;li&gt;prevent/highlight/keep-around exporter sources when the panel is removed and zoomed metric exist &lt;/li&gt; &lt;li&gt;styling of labels &lt;/li&gt; &lt;li&gt;group-rows by metric-name in previews &lt;/li&gt; &lt;li&gt;add headers on ajax calls &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="large-improvements"&gt;large improvements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;chart more than a timeseries on a panel &lt;/li&gt; &lt;li&gt;add minimalistic functions that could translate to Prometheus (e.g., log, unit-changes) &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="troubleshooting-cors"&gt;Troubleshooting CORS&lt;/h1&gt; &lt;p&gt;The Prometheus project shows a &lt;a href="https://prometheus.demo.do.prometheus.io/"&gt;DEMO instance&lt;/a&gt; , do not hammer it please.&lt;/p&gt; &lt;h2 id="failed-to-fetch-an-url-that-works-from-my-browser-but-gives-cors-errors-in-the-console"&gt;‘Failed to fetch’ an URL that works from my browser, but gives CORS errors in the console&lt;/h2&gt; &lt;p&gt;You may want to use a so-called ‘CORS-proxy’ (i.e., an HTTP web proxy that adds CORS-authorization headers).&lt;/p&gt; &lt;h3 id="modify-your-code"&gt;modify your code&lt;/h3&gt; &lt;p&gt;If you can mod the binary you are running, the easiest way likely is to set a CORS-header allowing this page to get data on the metrics endpoint you want to probe.&lt;/p&gt; &lt;h3 id="open-proxies"&gt;open proxies&lt;/h3&gt; &lt;p&gt;You may find open-proxies but you have no way to tell what they will do with your in-flight requests: cacheing, rate-limitations, data-collection. Plus open-proxies will only be able to access public endpoints (i.e., not for dev environments).&lt;/p&gt; &lt;p&gt;I’ve found the &lt;a href="https://allorigins.win/"&gt;All Origins open proxy&lt;/a&gt; to work if you want to probe public endpoints (like the prometheus demo).&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;code&gt;https://api.allorigins.win/raw?url=https://prometheus.demo.do.prometheus.io/metrics&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id="run-the-proxy-locally"&gt;run the proxy locally&lt;/h3&gt; &lt;p&gt;If you shop around on GitHub you will find some solutions. For instance I’ve found &lt;a href="https://github.com/okfn/gobetween"&gt;GoBetween&lt;/a&gt; to work as claimed in the README. If you manage to run this package locally on port &lt;code&gt;3000&lt;/code&gt; you can try adding:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;code&gt;http://localhost:3000/pipe/https://prometheus.demo.do.prometheus.io/metrics&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id="serve-the-js-directly-from-your-endpoint"&gt;serve the JS directly from your endpoint&lt;/h3&gt; &lt;p&gt;This is the solution I take in &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;prodapi&lt;/a&gt;, just serve the &lt;a href="/js/prometheus-monitor.js"&gt;JavaScript&lt;/a&gt; file and include it in some HTML that you serve as well. Optionally, the HTML can have a div with ID &lt;code&gt;metrics&lt;/code&gt; to select the script insertion place.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="ot"&gt; id&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;metrics&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;script&lt;/span&gt;&lt;span class="ot"&gt; src&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;/js/prometheus-monitor.js&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;script&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You’ll need some CSS to style it, but this will come later (when I’m out of alpha mode).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/prometheus-monitor.html" rel="alternate"/>
        <summary type="text">
            A live Prometheus-endpoints monitor visualizer. If you are a developer running software locally or if you are an SRE investigating production hiccups, you sometime want to look at how one metric evolves in a specific job.
        </summary>
    </entry>
</feed>
