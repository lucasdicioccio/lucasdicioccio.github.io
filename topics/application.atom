<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2022-06-01T12:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/postgrest-table.html
        </id>
        <title type="text">
            PostgREST Table
        </title>
        <updated>
            2024-05-01T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="help-box"&gt; &lt;h1&gt;Everything happens on your browser&lt;/h1&gt; &lt;p&gt;PostgREST not only exposes data over REST entities, it also provides an OpenAPI description.&lt;/p&gt; &lt;p&gt;Postgrest-table lets your browser load the OpenAPI description of a PostgREST service. Plus, this page let your browser understands further the selector syntax that PostgREST expects.&lt;/p&gt; &lt;p&gt;All interactions between this page and your PosgtREST instances are done via your browser. Hence, this service does not intercept any data.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Three families of columns&lt;/h1&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;PostgREST exposes &lt;em&gt;main&lt;/em&gt;entities from PostgreSQL tables and views.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PostgREST provides some support for &lt;em&gt;embedding&lt;/em&gt; via auto-detected foreign-keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Finally, Postgrest-Table (this page) allows you to &lt;em&gt;compute&lt;/em&gt; extra columns directly on your browser with a limited expression language.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Each family of column comes with its own set of limitations:&lt;/p&gt; &lt;p&gt;Only &lt;em&gt;main&lt;/em&gt; and &lt;em&gt;embedded&lt;/em&gt; data are part of CSV exports as PostgREST is in charge of formatting the CSV.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Computed&lt;/em&gt; data can only reference &lt;em&gt;main&lt;/em&gt; columns or previously-defined &lt;em&gt;computed&lt;/em&gt; columns (a naive way to avoid circular definitions).&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Computed columns&lt;/h1&gt; &lt;p&gt;We provide a limited language. Heavier queries should be turned into SQL views and exposed via PostgREST.&lt;/p&gt; &lt;h4&gt;Primitives&lt;/h4&gt; &lt;pre class="code"&gt;"hello"&lt;/pre&gt; &lt;pre class="code"&gt;42.0&lt;/pre&gt; &lt;pre class="code"&gt;["a", "b", "c"]&lt;/pre&gt; &lt;pre class="code"&gt;{"name":"just", "lastname":"leblanc"}&lt;/pre&gt; &lt;h4&gt;References&lt;/h4&gt; &lt;pre class="code"&gt;$row-number&lt;/pre&gt; &lt;pre class="code"&gt;$field:"firstname"&lt;/pre&gt; &lt;pre class="code"&gt;$computed-field:"fullname"&lt;/pre&gt; &lt;h4&gt;Json Extraction&lt;/h4&gt; &lt;pre class="code"&gt;object-lookup($field:"some-json-object", "key", "default-value")&lt;/pre&gt; &lt;pre class="code"&gt;array-lookup($field:"some-json-array", 0, "default-value")&lt;/pre&gt; &lt;h4&gt;Strings and html-generation&lt;/h4&gt; &lt;pre class="code"&gt;concat($field:"firstname", " ", $field:"lastname")&lt;/pre&gt; &lt;pre class="code"&gt;concat("hello ", $computed-field:"fullname")&lt;/pre&gt; &lt;pre class="code"&gt;stringify(1.42)&lt;/pre&gt; &lt;pre class="code"&gt;stringify(true)&lt;/pre&gt; &lt;pre class="code"&gt;image(concat("https://somesite/", $field:"icon", ".png")&lt;/pre&gt; &lt;pre class="code"&gt;link(concat("https://somesite/", $field:"uuid", "/", stringify(round($field:"id")))&lt;/pre&gt; &lt;pre class="code"&gt;progressbar(42.0)&lt;/pre&gt; &lt;pre class="code"&gt;colordot($computed-field:"some_css_color")&lt;/pre&gt; &lt;h4&gt;Computation&lt;/h4&gt; &lt;pre class="code"&gt;negate(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;inverse(100.0)&lt;/pre&gt; &lt;pre class="code"&gt;product(1.2, 3.0, $field:"factor")&lt;/pre&gt; &lt;pre class="code"&gt;sum(1.2, product(1.2, 3.0))&lt;/pre&gt; &lt;pre class="code"&gt;round(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;ceiling(1.2)&lt;/pre&gt; &lt;h4&gt;Logic and branching&lt;/h4&gt; &lt;pre class="code"&gt;conj(true, true)&lt;/pre&gt; &lt;pre class="code"&gt;disj(false, true)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:eq, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;branch("some-fallback", predicate(:eq, $field:"xyz", 1.3), "xyz-is-1.3")&lt;/pre&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Charts&lt;/h1&gt; &lt;p&gt;We leverage Vega-Lite to generate charts. Features implementation and the styling are still rough.&lt;/p&gt; &lt;p&gt;A chart can display computed columns, however if you end-up doing that often you should consider working on your SQL views.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Bookmarklets&lt;/h1&gt; &lt;p&gt;This page will auto-load a PostgREST spec if provided a &lt;span class="code"&gt;?postgrest=$url&lt;/span&gt; query param in the URL.&lt;/p&gt; &lt;p&gt;As a result, you can create a smart-booklet to load &lt;em&gt;Postgrest-Table&lt;/em&gt; in your browser by bookmarking the following code: &lt;pre class="code"&gt;javascript:location.href='https://postgrest-table.netlify.app?postgrest='+document.location.href;&lt;/pre&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Troubleshooting&lt;/h1&gt; &lt;p&gt;Netlify, which hosts this page, enables HTTPS. Hence, if you point to a plain HTTP PostgREST instance, your browser will detect an insecure connection attempt from. You can bypass this limitation by deactivating mixed-content blocking (often clicking a shield/lock icon after a failed connection attempt). Of course, it is better to secure your PostgREST endpoints.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Roadmap&lt;/h1&gt; &lt;p&gt;Albeit best effort, you can poke around and observe when we provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;more primitives for computed computations&lt;/li&gt; &lt;li&gt;more charting-interactions&lt;/li&gt; &lt;li&gt;more FKs-interactions&lt;/li&gt; &lt;li&gt;more and polished filters for more types (dates, jsonb, arrays, fts)&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Credits&lt;/h1&gt; &lt;p&gt;Made with passion thanks to:&lt;/p&gt; &lt;ul class="dependencies"&gt; &lt;li&gt;&lt;a href="https://postgrest.org/"&gt;PostgREST&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.purescript.org/"&gt;PureScript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="kk"&gt;Halogen&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://vega.github.io/"&gt;Vega&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vega@5.19.1"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@5.0.0"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.15.1"&gt;&lt;/script&gt; &lt;script src="/js/postgrest-table.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/postgrest-table.html" rel="alternate"/>
        <summary type="text">
            A no-code PostgREST table UI. You can point your browser to any PostgREST instance to inspect and explore data. I use it almost daily while doing local development. I used to host this service on Netlify but I'm considering upgrading the style, adding features, and a backend to save configurations, which goes through a pass of upgrades and hosting changes.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/prometheus-monitor.html
        </id>
        <title type="text">
            Prometheus Monitor
        </title>
        <updated>
            2022-06-19T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="content"&gt; &lt;h1 id="about"&gt;about&lt;/h1&gt; &lt;p&gt;Prometheus-monitor is a low-configuration web application. Run Prometheus-Monitor to inspect data from services which expose metrics in the &lt;a href="https://prometheus.io/"&gt;Prometheus-format&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="news"&gt;news&lt;/h1&gt; &lt;h2 id="2024-05-21"&gt;2024-05-21&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Revamp of the Web UI.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;I’ve revamped the web interface with the wonderful &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt; CSS framework.&lt;/p&gt; &lt;h1 id="help"&gt;help&lt;/h1&gt; &lt;h2 id="intended-use-cases"&gt;Intended use cases&lt;/h2&gt; &lt;p&gt;Whether you are a developer running software locally or an &lt;a href="/hashtags/SRE.html"&gt;&lt;span class="hashtag" data-hashtag="SRE"&gt;#SRE&lt;/span&gt;&lt;/a&gt; investigating production hiccups, you sometimes need to inspect how a specific job behaves.&lt;/p&gt; &lt;p&gt;If you organization is mature, services probably provide logs and metrics that you collect and expose in a dashboard. In some situations, however, such platforms may feel too limited or too vast. In particular, monitoring platforms are meant to aggregate information across jobs and across time. Thus if your problem is to identify how a single job operates at short time-scale you may feel limited or overwhelmed.&lt;/p&gt; &lt;p&gt;If you are a developer you likely find that configuring a whole metrics and dashboard infrastrucure is too much overhead for development purposes. As a results, counters rarely get added and low-hanging fruits around monitoring are missed. Rightfully, developers find a low return-on-efforts to pro-actively add metrics while developing new features.&lt;/p&gt; &lt;p&gt;Prometheus-monitor’s primary goal is to address such niche use cases where you need or want to focus on individual jobs or individual metrics. In particular, it is useful when your diagnostics have little repetition from one situation to another: point it to &lt;code&gt;/metrics&lt;/code&gt; endpoints and you get some live graphs to see.&lt;/p&gt; &lt;h2 id="how-to-run-it"&gt;How to run it?&lt;/h2&gt; &lt;p&gt;Prometheus-Monitor is a JavaScript application running in a web-browser. As such the requirements on Prometheus-Monitor are pretty low. However, web-browsers are sanboxed and limit what queries a page can send. In our case, the caveat is that if the JavaScript runs in a web-page: HTTP GET queries to Prometheus endpoints are subject to CORS authorizations (this is the reason why I enable CORS on the /metrics endpoint of &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;prodapi&lt;/a&gt; applications). The recommended way to circumvent CORS is to install the application as a browser extension.&lt;/p&gt; &lt;h3 id="firefox-extension-recommended"&gt;Firefox extension (recommended)&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;note: I haven’t yet upgraded the extension to the new UI&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can install the &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/prometheus-monitor/"&gt;Firefox extension&lt;/a&gt;. An icon appears in your extension toolbar, press-it and it will open a static HTML page with the application JavaScript.&lt;/p&gt; &lt;h3 id="chrome-extension"&gt;Chrome extension&lt;/h3&gt; &lt;p&gt;The submission and review process for Chrome is longer than for Firefox. My extension is currently in review. Once (if) approved, the usage will be the same as for Firefox.&lt;/p&gt; &lt;h3 id="directly-in-the-browser-on-localhost-via-a-proxy"&gt;Directly in the browser on localhost via a proxy&lt;/h3&gt; &lt;p&gt;Albeit browsers typically disallow cross-origin calls on the Internet, you may get lucky with &lt;code&gt;/metrics&lt;/code&gt; pages running on you &lt;code&gt;localhost&lt;/code&gt;. Therefore: when developing locally you can use the web browser (my typical use case), or you can likely use install some form of proxy (running locally or allowing CORS).&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="metrics" class="application"&gt; &lt;script src="/js/prometheus-monitor.js"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/prometheus-monitor.html" rel="alternate"/>
        <summary type="text">
            A live Prometheus-endpoints monitor visualizer. If you are a developer running software locally or if you are an SRE investigating production hiccups, you sometime want to look at how one metric evolves in a specific job.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/scope-explorer.html
        </id>
        <title type="text">
            Scope explorer
        </title>
        <updated>
            2022-06-01T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;p&gt;This month I’m adventuring into a new way of telling stories. Specifically, I want to explore how &lt;em&gt;micro-applications&lt;/em&gt; can help convey some information.&lt;/p&gt; &lt;p&gt;This article consists mainly of an application with an interactive tutorial. The story we illustrate is from &lt;a href="/what-is-the-project-scope.html"&gt;previous article about the scope of projects&lt;/a&gt;, so make sure to scan through the article first.&lt;/p&gt; &lt;p&gt;In the future I’ll try to intersperse such micro-applications into articles. This first attempt taught me that my current default article layout is interacting a bit too-much with the application so far. As a result the application may not work nor render well on mobile. Also, I do not promise the code is bug-free, however the steps made in the interactive Tutorial work well at least. I apologize for such recklessness.&lt;/p&gt; &lt;p&gt;In general, feedback is highly appreciated as I need to calibrate how much time to budget on micro-applications versus textual content.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="scope-explorer-div"&gt; &lt;/div&gt; &lt;script type="text/javascript" src="/js/scope-explorer.js" async&gt;&lt;/script&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;h1 id="an-exercise-to-go-further"&gt;an exercise to go further&lt;/h1&gt; &lt;p&gt;As an exercise, at the end of the tutorial you could say that your application is now encoutering some success, in that case you need to be able to receive money. To receive money you’ll need some “Billing” feature(s). Have fun adding “Billing” as a feature, zooming-in and studying how to split the Billing-scope in sub-scopes.&lt;/p&gt; &lt;h1 id="help"&gt;help&lt;/h1&gt; &lt;h2 id="legend-for-edit-table"&gt;legend for: EDIT table&lt;/h2&gt; &lt;table class="legend"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; cell &lt;/th&gt; &lt;th&gt; status &lt;/th&gt; &lt;th&gt; details &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="table-cell state-done"&gt;&lt;/td&gt; &lt;td class="legend"&gt;done&lt;/td&gt; &lt;td class="legend"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-todo"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;intermediary node (computed)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-unexplored"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;leaf of scope tree&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-disagreement"&gt;&lt;/td&gt; &lt;td class="legend"&gt;in disagreement&lt;/td&gt; &lt;td class="legend"&gt;intermediary node is claimed done but internal status is not&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id="the-scope"&gt;the scope&lt;/h2&gt; &lt;p&gt;As you define a matrix of &lt;em&gt;tech steps&lt;/em&gt; by &lt;em&gt;features&lt;/em&gt; , the scope of your &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; grows.&lt;/p&gt; &lt;p&gt;If you zoom on a given tile (you over the mouse on a tile and press the 🔽 “zoom” button) then the scope displayed changes. You get prompted the whole path in your hierarchy, for instance &lt;p&gt;&lt;span&gt;&lt;button&gt;🔼&lt;/button&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="path-component"&gt; TechStepName :: FeatureName&lt;/span&gt;&lt;/span&gt;&lt;span class="path-component"&gt;🌐 global&lt;/span&gt;&lt;/p&gt;&lt;/p&gt; &lt;p&gt;As you press the &lt;button&gt;🔼&lt;/button&gt;, you navigate upward. When (and only when) you reach the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; the graphs are updated.&lt;/p&gt; &lt;h2 id="understanding-the-graphs"&gt;understanding the graphs&lt;/h2&gt; &lt;p&gt;The graphs represent the progress of the scope at the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; scope only.&lt;/p&gt; &lt;p&gt;All graphs start grayed out and represent a normalized value (i.e., the largest value of the whole series takes 100% of the height of the bar). Most recent values are on the right.&lt;/p&gt; &lt;p&gt;&lt;em&gt;scope&lt;/em&gt; is how many “tiles” there are in total&lt;/p&gt; &lt;p&gt;&lt;em&gt;delivery&lt;/em&gt; is how many “tiles” are claimed or effectively delivered (claimed correspond to the checkbox on the tile, effective correspond to a majority of the subscope being delivered, the definition is recursive)&lt;/p&gt; &lt;p&gt;&lt;em&gt;progress&lt;/em&gt; has two colors and represents the fraction of “delivered scope” as well as the size of the scope, having both on the same graphs lets you see when the scope grows compared to previous values at a same time as when the delivery grows at fixed scope&lt;/p&gt; &lt;p&gt;&lt;em&gt;coverage&lt;/em&gt; is the percentage of declared features (i.e., verticals) that are fully-delivered&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/scope-explorer.html" rel="alternate"/>
        <summary type="text">
            An application to illustrate how the changing scope of projects affects the delivery, coverage.
        </summary>
    </entry>
</feed>
