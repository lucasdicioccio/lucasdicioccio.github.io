<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2024-05-01T01:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/postgrest-table.html
        </id>
        <title type="text">
            PostgREST Table
        </title>
        <updated>
            2024-05-01T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="help-box"&gt; &lt;h1&gt;Everything happens on your browser&lt;/h1&gt; &lt;p&gt;PostgREST not only exposes data over REST entities, it also provides an OpenAPI description.&lt;/p&gt; &lt;p&gt;Postgrest-table lets your browser load the OpenAPI description of a PostgREST service. Plus, this page let your browser understands further the selector syntax that PostgREST expects.&lt;/p&gt; &lt;p&gt;All interactions between this page and your PosgtREST instances are done via your browser. Hence, this service does not intercept any data.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Three families of columns&lt;/h1&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;PostgREST exposes &lt;em&gt;main&lt;/em&gt;entities from PostgreSQL tables and views.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PostgREST provides some support for &lt;em&gt;embedding&lt;/em&gt; via auto-detected foreign-keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Finally, Postgrest-Table (this page) allows you to &lt;em&gt;compute&lt;/em&gt; extra columns directly on your browser with a limited expression language.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Each family of column comes with its own set of limitations:&lt;/p&gt; &lt;p&gt;Only &lt;em&gt;main&lt;/em&gt; and &lt;em&gt;embedded&lt;/em&gt; data are part of CSV exports as PostgREST is in charge of formatting the CSV.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Computed&lt;/em&gt; data can only reference &lt;em&gt;main&lt;/em&gt; columns or previously-defined &lt;em&gt;computed&lt;/em&gt; columns (a naive way to avoid circular definitions).&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Computed columns&lt;/h1&gt; &lt;p&gt;We provide a limited language. Heavier queries should be turned into SQL views and exposed via PostgREST.&lt;/p&gt; &lt;h4&gt;Primitives&lt;/h4&gt; &lt;pre class="code"&gt;"hello"&lt;/pre&gt; &lt;pre class="code"&gt;42.0&lt;/pre&gt; &lt;pre class="code"&gt;["a", "b", "c"]&lt;/pre&gt; &lt;pre class="code"&gt;{"name":"just", "lastname":"leblanc"}&lt;/pre&gt; &lt;h4&gt;References&lt;/h4&gt; &lt;pre class="code"&gt;$row-number&lt;/pre&gt; &lt;pre class="code"&gt;$field:"firstname"&lt;/pre&gt; &lt;pre class="code"&gt;$computed-field:"fullname"&lt;/pre&gt; &lt;h4&gt;Json Extraction&lt;/h4&gt; &lt;pre class="code"&gt;object-lookup($field:"some-json-object", "key", "default-value")&lt;/pre&gt; &lt;pre class="code"&gt;array-lookup($field:"some-json-array", 0, "default-value")&lt;/pre&gt; &lt;h4&gt;Strings and html-generation&lt;/h4&gt; &lt;pre class="code"&gt;concat($field:"firstname", " ", $field:"lastname")&lt;/pre&gt; &lt;pre class="code"&gt;concat("hello ", $computed-field:"fullname")&lt;/pre&gt; &lt;pre class="code"&gt;stringify(1.42)&lt;/pre&gt; &lt;pre class="code"&gt;stringify(true)&lt;/pre&gt; &lt;pre class="code"&gt;image(concat("https://somesite/", $field:"icon", ".png")&lt;/pre&gt; &lt;pre class="code"&gt;link(concat("https://somesite/", $field:"uuid", "/", stringify(round($field:"id")))&lt;/pre&gt; &lt;pre class="code"&gt;progressbar(42.0)&lt;/pre&gt; &lt;pre class="code"&gt;colordot($computed-field:"some_css_color")&lt;/pre&gt; &lt;h4&gt;Computation&lt;/h4&gt; &lt;pre class="code"&gt;negate(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;inverse(100.0)&lt;/pre&gt; &lt;pre class="code"&gt;product(1.2, 3.0, $field:"factor")&lt;/pre&gt; &lt;pre class="code"&gt;sum(1.2, product(1.2, 3.0))&lt;/pre&gt; &lt;pre class="code"&gt;round(1.2)&lt;/pre&gt; &lt;pre class="code"&gt;ceiling(1.2)&lt;/pre&gt; &lt;h4&gt;Logic and branching&lt;/h4&gt; &lt;pre class="code"&gt;conj(true, true)&lt;/pre&gt; &lt;pre class="code"&gt;disj(false, true)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:eq, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:gt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lt, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;predicate(:lte, 1.0, 1.3)&lt;/pre&gt; &lt;pre class="code"&gt;branch("some-fallback", predicate(:eq, $field:"xyz", 1.3), "xyz-is-1.3")&lt;/pre&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Charts&lt;/h1&gt; &lt;p&gt;We leverage Vega-Lite to generate charts. Features implementation and the styling are still rough.&lt;/p&gt; &lt;p&gt;A chart can display computed columns, however if you end-up doing that often you should consider working on your SQL views.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Bookmarklets&lt;/h1&gt; &lt;p&gt;This page will auto-load a PostgREST spec if provided a &lt;span class="code"&gt;?postgrest=$url&lt;/span&gt; query param in the URL.&lt;/p&gt; &lt;p&gt;As a result, you can create a smart-booklet to load &lt;em&gt;Postgrest-Table&lt;/em&gt; in your browser by bookmarking the following code: &lt;pre class="code"&gt;javascript:location.href='https://postgrest-table.netlify.app?postgrest='+document.location.href;&lt;/pre&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Troubleshooting&lt;/h1&gt; &lt;p&gt;Netlify, which hosts this page, enables HTTPS. Hence, if you point to a plain HTTP PostgREST instance, your browser will detect an insecure connection attempt from. You can bypass this limitation by deactivating mixed-content blocking (often clicking a shield/lock icon after a failed connection attempt). Of course, it is better to secure your PostgREST endpoints.&lt;/p&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Roadmap&lt;/h1&gt; &lt;p&gt;Albeit best effort, you can poke around and observe when we provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;more primitives for computed computations&lt;/li&gt; &lt;li&gt;more charting-interactions&lt;/li&gt; &lt;li&gt;more FKs-interactions&lt;/li&gt; &lt;li&gt;more and polished filters for more types (dates, jsonb, arrays, fts)&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="help-box"&gt; &lt;h1&gt;Credits&lt;/h1&gt; &lt;p&gt;Made with passion thanks to:&lt;/p&gt; &lt;ul class="dependencies"&gt; &lt;li&gt;&lt;a href="https://postgrest.org/"&gt;PostgREST&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.purescript.org/"&gt;PureScript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="kk"&gt;Halogen&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://vega.github.io/"&gt;Vega&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vega@5.19.1"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@5.0.0"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.15.1"&gt;&lt;/script&gt; &lt;script src="/js/postgrest-table.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/postgrest-table.html" rel="alternate"/>
        <summary type="text">
            A no-code PostgREST table UI. You can point your browser to any PostgREST instance to inspect and explore data. I use it almost daily while doing local development. I used to host this service on Netlify but I'm considering upgrading the style, adding features, and a backend to save configurations, which goes through a pass of upgrades and hosting changes.
        </summary>
    </entry>
</feed>
