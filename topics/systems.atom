<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        1970-01-01T00:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/readings.html
        </id>
        <title type="text">
            Reading List
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="haskell-garbage-collection"&gt;Haskell Garbage Collection&lt;/h1&gt; &lt;p&gt;Functional programming used to have a bad reputation of being slow mostly due to garbage-collection. The Haskell garbage-collector (GC) actually has received some care and a number of options or programming constructs allow to reduce GC pause times.&lt;/p&gt; &lt;h2 id="theory"&gt;Theory&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/gen-gc-for-haskell.pdf"&gt;Generational GC For Haskell&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://simonmar.github.io/posts/2015-07-28-optimising-garbage-collection-overhead-in-sigma.html"&gt;Optimising GC Overhead&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://simonmar.github.io/bib/exploringbarrier04_abstract.html"&gt;Incremental GC&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://wiki.haskell.org/GHC/Memory_Management"&gt;GHC Memory management&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.well-typed.com/blog/2018/05/ghc-special-gc-objects/"&gt;GHC Special Objects&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="hands-on-optimization"&gt;Hands-On Optimization&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://donsbot.wordpress.com/2008/05/06/write-haskell-as-fast-as-c-exploiting-strictness-laziness-and-recursion/"&gt;Writing Fast Haskell&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://chrisdone.com/posts/fast-haskell-c-parsing-xml#the-dom-speed"&gt;Fast XML parser&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/haskell-perf/checklist"&gt;Performance Checklist&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="real-world-reports"&gt;Real-World Reports&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/13cpm3/waiting_for_garbage_collection_can_kill/"&gt;Parallelism and GC&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/5g8nd0/golangs_realtime_gc_in_theory_and_practice_from/"&gt;Pushers moving away from Haskell to Go for GC reasons&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://www.reddit.com/r/haskell/comments/1kcce9/haskell_is_not_real_time_ready_yet/"&gt;Is Haskell real-time ready yet?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="systems"&gt;Systems&lt;/h1&gt; &lt;p&gt;There always is a host of interesting things to learn by studying complicated systems.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://aosabook.org/en/index.html"&gt;The Architecture of Open Source Applications&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://www.redbook.io/"&gt;Readings in db systems&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://cstack.github.io/db_tutorial/"&gt;How does a database work?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="optimization"&gt;Optimization&lt;/h1&gt; &lt;p&gt;It’s a bit harder to find good blog-style material on &lt;a href="/hashtags/optimization.html"&gt;&lt;span class="hashtag" data-hashtag="optimization"&gt;#optimization&lt;/span&gt;&lt;/a&gt; topics. Besides &lt;a href="/topics/optimization.html"&gt;articles on this site&lt;/a&gt; here are some links.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/institute-for-data-systems-and-society/ids-338j-multidisciplinary-system-design-optimization-spring-2010/index.htm?utm_source=OCWDept&amp;amp;utm_medium=CarouselSm&amp;amp;utm_campaign=FeaturedCourse"&gt;Multidisciplinary optimization&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://matthewcrews.com/blog/2020/12/2020-12-21/"&gt;Maximizing profitability of inventory&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="static-and-personal-site-technology"&gt;Static and personal site technology&lt;/h1&gt; &lt;p&gt;If you read &lt;a href="/how-this-blog-works.html"&gt;how this blog is built&lt;/a&gt;, you’ll figure out that I have some affection for personal and personalized websites. Thus I collect (do not hesitate to send yours to me) other viewpoints on how they built their website.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://j3s.sh/thought/my-website-is-one-binary.html"&gt;My Website is one binary&lt;/a&gt; by jes &lt;/li&gt; &lt;li&gt;XHTMLBoy’s &lt;a href="https://xhtmlboi.github.io/articles/yocaml.html"&gt;Website recipe&lt;/a&gt; &lt;/li&gt; &lt;li&gt;A list of &lt;a href="https://brainbaking.com/post/2022/04/cool-things-people-do-with-their-blogs/"&gt;Cool things people do with their blogs&lt;/a&gt; by Wouter Groeneveld &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="misc"&gt;MISC&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://gist.github.com/lucasdicioccio/256f854a17320b13856b"&gt;gilded tulip&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/readings.html" rel="alternate"/>
        <summary type="text">
            A collection of links and readings.
        </summary>
    </entry>
</feed>
