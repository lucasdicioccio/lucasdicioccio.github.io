<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio&#39;s blog
    </title>
    <id>
        https://lucasdicioccio.github.io/atom.xml
    </id>
    <updated>
        2022-09-14T12:00:00Z
    </updated>
    <entry>
        <id>
            https://lucasdicioccio.github.io/decisions-are-not-outcomes.html
        </id>
        <title type="text">
            Decisions are not outcomes
        </title>
        <updated>
            2022-12-11T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <link href="https://lucasdicioccio.github.io/decisions-are-not-outcomes.html" rel="alternate"/>
        <summary type="text">
            Deciding is difficult, we always want to improve our decision making. What&#39;s more or at least as difficult? gauging whether a decision is good or not.
        </summary>
    </entry>
    <entry>
        <id>
            https://lucasdicioccio.github.io/always-refactoring.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-2]
        </title>
        <updated>
            2022-09-14T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <link href="https://lucasdicioccio.github.io/always-refactoring.html" rel="alternate"/>
        <summary type="text">
            I have ran into a number of product-owner puzzled by how often developers in their team express a need to &#34;refactor&#34;. Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article to demistify a bit the &#34;always-refactoring team&#34;.
        </summary>
    </entry>
    <entry>
        <id>
            https://lucasdicioccio.github.io/scope-explorer.html
        </id>
        <title type="text">
            Scope explorer
        </title>
        <updated>
            2022-06-01T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <link href="https://lucasdicioccio.github.io/scope-explorer.html" rel="alternate"/>
        <summary type="text">
            An application to illustrate how the changing scope of projects affects the delivery, coverage.
        </summary>
    </entry>
    <entry>
        <id>
            https://lucasdicioccio.github.io/what-is-the-project-scope.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-1]
        </title>
        <updated>
            2022-05-21T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <link href="https://lucasdicioccio.github.io/what-is-the-project-scope.html" rel="alternate"/>
        <summary type="text">
            In past experiences I ran into a number of product-owner and staekholders puzzled by how often developers in their team express a need to &#34;refactor&#34;. Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article. This article will be followed by a second part focused on the topic of refactoring. However before jumping directly into hard topics, we must discuss some key dynamics of projects, in particular regarding the scope of projects.
        </summary>
    </entry>
    <entry>
        <id>
            https://lucasdicioccio.github.io/tactical-projects.html
        </id>
        <title type="text">
            Succeeding in tactical projects
        </title>
        <updated>
            2022-04-19T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <link href="https://lucasdicioccio.github.io/tactical-projects.html" rel="alternate"/>
        <summary type="text">
            Different projects require different organization structure. So-called tactical projects tend to fall on you rather than being planned upfront. My recipe to tackle them is a few communication tools and empowered individuals free to roam within constraints.
        </summary>
    </entry>
</feed>
