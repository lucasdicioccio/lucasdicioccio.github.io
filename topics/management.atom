<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        Lucas DiCioccio's blog
    </title>
    <id>
        https://dicioccio.fr/atom.xml
    </id>
    <updated>
        2022-09-14T12:00:00Z
    </updated>
    <entry>
        <id>
            https://dicioccio.fr/triangular-decisions.html
        </id>
        <title type="text">
            Understanding decision under constraints with triangular decisions
        </title>
        <updated>
            2023-06-18T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;I want to start a series of articles on multi-criteria decisions. Since the topic is broad, I’d like to first write an article about decisions under constraints, starting with &lt;em&gt;triangular tradeoffs&lt;/em&gt;.&lt;/p&gt; &lt;h1 id="triangular-tradeoffs"&gt;Triangular tradeoffs&lt;/h1&gt; &lt;p&gt;Triangular tradeoffs are tradeoffs where you lay &lt;em&gt;options&lt;/em&gt; along the sides of a triangle, and you can only pick one corner of the triangle, leaving the opposite side unavailable (it also works if each corner is an option and you need to pick one side). You can construct a triangular trade-off with the template sentence &lt;code&gt;A,B,C - pick two&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Examples of triangular tradeoffs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Project_management_triangle"&gt;Good, Fast, Cheap&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;Consistent, Available, Partition-Tolerant&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://ricardoandlorena.com/lifestyle/money-time-energy"&gt;Energy, Money, Time&lt;/a&gt; – pick two &lt;/li&gt; &lt;li&gt;&lt;a href="https://longform.asmartbear.com/docs/fulfillment/"&gt;Joy, Skill, Needs&lt;/a&gt; – pick two &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You probably have encountered such sentence because triangular tradeoffs arise in many contexts. The first example is a form of &lt;a href="/hashtags/project-management.html"&gt;&lt;span class="hashtag" data-hashtag="project-management"&gt;#project-management&lt;/span&gt;&lt;/a&gt; gimmick. The second example is the CAP-Theorem: an impossibility result in computer science. Whereas the two last ones are motivational frameworks to help us go on with our lives.&lt;/p&gt; &lt;p&gt;These tradeoffs have the same structure about three competing goals that we can place on triangle sides. The next section explains how to thing about triangular tradeoffs.&lt;/p&gt; &lt;h1 id="modeling-triangular-tradeoffs"&gt;modeling triangular tradeoffs&lt;/h1&gt; &lt;p&gt;The most direct representation of triangular tradeoffs is, well, to have a triangle: annotate the sides with the criteria and the &lt;em&gt;decision&lt;/em&gt; is which corner to pick. When picking a corner of a triangle, we actually chose an option which is explicitly characterized along two desireable criteria (e.g., Good and Cheap) while implicitly leaving out the third criteria (i.e., not Fast). Since a triangle has three corners, there are three possible choices. And we can illustrate the three possible choices in the following picture.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-triangle-01.png" alt="fast good cheap triangle" /&gt;&lt;/p&gt; &lt;p&gt;When we draw such a picture, we implicitly hide some information. In the triangle, each &lt;strong&gt;side represents a favorable outcome&lt;/strong&gt; of a decision. Thus, &lt;strong&gt;corner encodes a combination of independant criteria&lt;/strong&gt;. Goodness (Good or not), cost (Cheap or not), and time-to-delivery (Fast or not) are the three independant criteria.&lt;/p&gt; &lt;p&gt;Let’s give a numerical representation to each criteria, say &lt;code&gt;1&lt;/code&gt; represents the favorable outcome and &lt;code&gt;0&lt;/code&gt; represents the unfavorable outcome. For instance, &lt;code&gt;1&lt;/code&gt; is Good, and &lt;code&gt;0&lt;/code&gt; is not-Good. With this simple formalims we can then use a three-digit number like &lt;code&gt;011&lt;/code&gt; to represent various positions on the triangle. The first digit (leftmost) encodes cost, the second digit encodes goodness, and the third digit (rightmost) encodes time-to-delivery. Thus &lt;code&gt;101&lt;/code&gt; encodes &lt;code&gt;(Cheap, not-Good, Fast)&lt;/code&gt;. We can now annotate our triangle with these numbers, which is akin to giving a name to each corner:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-triangle-02.png" alt="fast good cheap triangle, annotated in binary format" /&gt;&lt;/p&gt; &lt;p&gt;In addition to giving a name to each corner, I’ve also colored each digit and the triangle-side according to the criteria they represent. The picture carries a lot of information: we started saying there are three options to chose from (each corner) and elaborated that we also chose from three criteria (individual digits). Decisions on corners or decisions on digits are inter-related: if we pick one corner we also pick three digits, the converse is true. Thus either way of deciding leads to the same result, but these decisions are different. This story becomes confusing and we are approaching the important lesson of this article. Let’s focus now on what is the relationship between deciding on corners and deciding on digits.&lt;/p&gt; &lt;h1 id="corners-or-three-digit-numbers"&gt;corners or three-digit numbers?&lt;/h1&gt; &lt;p&gt;In triangular decisions, there is some confusion about what we “chose”. Indeed, the decision we make when taking a corner of the triangle is related to (but different from) the decision we make when picking a single digit. Confusion arises due to the fact that, in the latter case, we are &lt;em&gt;deciding under constraints&lt;/em&gt;. Whereas, when picking a corner, the &lt;a href="/hashtags/constraints.html"&gt;&lt;span class="hashtag" data-hashtag="constraints"&gt;#constraints&lt;/span&gt;&lt;/a&gt; have already been resolved.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;“pick two”&lt;/strong&gt; of the triangular tradeoff template sentence actually is a constraint: we must pick a number &lt;strong&gt;so that the sum of the digits is two&lt;/strong&gt;. In contrast, &lt;strong&gt;“pick a corner”&lt;/strong&gt; is &lt;strong&gt;a shortcut to name configurations&lt;/strong&gt; which happens to have two connected sides: someone (the first human who draw a triangle) already solved the problem “the sum of digits is two” and provided us with a menu of three choices.&lt;/p&gt; &lt;p&gt;Recapitulating: with binary values to represent each of the three possible criteria, we have eight possible configurations. Further, we are given the constraint “pick two”. We formalize this constraint as &lt;code&gt;the sum of the digits is two&lt;/code&gt;. Doing so reduces the triangle tradeoff to “pick a corner” among three configurations. When &lt;a href="/decisions-are-not-outcomes.html"&gt;evaluating decisions&lt;/a&gt; this reduction of the decision space is welcome as we a smaller decision space facilitates the evaluation of a decision. What is important to internalize here is that &lt;strong&gt;the reduction in the number of configurations is not attributed to a “choice”, instead it is the application of constraints&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;We can generalize the shortcut-trick to problems having more than three binary criteria. For instance if you are used to playing board game you already know that a tetrahedron can encode “a,b,c,d – pick three” (much like a &lt;a href="https://en.wikipedia.org/wiki/Four-sided_die"&gt;four-sided die&lt;/a&gt; picks one out). Thus overall, what we want to study the general framework of applying constraints to reduce the size of a decision space.&lt;/p&gt; &lt;h1 id="deciding-under-constraints"&gt;deciding under constraints&lt;/h1&gt; &lt;p&gt;This section elaborates the general framework of decision under constraints.&lt;/p&gt; &lt;p&gt;Rather than a simple triangular decision, we are given a set of &lt;em&gt;atomic decisions&lt;/em&gt;. These are primitive decisions such as prices, delays, quality, or amounts of sugar cane. We are tasked to &lt;em&gt;decide&lt;/em&gt;. That is, among all the possible &lt;em&gt;configurations&lt;/em&gt;, we need to pick one configuration. Figuratively, we can represent a choice and (a subset of the possible configurations) as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-00.png" alt="choice configurations" /&gt;&lt;/p&gt; &lt;p&gt;In the above picture, we lay down all the small atomic decisions we have to make in gray circles, coloring these decisions means making a choice. Once we color all the circles (which I have not done in the picture because it is fastidious), we have settled on a particular configuration.&lt;/p&gt; &lt;p&gt;What makes a decision difficult is pairwise. On the first hand, the number of configurations grows exponentially with the number of atomic decisions. On the other hand, evaluating each single decision can cost much effort. Some real-world rules such as physics boundaries, personal preferences, or regulations, reduce the set of decisions we can make.&lt;/p&gt; &lt;p&gt;As the analysis of the triangular tradeoff as shown us, we have two ways to decide:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;either we make choices about one configuration in one-fell swoop &lt;/li&gt; &lt;li&gt;or we apply constraints, step back and decide on a reduced set of configurations &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following picture recapitulates these two paths. Top-left, we find our set of atomic decisions. When deciding directly (moving right) we end up with a particular configuration. Whereas we can also first apply some constraint, which means we are left to chose from a reduced set of “bundled” configurations.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-01.png" alt="direct choice pick vs choice reduction via constraints" /&gt;&lt;/p&gt; &lt;p&gt;The distinction between these two decision processes is tenuous: when we decide in one-fell swoop we shall still apply the constraints to arrive to a solution. When we have many constraints, nothing prevents to repeat the process. Indeed, decisions can also take more steps. At each decision step, applying some constraints bundles some configurations from the previous decision-step.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-02.png" alt="multi steps reductions" /&gt;&lt;/p&gt; &lt;p&gt;Other decision-making processes can exist as well if we change slightly the definition of “decision”. For instance, let’s extend the “decision” step with the added power to eliminate at least one-value. That is to say, we can make the decision to do a tiny bit of progress by reducing the set of candidates. Using, this decision repeatedly betweeen applications of some constraints also drive us towards a final decision. Potentially, the final decision happens when a single configuration is left over.&lt;/p&gt; &lt;p&gt;Further, we could extend this process so that a decision step could influence the constraints (e.g., re-ordering them or even creating new ones). Such a technique could allow to capture secondary goals when some condition on the left over combinations happens (e.g., when two options are acceptably performant, consider some risk-threshold before making a by-cost tie-break).&lt;/p&gt; &lt;p&gt;We can illustrate (two steps) of such a process as follows. &lt;img src="/gen/images/mcd-process-01.dot.png" alt="method" /&gt;&lt;/p&gt; &lt;p&gt;Summarizing, we’ve describes a pretty general decision-making process for decisions under constraints. This process is “recursive” (or fractal and prone to self-references if you prefer): the choice we make when pruning configuration or when picking a constraint for the next step, in itself, is a deicsion. This process is mechanical and deterministic as we can describe it with such graphs. Therefore, if our decision-making process were perfect, &lt;strong&gt;we should end up chosing the same configuration in either path&lt;/strong&gt;. On the opposite, we ultimately make &lt;em&gt;informed-guesses&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;An &lt;a href="/hashtags/informed-guess.html"&gt;&lt;span class="hashtag" data-hashtag="informed-guess"&gt;#informed-guess&lt;/span&gt;&lt;/a&gt; is a nice euphemism for instinct-based decisions. There is nothing wrong with such informed-guesses. Indeed, if we annotate the picture from my article about &lt;a href="/decisions-are-not-outcomes.html"&gt;“judging decisions, not outcomes”&lt;/a&gt;, we see that applying constraints to a problem will either reduce the enumeration difficulty or change the evaluation difficulty (e.g., because the constraint pruned some options which required some rare expertise before continuing).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/mcd-choice-reduction-03.png" alt="direct choice pick vs choice reduction via constraints" /&gt;&lt;/p&gt; &lt;p&gt;Although there is nothing wrong with an informed guess, they are easy to conflate with a rushed decision. In appearance, the shortcut we took in triangular tradeoffs is beneficial because we started from eight configurations and ended up with three configurations. We discarded some solutions subject to related constraints. For instance, admit that “pick at most two” rather than “pick exactly two” is a valid representation of our business case. We then admit more than three solutions (we now have seven solutions). Solutions under the “pick at most two” constraint could be beneficial on other factors that you have not yet accounted for. As a result people tend to challenge solutions with their own interpretation of business rules. Such disagreement can be frustrating. In short, keep in mind that the solution “neither fast, nor cheap, nor good” actually exists and someone, somewhere, may be championing this solution as an alternative to yours. My recommendation against corporate-decisions paralysis is to document decision processed (e.g., via &lt;a href="/talks.html#design-doc-template"&gt;design docs&lt;/a&gt;) so that constraints and evaluation criteria are spelled out.&lt;/p&gt; &lt;h2 id="summary-and-conclusion"&gt;Summary and conclusion&lt;/h2&gt; &lt;p&gt;We discuss the process of deciding under constraints. Starting, from the example of triangular tradeoffs. Such problems asks people to make a pick among three options. These three options actually capture a &lt;em&gt;configuration&lt;/em&gt; among three distinct binary decisions (e.g., good or bad, fast or slow, cheap or expensive). Seemingly we should have to pick among eight configurations. The difference between the two approaches to a same problem is that we applied a constraint (“pick two”) and renamed to three possible configurations.&lt;/p&gt; &lt;p&gt;We then generalize the constraint-application step and sketch a decision-framework of iterative changes to an initial problem. The framework is pretty general and typically the goal is to restrict the number of configurations enough that some instinct-based decision becomes possible. In corporate context, this decision-process is often split among multiple people at various hierarchical ranks.&lt;/p&gt; &lt;p&gt;Real-world decision-making is messy: models capture a biased and sparse vision of reality. Further, our constraint-solving ability is also imperfect: we may misrepresent constraints and economical realities binds us. Ultimately, we make informed guess. In such situation, we need to remember that the final-decision often is an instinct-based decision or frustration will prevail.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="app-err"&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/triangular-decisions.html" rel="alternate"/>
        <summary type="text">
            Real-world decisions are tradeoffs under constraints. We like to simplify some tradeoffs with triangular decisions like "cheap, good, fast -- pick two". Let's see what we can learn from these triangles.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/decisions-are-not-outcomes.html
        </id>
        <title type="text">
            Decisions are not outcomes
        </title>
        <updated>
            2022-12-11T01:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Decisions are commodities of our lives: from the second we wake up and until we fall asleep, we are bound to make &lt;a href="/hashtags/decisions.html"&gt;&lt;span class="hashtag" data-hashtag="decisions"&gt;#decisions&lt;/span&gt;&lt;/a&gt; to progress during the day. Most decisions we make are inconsequential: which shirt to pick, what flavour of ice cream to eat, and so on and so forth. As a result, we may easily fool ourselves that we are good at making decisions. In practice, gauging whether a decision is good or not is more difficult than it appears. In particular, we tend to conflate good decisions with good &lt;a href="/hashtags/outcomes.html"&gt;&lt;span class="hashtag" data-hashtag="outcomes"&gt;#outcomes&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="decisions-and-situations"&gt;Decisions and situations&lt;/h1&gt; &lt;p&gt;If we want to improve our decision making, we need to train ourselves to assess the quality of decisions independently from the outcomes of the decisions.&lt;/p&gt; &lt;p&gt;When we think what making good decisions entails, we often think about decisions that will &lt;em&gt;improve&lt;/em&gt; things. And a common mistake people do when gauging decisions is to gauge the outcome. Indeed, we also make decisions that leave us &lt;em&gt;indifferent&lt;/em&gt;. And, alas, sometimes we need to make the &lt;em&gt;least worst&lt;/em&gt; decision.&lt;/p&gt; &lt;p&gt;Let’s illustrate these three situations with a series of trivial examples. For each example, you have two options: &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; and only one of the option can be chosen.&lt;/p&gt; &lt;div class="col3"&gt; &lt;pre&gt;&lt;code&gt;Situation-1 option-A: - gain $50 option-B: - gain $100 &lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;Situation-2 option-A: - gain $100,000,050 option-B: - gain $100,000,100 &lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;Situation-3 option-A: - lose $100 option-B: - lose $50 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;In each of the three situations above, &lt;code&gt;option-B&lt;/code&gt; is always more favorable than &lt;code&gt;option-A&lt;/code&gt;. As a result, someone making good decisions would always pick &lt;code&gt;option-B&lt;/code&gt; over &lt;code&gt;option-A&lt;/code&gt;. Furthermore, &lt;code&gt;option-B&lt;/code&gt; is always &lt;code&gt;$50&lt;/code&gt; better than &lt;code&gt;option-A&lt;/code&gt;, somehow, to most people in Situation-2, either options will feel indifferent.&lt;/p&gt; &lt;p&gt;An important observation in the above example is that any outcome of Situation-2 is preferred over any outcome of Situation-1, which in turn is preferred over any outcome of Situation-3. As a result, a person in Situation-3 taking &lt;code&gt;option-B&lt;/code&gt; makes better decisions than a person in Situation-2 taking &lt;code&gt;option-A&lt;/code&gt;! meanwhile, the person in Situation-2 taking &lt;code&gt;option-A&lt;/code&gt; is in a significantly better place than the person in Situation-3 taking &lt;code&gt;option-B&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The three situations above teach us the following: &lt;em&gt;how-good a decision is independent from how-good an outcome is&lt;/em&gt;. Further, to gauge whether a decision is good or not, one must characterize the set of &lt;em&gt;available options&lt;/em&gt; and then compare options with each other. In short: given a same situation, would you pick the same choice or not? Comparing options differs from comparing &lt;em&gt;unreachable situations&lt;/em&gt; with each other.&lt;/p&gt; &lt;h1 id="distinguishing-between-decisions-and-situation-changes"&gt;Distinguishing between decisions and situation-changes&lt;/h1&gt; &lt;p&gt;The key to distinguish between attainable options and unreachable situations is to understand whether an outcome is too-good-to-be-true &lt;span class="emoji" data-emoji="tm"&gt;™️&lt;/span&gt;. Rational actors would switch to a better situation if they could because &lt;strong&gt;chosing poorly in a good situation results in better outcomes than chosing perfectly in a poor situation&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Thus, a first characteristics is that situations define a range of outcomes whereas decisions merely move the needle withing a range of outcomes. Thus, two situation-changing “decisions” are easy to distinguish because there is some boundary (or minimal overlap) between the ranges of achievable outcomes after taking a decision.&lt;/p&gt; &lt;p&gt;For people with a more “visual mind”, we could depict these differences as follows. Three situations (the range &lt;code&gt;[----]&lt;/code&gt;) with a needle (the &lt;code&gt;-o-&lt;/code&gt;). Options would move the needle around whereas situation changes would flip your situation to another row.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; range of possible outcomes |--------------------------------------------------| situation Alpha: [-------------o--------] situation Beta: [--------o-] situation Gamma: [o--------------] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The ranges in the example above characterize different &lt;a href="/hashtags/situations.html"&gt;&lt;span class="hashtag" data-hashtag="situations"&gt;#situations&lt;/span&gt;&lt;/a&gt;: the available choices for routine decisions are close to each other and result in marginal changes of outcome. Thus, hypotetically, after taking a first option and re-assessing the situation: would your routine decisions (for which you are mostly indifferent) fall on a similar continuum as if you had taken another option first? If you answer yes, the option you are assessing is a situation-changing option.&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="exclamation"&gt;❗&lt;/span&gt; Note, if you are a manager of technical people, suggesting that switching situations is a mere decition will cross your interlocutor because hypothesizing unrealistic options implies an obvious situation-changing choice is not being made (i.e., it implies that your interlocutor is stupid). Questions like “&lt;strong&gt;why don’t you just&lt;/strong&gt; replace system-XYZ” will be received as a sort of “stop-being-poor” insult or as intellectual-laziness. Not be the brainstorm-session ice-breaker you hoped for.&lt;/p&gt; &lt;p&gt;Alas, lines are often blurry. In business settings especially, situations that are unreachable to one may be reachable at an upper management echelon. In particular, the role of strategy is to put you in good situations, whereas the role of tactics is to make good decisions within your current situation.&lt;/p&gt; &lt;p&gt;Some business-settings examples of decisions among available options could be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;hire a new employee or keep on course &lt;/li&gt; &lt;li&gt;implement a piece of logic inside the DB or in the controller or in the model or in the view &lt;/li&gt; &lt;li&gt;build anew or maintain a system &lt;/li&gt; &lt;li&gt;should I investigate an issue by looking at changes or looking at logs or doing some reproduction checks &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Some situation-changing decisions between unreachable (to most except C-suite people) situations could be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;stop paying for mission-critical systems to build in house &lt;/li&gt; &lt;li&gt;replace the whole team or keep on course &lt;/li&gt; &lt;li&gt;stop or not a money-making business-line with low profit-margins &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In my experience, people mixing available options and unreachable situations happens on a regular basis. Probably not in extreme cases like my example above, where people recognize that transitory situations will exist. Making realistic plans require hard work to draw a picture of how a company could move from one situation to another one.&lt;/p&gt; &lt;h1 id="making-better-decisions"&gt;Making better decisions&lt;/h1&gt; &lt;p&gt;Now we understand that a situation constrains the set of choices one can make. Within this set of choice, then we still want to make good decisions.&lt;/p&gt; &lt;p&gt;To make good decisions you need to start with enumerating available options, and enumerating and evaluating options is almost all there is to good-decisions making. Alas the enumeration itself can take too long or the evaluation may fall short due to lack of information.&lt;/p&gt; &lt;p&gt;If we draw these two dimensions on a board, we can split decision-making in four broad quadrants.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/weighing-decisions-quadrants.png" alt="decision quadrants along evaluation difficulty and enumeration difficulty axes" /&gt;&lt;/p&gt; &lt;p&gt;Bottom-left are “easy decisions”: in these cases, intuitive choices are good enough. You can easily convince yourself which option is better and people coming after you gauging and revisiting your choices with hindsight will easily realize you were right.&lt;/p&gt; &lt;p&gt;Top-left are high-cost decisions that are amenable to scrutinization. Many (software) engineering situations fall in this quadrant: choices are few but evaluation is difficult. In this quadrant, I recommend to use evaluation matrices and other tools like design docs (you’ll find a template on the &lt;a href="/talks.html"&gt;talks-and-docs page&lt;/a&gt;) to formalize &lt;strong&gt;and record&lt;/strong&gt; how decisions were made.&lt;/p&gt; &lt;p&gt;Bottom-right are low-cost but numerous decisions. These choice happen when a seemingly-single choice actually consists of a combination of choices and where evaluation can be automated without too much guesswork. &lt;a href="/topics/optimization.html"&gt;optimizations frameworks&lt;/a&gt; allows to enumerate and compare choices efficiently. For these techniques to work on needs to restrict the decisions to some formal and limited model of our reality.&lt;/p&gt; &lt;p&gt;Finally, in the difficult top-right quadrant, you may not be able to make a good decisions. The only reassuring thing is that if you cannot devise a good choice, your competitors likely are in a similar situation. In such a situation what is key is to understand the range of outcomes in best/worst/average situations, and assessing whether investing efforts in better decisions is offset by the outcome. Thus, you need some preliminary investigation to justify whether rolling a dice is an okay-move or not. If high-stakes are at play (that is if the range of outcomes are such that making a good decision is actually critical), I’d say that the best thing to do is to seek help from people with modeling, simulation, and/or scientific-experiments experience.&lt;/p&gt; &lt;h1 id="summary"&gt;Summary&lt;/h1&gt; &lt;p&gt;Decisions are choices in a set of options. Circumstances from your situation determine the set of options available to you. Empathize with people (including your past self) to disambiguate situations having poor outcomes from poor decisions. What is key is: given the same input and the same situation, would I still chose the same option?&lt;/p&gt; &lt;p&gt;In business settings, be careful to distinguish when decisions are tactical (i.e., trying to improve the outcome by making some choices) from when decisions are strategical (i.e., trying to improve the outcome by changing the range of choices). When the strategy attempts such a transformation, often what is amiss is a picture to move smoothly between two disconnected situations.&lt;/p&gt; &lt;p&gt;When deciding within options, your decision-making quality is a direct output of how thorough is your assessment of the set of available options (the enumeration) and your assessment of how good are options (the evaluation). Once you have these, making a good decision is a matter of ranking among choices. Keep in mind that analyzing choices has a cost, and the effort made to enumerate and rank choices should be smaller than the difference in outcomes between good and bad decisions. To help during this process, you should rely on decision frameworks like design-docs and mathematical modeling. Experts can help you with these.&lt;/p&gt; &lt;p&gt;I hope that, in retrospect, you’ll think that reading this article was a good decision &lt;span class="emoji" data-emoji="grimacing"&gt;😬&lt;/span&gt;. Have a good day!&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/decisions-are-not-outcomes.html" rel="alternate"/>
        <summary type="text">
            Deciding is difficult, we always want to improve our decision making. What's more or at least as difficult? gauging whether a decision is good or not.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/always-refactoring.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-2]
        </title>
        <updated>
            2022-09-14T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class=".note"&gt; &lt;p&gt;This article is the second in a series of articles on refactoring.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;From a non-developer viewpoint, it may be hard to connect with developers who are &lt;strong&gt;always refactoring&lt;/strong&gt;. I wrote this article to fill a gap I noticed during multiple discussions with non-technical stakeholders: some stakeholders have the feeling that tech teams are “always refactorin’”. Depending on the type of relationships between developers and other roles, the question whether to refactor or not can become a point of acute tension.&lt;/p&gt; &lt;h1 id="refactoring-to-support-project-scope-changes"&gt;Refactoring to support &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; changes&lt;/h1&gt; &lt;p&gt;Let’s recollect what we introduced in the &lt;a href="/what-is-the-project-scope.html"&gt;previous article about project scopes&lt;/a&gt; and the &lt;a href="/scope-explorer.html"&gt;complementary toy-application&lt;/a&gt;. As software projects grow, we accumulate code to enable features.&lt;/p&gt; &lt;p&gt;When a new feature is required, we are faced with an easy decision: pause in-progress work and prioritize on new features or continue on what is in progress. Conversely, when a new technical or process requirement pops-up, we are faced with more difficult decisions: we need to revisit everything in scope that has been shipped already. A decision to implement or postpone is required for each individual feature already shipped and in scope. Typically, one can live with some gaps for some time (e.g., missing tests, hardcoded parameters, outdated libraries, manual approval in an otherwise automated process, un-even edge-case coverages for two flavors of a same system). However, at some point the infamous &lt;em&gt;technical debt&lt;/em&gt; weighs too much and a feature can be considered unfinished. In short, as requirements pile-up there is some risk that your &lt;strong&gt;effective coverage reduces even though the amount of delivered tasks increases&lt;/strong&gt;, an effect that I refer to as a &lt;em&gt;coverage cave-in effect&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-timeline.png" alt="scope can suffer from cave-in" /&gt;&lt;/p&gt; &lt;p&gt;Refactoring is an attempt at mitigating cave-ins for upcoming requirements. The mitigation can be either anticipated or reacted-upon. If you anticipated, you do not observe the “cave-in” gap but the totalled amount of refactoring work incurs some delay. If the refactoring work is reactive you get to do the same amount of work anyway, except that you do it while your effective coverage is reduced. Overall, engineers tend to like refactors: they will recognize the risks of cave-ins and will often express the need to “refactor first”. As refactor are pushed in the future engineers keep discussing the need to refactoring. When the refactoring starts, it takes longer than expected and leaves even more extra work. Overall, I have witnessed, and I can see a number of scenarios in which product managers grow the feeling that engineers are always refactoring.&lt;/p&gt; &lt;h2 id="refactoring"&gt;Refactoring&lt;/h2&gt; &lt;p&gt;Refactoring is a technical task and a technical challenge: change how a component operates without affecting the external behavior. People obsessed with “customer value” raise eyebrows because a refactor brings “no value” to a product. Pedantic engineers will note that &lt;strong&gt;business value is not only customer value&lt;/strong&gt;. Indeed, engineers do not refactor for the desire of challenges: engineers refactor to reach a more favorable state than from where they started.&lt;/p&gt; &lt;p&gt;Examples of goals for refactors are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;uniformize some idioms in a code-base so that (e.g., when merging two implementations from two different maturity levels a your product) &lt;/li&gt; &lt;li&gt;keep an acceptable pain-level for people who need to maintain or operate the system &lt;/li&gt; &lt;li&gt;prepare for planned ulterior scope changes (e.g., in order to internationalize a service) &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In the first example, the value resides in paying-up some “tech debt”. In the second example, the value is pairwise: liberate resources for higher-value tasks and improve the satisfaction of team members (employee churn is an active threat to teams’ success). Finally, the third example is merely time-shifting future work into the present, without changing much the actual customer value.&lt;/p&gt; &lt;p&gt;Among engineers, some purely-technical tasks like “changing the logging format” may not be recognized as “a honest to god refactor”. Somehow, as far as our discussion is concerned, and as far as engineer-product communication goes, the decisive characteristics we care about is the absence of customer-value. The “refactoring” label merely is a shorthand for how to classify this task: it takes work but if you are not an engineer you need not know how the sausage is made.&lt;/p&gt; &lt;p&gt;Misunderstanding the goal of a refactoring task may lead to some &lt;em&gt;breach of trust&lt;/em&gt; between product and engineering &lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt;. The main catch is: developers’ happiness and morale are part of their productivity and you have an incentive and some moral obligation to create virtuous cycles rather than self-defeating feedback loops.&lt;/p&gt; &lt;h1 id="i-believe-my-team-is-always-refactoring-what-should-i-do"&gt;I believe my team is always refactoring what should I do?&lt;/h1&gt; &lt;p&gt;Now that background is setup, let start the real discussion. You are in a frustrating situation where the team delivery feels slow, and engineers seem to do refactoring over refactoring.&lt;/p&gt; &lt;h2 id="first-is-it-really-true"&gt;First, is it really true?&lt;/h2&gt; &lt;p&gt;In all companies, you need to settle on some acceptable amount of technical work, which includes refactors. In a sense, it is the “cost of doing business”. A fork of accepted technical work varies from 20% to 50% of technical work . The proportion you observe should probably fluctuate within this range and could deviate more depending on the erratic aspects of companies’ timelines.&lt;/p&gt; &lt;p&gt;However, a team deviating for too long may be a reason for concern: too little technical work probably means you are post-poning tasks you should have done already, too much time spent on technical work may mean your team lacks purposeful tasks or maybe they are circling and figuring things out (in the latter case, they need hindsights from senior engineers/architects).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/always-refactoring-tunnel-01.jpeg" alt="technical work acceptable band" /&gt;&lt;/p&gt; &lt;p&gt;As illustrated in the above picture, if you plot the fraction of work spent along time, you should expect some team to stay in the 20-50% band. In this example, the green-plain line is okay, the two dashed-lines probably deserve some investigation. The 20%-50% bracket is more a rule of thumb speaking from experience (personal, colleagues, also a &lt;a href="https://twitter.com/lucasdicioccio/status/1568665141662851073"&gt;recent Twitter poll I made in preparation of this article&lt;/a&gt;) than anything.&lt;/p&gt; &lt;p&gt;One caveat here is that you need some fair assessment of how much engineer time is taken by refactorings. From experience, I’ve seen that it may be challenging for tech leaders to provide such a fair assessment. Without turning this post into some advertisment, &lt;a href="https://www.echoeshq.com/"&gt;my current company&lt;/a&gt; provides a service to solve this question among many other questions.&lt;/p&gt; &lt;p&gt;Now, assuming that you have legitimate concerns regarding some refactoring work, let’s discuss the &lt;em&gt;timing of refactoring&lt;/em&gt;. Then we’ll discuss avenues to challenge and &lt;em&gt;push back&lt;/em&gt; a team member who wants to refactor something when you think there are better things to do.&lt;/p&gt; &lt;h2 id="the-timing-of-the-refactoring-is-key"&gt;The timing of the refactoring is key&lt;/h2&gt; &lt;p&gt;Project planning, sprint sessions, and similar corporate ceremonies are venues where teams discuss the need for refactorings. Alas, no-one is encitivized to tell the truth in such ceremonies: time or complexity estimates always are fudged and a complex meta-game between makers and askers happens around roadmaps. Such ceremonies deserve better. If your teams are always refactoring, you have likely witness a heated discussion when a developer brings up a refactoring task. In this situation, it is a good idea to keep in mind that developers will bring up refactoring tasks for a reason, and in general to avoid some functional cave-in.&lt;/p&gt; &lt;p&gt;Refactorings exist mostly to prevent some form of looming or occurred functional cave-in. Thus you cannot get a lot of information by challenging “why” people refactoring. A more interesting characteristics for a refactor is the question of “when”. A refactor can be preliminary work, wrap-up work, or intermediary work.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As preliminary work&lt;/em&gt;. Most features benefit from chunking into many small tasks. Preliminary refactors (e.g., moving all functions into some common umbrella module) are easy to plan and scope ahead of time. Consider these as stepping stones reducing the risk of a particular delivery.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As wrap-up work&lt;/em&gt;. One may consider a feature unfinished from a technical standpoint while it is already delivering on a functional standpoint. It is common to deploy some Proof of Concept early to test a feature. These Proof of Concept often are “too large”. The hindsight gained from running a system is light shedding. Engineers will find flaws and limitations in their system that would have been better handled in other ways. I would advise budgetting some time to perform such wrap-up as engineers still have a lot of working knowledge of the code. On the opposite, moving onto to new features in a haste with no time to wrap-up is a longer-term risk.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;As intermediary work&lt;/em&gt;. The fractal nature of projects’ scopes and the erratic nature of scope discovery ensure that hiccups occur. Some severe obstacle may pop-up while implementing some feature (e.g., a third-party API exhibits severe rate-limitations on an endpoint you used to rely on and you need to pass some cache in a whole slice of code, adapt tests and so on). You may not be aware of most of these refactors as small refactors occur as part of the normal flow of development. Incredible delays may occur when the larger system or infrastructure require changes. A way to rationalize these intermediary refactors is to consider them preliminary or wrap-up of some subtask.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Thus, in the bad cases, for one single feature, team members may argue three times in favour of refactoring. Given that many features are discussed in ceremonies, engineers may come across as people who are always refactoring.&lt;/p&gt; &lt;p&gt;At this point, I mostly gave arguments in favor of refactor: they tend to go in the right direction. The real issue of refactoring is that they take up time from other concerns. Thus, if you feel like your team is always refactoring, the main problem is the one of arbitraging against other topics. You have two main ways to reduce the “refactoring-tax”: one one hand you can push-back on refactoring, on the other hand you can reduce the prevalence of refactoring with some prevention.&lt;/p&gt; &lt;h2 id="preventing-refactorings"&gt;Preventing refactorings&lt;/h2&gt; &lt;p&gt;In an ideal world, you never have debates about refactoring because the team orchestrate development with a perfect context and good understanding of the situational challenges of the day. As a leader you need to be candidly honest about upcoming tasks and deadlines. Having an idea for a feature it’s not the same as having a customer request and it’s not the same as having twenty customer requests. Needing something for next week is not the same as needing it for next month nor is the same as potentially needing it.&lt;/p&gt; &lt;p&gt;Summarily, engineers need to gauge the amount of uncertainty you have with a feature. Of critical importance are the following characteristics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;whether the feature will be in active use or in potential use &lt;/li&gt; &lt;li&gt;whether a requirement is definite or a sketch of an idea &lt;/li&gt; &lt;li&gt;what is the freedom for digressing &lt;/li&gt; &lt;li&gt;what are the business gains and risks &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Having this information at hand helps engineers understand how to shape the delivery of the code and associated “non-functional requirements”. For instance, if a feature requires some good amount of data-crunching, a preliminary data-exploration phase is welcome to help understand where edge cases lurk. If the task requires a system and not just some code, extra monitoring, sometimes ad-hoc, will have to be built. If engineers understand the business opportunities and risks associated with a feature, they’ll be in better place to gauge how-much these “extras” are required.&lt;/p&gt; &lt;h2 id="pushing-back-on-refactorings"&gt;Pushing back on refactorings&lt;/h2&gt; &lt;p&gt;Having in mind that refactorings are mostly-positive for the health of a software. Senior engineers on a &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; may resent push backs and even identify such push-backs as a threat to the qualify of the system. Therefore, a goal to keep in mind is not to say “no” to a refactor. Rather, a productive conversation seeks a good &lt;a href="/hashtags/tradeoff.html"&gt;&lt;span class="hashtag" data-hashtag="tradeoff"&gt;#tradeoff&lt;/span&gt;&lt;/a&gt; for every party.&lt;/p&gt; &lt;p&gt;There are a few avaialble directions to tackle a “refactor-or-not” discussion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Bluff&lt;/em&gt; it out. Bluffing is a good way to lose trust from your colleagues. You’ll come across someone who is dishonest if you bluff without success to celebrate aside. Some bluffing techniques are along delaying to improve the understanding of the system you want to refactor, or some planned work that will make the to-be-refactored system obsolete.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Clarify&lt;/em&gt; whether the refactoring is a pure-technical change or whether the refactoring enables new features. Sometimes refactoring is an enabler for pushing more feature (e.g., when you have data to filter/sort by a set of fixed criteria and suddenly it’s better to change some querying-scheme such as supporting “arbitrary” and likely-requested future criterias). This is the best situation as you’ll learn better what are/are-not low-hanging fruit features.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Characterize&lt;/em&gt; qualitatively and if possible quantitatively the friction induced by the absence of refactoring. You should be able to tell if the refactoring specifically adress the pain point. You should understand whether the gain is on the long-term or on the short-term. Maybe a piece of code is garbage, but is not touched very often leading to “one horrible day every quarter”, which may be acceptable pain.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Chunk&lt;/em&gt;. Like most software endeavours, it’s better to split refactoring in consecutive well-defined chunks. Often, one can split and time-box the refactoring effort: for instance, do some code re-organization in a first part then apply fundamental changes in a second part. If you frame a long-refactor as a low-risk migration tasks spread over weeks you also train your team for more dangerous and longer-to-rollout migrations. The risk here is that being low-ROI the task never finishes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In summary, you do not have a large number of options to push back on refactorings. Bringing more people on the team can help with a punctual increase in work. Oftentimes you’ll have a better luck ensuring the overall team momentum is maintained.&lt;/p&gt; &lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt; &lt;p&gt;Cautionary tale: challenging whether a refactoring is necessary or not is a sure-fire way to sow dissent and lose momentum. If you’ve read my long article on &lt;a href="/tactical-projects.html"&gt;successful tactical projects&lt;/a&gt;, you’ll know how much I care about momentum.&lt;/p&gt; &lt;p&gt;In general you should pay attention to functional cave-in and anticipate when your project will go sideways. Sometimes a business-requirement may ask for technical changes throughout the project (for instance, data-modeling changes incur verification on already-shipped code).&lt;/p&gt; &lt;p&gt;Allocate a fair amount of work onto technical tasks. Consider that purely-technical work is part of the cost of doing business. If engineers keep bringing-up refactorings over refactoring there are things you can do to push-back without too much trouble. Ask clarification around the functional benefits of the change, characterize with the team what pain-points the refactoring addresses, consider chunking the refactoring in a few steps to allievate only the most pressing pain-point.&lt;/p&gt; &lt;p&gt;If nothing works, consider the help from senior engineers (architects, lead-developers) because your team may lack from technical direction. Of course, if egos prevent your team members from seeking external consulting, you will have a hard time convincing them to change their way of doing thing.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/always-refactoring.html" rel="alternate"/>
        <summary type="text">
            I have ran into a number of product-owner puzzled by how often #developers in their team express a need to "refactor". Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article to demistify a bit the "always-refactoring team".
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/scope-explorer.html
        </id>
        <title type="text">
            Scope explorer
        </title>
        <updated>
            2022-06-01T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;p&gt;This month I’m adventuring into a new way of telling stories. Specifically, I want to explore how &lt;em&gt;micro-applications&lt;/em&gt; can help convey some information.&lt;/p&gt; &lt;p&gt;This article consists mainly of an application with an interactive tutorial. The story we illustrate is from &lt;a href="/what-is-the-project-scope.html"&gt;previous article about the scope of projects&lt;/a&gt;, so make sure to scan through the article first.&lt;/p&gt; &lt;p&gt;In the future I’ll try to intersperse such micro-applications into articles. This first attempt taught me that my current default article layout is interacting a bit too-much with the application so far. As a result the application may not work nor render well on mobile. Also, I do not promise the code is bug-free, however the steps made in the interactive Tutorial work well at least. I apologize for such recklessness.&lt;/p&gt; &lt;p&gt;In general, feedback is highly appreciated as I need to calibrate how much time to budget on micro-applications versus textual content.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div id="scope-explorer-div"&gt; &lt;/div&gt; &lt;script type="text/javascript" src="/js/scope-explorer.js" async&gt;&lt;/script&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div class="surrounding-laius"&gt; &lt;h1 id="an-exercise-to-go-further"&gt;an exercise to go further&lt;/h1&gt; &lt;p&gt;As an exercise, at the end of the tutorial you could say that your application is now encoutering some success, in that case you need to be able to receive money. To receive money you’ll need some “Billing” feature(s). Have fun adding “Billing” as a feature, zooming-in and studying how to split the Billing-scope in sub-scopes.&lt;/p&gt; &lt;h1 id="help"&gt;help&lt;/h1&gt; &lt;h2 id="legend-for-edit-table"&gt;legend for: EDIT table&lt;/h2&gt; &lt;table class="legend"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; cell &lt;/th&gt; &lt;th&gt; status &lt;/th&gt; &lt;th&gt; details &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="table-cell state-done"&gt;&lt;/td&gt; &lt;td class="legend"&gt;done&lt;/td&gt; &lt;td class="legend"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-todo"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;intermediary node (computed)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-unexplored"&gt;&lt;/td&gt; &lt;td class="legend"&gt;todo&lt;/td&gt; &lt;td class="legend"&gt;leaf of scope tree&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="table-cell state-disagreement"&gt;&lt;/td&gt; &lt;td class="legend"&gt;in disagreement&lt;/td&gt; &lt;td class="legend"&gt;intermediary node is claimed done but internal status is not&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id="the-scope"&gt;the scope&lt;/h2&gt; &lt;p&gt;As you define a matrix of &lt;em&gt;tech steps&lt;/em&gt; by &lt;em&gt;features&lt;/em&gt; , the scope of your &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt; grows.&lt;/p&gt; &lt;p&gt;If you zoom on a given tile (you over the mouse on a tile and press the 🔽 “zoom” button) then the scope displayed changes. You get prompted the whole path in your hierarchy, for instance &lt;p&gt;&lt;span&gt;&lt;button&gt;🔼&lt;/button&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="path-component"&gt; TechStepName :: FeatureName&lt;/span&gt;&lt;/span&gt;&lt;span class="path-component"&gt;🌐 global&lt;/span&gt;&lt;/p&gt;&lt;/p&gt; &lt;p&gt;As you press the &lt;button&gt;🔼&lt;/button&gt;, you navigate upward. When (and only when) you reach the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; &lt;a href="/hashtags/project-scope.html"&gt;&lt;span class="hashtag" data-hashtag="project-scope"&gt;#project-scope&lt;/span&gt;&lt;/a&gt; the graphs are updated.&lt;/p&gt; &lt;h2 id="understanding-the-graphs"&gt;understanding the graphs&lt;/h2&gt; &lt;p&gt;The graphs represent the progress of the scope at the &lt;span class="path-component"&gt;🌐 global&lt;/span&gt; scope only.&lt;/p&gt; &lt;p&gt;All graphs start grayed out and represent a normalized value (i.e., the largest value of the whole series takes 100% of the height of the bar). Most recent values are on the right.&lt;/p&gt; &lt;p&gt;&lt;em&gt;scope&lt;/em&gt; is how many “tiles” there are in total&lt;/p&gt; &lt;p&gt;&lt;em&gt;delivery&lt;/em&gt; is how many “tiles” are claimed or effectively delivered (claimed correspond to the checkbox on the tile, effective correspond to a majority of the subscope being delivered, the definition is recursive)&lt;/p&gt; &lt;p&gt;&lt;em&gt;progress&lt;/em&gt; has two colors and represents the fraction of “delivered scope” as well as the size of the scope, having both on the same graphs lets you see when the scope grows compared to previous values at a same time as when the delivery grows at fixed scope&lt;/p&gt; &lt;p&gt;&lt;em&gt;coverage&lt;/em&gt; is the percentage of declared features (i.e., verticals) that are fully-delivered&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/scope-explorer.html" rel="alternate"/>
        <summary type="text">
            An application to illustrate how the changing scope of projects affects the delivery, coverage.
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/what-is-the-project-scope.html
        </id>
        <title type="text">
            My devs are always refactoring! why? [part-1]
        </title>
        <updated>
            2022-05-21T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;div class="note"&gt; &lt;p&gt;This article is the first in a series of articles on refactoring and is focused on discussing what is the “scope” of a project and how the dynamics of the scope affect a project.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;From a non-developer viewpoint, it may be hard to connect with developers who are &lt;strong&gt;always refactoring&lt;/strong&gt;. I wrote this article to fill some gap I observed a number of times with non-technical stakeholders worried that tech teams where “always refactorin’”. Cannot developers refactor once and move to something more useful?&lt;/p&gt; &lt;p&gt;We must discuss some key dynamics of projects before being able to fully-appreciate topics like what is a refactoring. In particular, we need to be clear about the effects how changes in &lt;em&gt;scope of projects&lt;/em&gt; affects the delivery. Thus in this article we’ll have a refresher on what development looks like: a non-linear and discontinuous process.&lt;/p&gt; &lt;h1 id="a-refresh-on-the-development-process"&gt;A refresh on the development process&lt;/h1&gt; &lt;p&gt;The main tangible output of software development is software: an increased amount of lines of code, extra kilobytes of configurations, a flurry of new packages and services. All these deliverables need to be organized, cleared of bugs, key limitations need to be documented. Meanwhile, new business questions are raised, technical questions are raised, and hairbrows are raised too &lt;span class="emoji" data-emoji="thinking"&gt;🤔&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Two key characteristics we can emphasize are the fact that developing software is &lt;em&gt;agglomerative&lt;/em&gt; and &lt;em&gt;non-linear&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="the-development-process-is-agglomerative"&gt;The development process is agglomerative&lt;/h2&gt; &lt;p&gt;We write software to fill a given vaccum, to address a set of problems. The amount of vaccum to fill is the &lt;em&gt;scope&lt;/em&gt; of the software.&lt;/p&gt; &lt;p&gt;Most software features will require a similar set of technical steps (e.g., writing tests, writing a data schema, writing an API provider or consumer, performing some quality-assurance). Thus it makes sense to categorize these technical steps as layers of work. A single developer can work on a single step at a time. Also developers will specialize into some of these layers, forcing the project management to get some ordering between technical steps. For two different features the steps may not have to share the same ordering, however it’s generally the case that there is some bottom-up sequence in a &lt;em&gt;vertical&lt;/em&gt; fashion.&lt;/p&gt; &lt;p&gt;To fill a scope, you need many features, which means that if we collect all the steps for all features, we get a tiling of tasks to fill a given scope.&lt;/p&gt; &lt;p&gt;Graphically you could display that as a set of tiles, each tile corresponding to a technical unit for a given feature.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-tiles.png" alt="scope to be delivered is a set of tiles" /&gt;&lt;/p&gt; &lt;p&gt;This model is a simplification of real-world projects, in real-world projects you have more dimensions to consider and you do not need to fill a full-rectangle as some features may not have the same requirements. I believe this model is good for a number of reasons: first, this model serves the purpose of illustration and the model is complex enough to make my point, second the model is simple enough to allow making graphical visualisations, finally we could say that not having the same requirements just means that the requirements exists but takes zero effort to fill.&lt;/p&gt; &lt;p&gt;To fill a scope, you have thus two broad strategies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;follow the &lt;em&gt;horizontal&lt;/em&gt; axis: focus on some technical layer, assuming that batching everything together is gonna be more efficient. For instance, it is easier to write database schemas when you know all requirements, and is sensible when all requirements are laid out. &lt;/li&gt; &lt;li&gt;follow the &lt;em&gt;vertical&lt;/em&gt; axis: deliver one feature and then move to the next one, assuming that getting some subset of the scope early is a favourable outcome (early revenues, first-mover advantage, reduce pressure from the C-suite) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src="/images/project-scope-delivery-directions.png" alt="scope delivered horizontally or vertically" /&gt;&lt;/p&gt; &lt;p&gt;In modern software practices, it is admitted that the vertical is best as the scope is too hard to discover upfront. We’ll discuss scope changes in the next section though.&lt;/p&gt; &lt;p&gt;Whether one writes code along verticals or horizontals, both strategies eventually accumulate code, configurations, packages, documentations and what not. Thus overall software projects inflate and &lt;em&gt;agglomerate&lt;/em&gt;. As time passes, gaps are filled, &lt;strong&gt;two opposing forces are at play&lt;/strong&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the agglomeration of software is more and more complex and &lt;em&gt;friction&lt;/em&gt; drags your developers down &lt;/li&gt; &lt;li&gt;developers get more experienced on the project and find or build ways to &lt;em&gt;accelerate&lt;/em&gt; the delivery &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Which of these forces is winning will determine the fate of your project. In particular, too much friction or not enough time spent on accelerating will lead to losing momentum. If your team loses momentum, your project is doomed to fail, if your team gains momentum… you get to play for longer.&lt;/p&gt; &lt;p&gt;If you are lucky enough to play longer, your project will accumulate features. On top of features, software projects also accumulate bugs, customer tickets, and are shaked by changes in the scope of the problem. In short, the evolution of software projects is erratic, with non-linearities, asperities, and discontinuities.&lt;/p&gt; &lt;h2 id="the-development-process-is-discontinuous-and-not-linear"&gt;The development process is discontinuous and not linear&lt;/h2&gt; &lt;p&gt;Let’s assume your team has been working on a project for some time now. You are roughly half-done. Let’s illustrate it graphically.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-delivery-3of5.png" alt="scope delivered a bit more than 2 of 5 verticals" /&gt;&lt;/p&gt; &lt;p&gt;You have shipped (in green) two verticals and one fourth of third vertical as illustrated in the following picture. Remains a &lt;em&gt;backlog&lt;/em&gt; (rose) of three fourth for the third vertical plus two full verticals.&lt;/p&gt; &lt;p&gt;When changes of scope occur, two things can happen:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the scope &lt;em&gt;deflates&lt;/em&gt;: this is so rare we won’t dicuss it at length here, softwares allows you to isolate dead weight like un-needed features somewhat easily; however if some feature drags you down you should spend some time cleaning it out (in a refactoring hehehe) &lt;/li&gt; &lt;li&gt;the scope &lt;em&gt;inflates&lt;/em&gt;: this is the typical scenario, software often risk something named &lt;em&gt;feature creep&lt;/em&gt; where we want to support so many things that the complexity exploses compared to the team capacity &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Changes in the scope of a project are not without consequences on your project.&lt;/p&gt; &lt;h1 id="effects-of-scope-changes"&gt;Effects of scope changes&lt;/h1&gt; &lt;p&gt;In this essay we are looking at two dimensions of the scope: features and technicals. The scope changes may be blurry. Although scope may change in both dimensions at a time, it is still valid to studying both dimensions independently. Also, individual tasks are not well-defined boxes, when we zoom on a single task, we realize there is more to it as each task can itself be a small project with its own varying scope.&lt;/p&gt; &lt;h2 id="new-features"&gt;New features&lt;/h2&gt; &lt;p&gt;New features are the routine of software projects. As your system collects more data, as business discussions uncover new pain-points and opportunities, new features are needed.&lt;/p&gt; &lt;p&gt;Graphically, we can illustrate the new features has new verticals that we append.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-increase-feature.png" alt="scope changes adding a new column of feature" /&gt;&lt;/p&gt; &lt;p&gt;I used a slightly darker red to distinguish the verticals corresponding to the new features. In this situation, the main problem that arises is whether to prioritize iterations on the new features or not. If the prioritization is very high, you may even pause the current vertical where it is.&lt;/p&gt; &lt;p&gt;One key thing to remark is when scope grows horizontally, the software is still deemed perfectly adequate. Thus, whatever value delivered is not at risk and life is good as the future will be a continuation of what worked. Vertical changes are bit more annoying.&lt;/p&gt; &lt;h2 id="new-technical-requirements"&gt;New technical requirements&lt;/h2&gt; &lt;p&gt;You know where we’re aiming at. Technical requirements changes are disruptive. Such changes can either have endogenous causes (e.g., you have a reached a point where there are too many defects and you need to increase testing) or exogeneous causes (e.g., regulatory changes like the &lt;a href="https://gdpr-info.eu/"&gt;GDPR&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-increase-technical.png" alt="scope changes adding a new row of technicals" /&gt;&lt;/p&gt; &lt;p&gt;As the technical landscape changes, we need two colors to disinguish what happens to software that exists and is shipped (crimson red) and future software that you will write later (middle-tone red).&lt;/p&gt; &lt;p&gt;The later a vertical change of scope occurs, the larger the impact on your backlog. A late vertical scope change is like a late realization that you were partying on borrowed money. I also like the image of realizing that you were playing in easy mode after subscribing to a video-game tournament: you’re set for some reckoning.&lt;/p&gt; &lt;p&gt;For future verticals, you have one simple decision to make: cut or keep in scope. Cutting an already-started vertical will incur a sunk-cost. Thus, beware the &lt;a href="https://en.wikipedia.org/wiki/Sunk_cost"&gt;sunk-cost fallacy&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For existing verticals, I picked crimson red for a good reason: new technical requirements are difficult to retrofit. Here you have three broad choices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(a) dropping already-shipped verticals &lt;/li&gt; &lt;li&gt;(b) fill the gap for previous verticals &lt;/li&gt; &lt;li&gt;(c) ignoring the new requirements for previous verticals. You can make a different decision for each vertical. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Dropping the whole vertical (a) may not be just a sunk-cost but a visible cost as some customer already relies on the corresponding feature.&lt;/p&gt; &lt;p&gt;Filling the gap for a vertical (b) can be hard to sell to other stakeholders as you are not solving new problems. You also need to prioritize these new tasks and consider delaying the ongoing vertical.&lt;/p&gt; &lt;p&gt;Ignoring new requirements (c) may be sensible, but as scope will continue to grow vertically you may just be post-poning the choice (with an increasingly gap to fill to put in balance with dropping an even older vertical).&lt;/p&gt; &lt;p&gt;Summarizing, vertical scope changes are dangerous for projects as they force difficult choices and have compounding effects.&lt;/p&gt; &lt;h1 id="the-scope-is-a-fractal"&gt;The scope is a fractal&lt;/h1&gt; &lt;p&gt;Another problem of software projects is how fractally complex they end up. Individual tasks often have no good “definition of done”. A whole vertical may have some, but individual tasks are left to implementers. Which means developer will likely need to experiment around.&lt;/p&gt; &lt;p&gt;Overall, individual tasks themselves are small projects with a scope. Oftentimes we realize that there is some an abundant amount of details and extra technical bits and internal features to implement. Anticipating whether a task has enough scope to be split upfront is a difficult betting game.&lt;/p&gt; &lt;p&gt;When picking a single task and zoom-ing in, we often can formulate the scope of the task. Within this contour, we may lay down verticals and horizontals like we did for our project earlier. For instance, if the whole task is to add some visual representation of some statistics for a customer, the sub-tasks may be about defining edge cases, verifying against historical data, deciding to present a single statistics or an evolution in time etc. Overall a seemingly simple feature in itself can have a rich scope. If we keep zooming, the code organization, making sure that business rules are decoupled from glue code and so-on and so forth also are mini-scopes within a task substasks.&lt;/p&gt; &lt;p&gt;Graphically we can give a feeling of what it means by zooming on a task as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;A result of this fractal complexity is that there is no definite answer to say a given task has ended. A hand-wavy rule may be to say a task is mark as done when “enough” of the scope of the task is actually covered. If we try to put numbers, in our case we could define that a task is green when a majority of the subtasks are green. In our example a tile has nine sub-tasks. Which means that the task is done when at most four tasks are “skipped” (yellow) – which we distinguish from “not encountered yet” (rose).&lt;/p&gt; &lt;p&gt;Such a rule is reasonable, and individual tasks may be left in various patterns. Some tasks will have led to code that is complete in many aspects. Some others will have a few edge cases unhandled. Some patchy tasks will have disorganised code but it does the job. Often, the documentation and tests are lacking, and so on and so forth.&lt;/p&gt; &lt;p&gt;Overall, our project is a mosaic that can be scrutinized at a variety of resolutions. Non-developers stakeholders will look at the big-picture&lt;span class="emoji" data-emoji="tm"&gt;™️&lt;/span&gt; of the project and with coarse granularity. Looking at a low-resolution you may get the impression that tasks are fully-done and indeed the project delivers features. However if you had the possibility to &lt;strong&gt;increase the resolution&lt;/strong&gt; of the whole project, you would see the delicate complexity of feature deliveries. We can illustrate this with our example by replacing each task by a set of smaller tasks. We replace every box by nine smaller boxes and we keep the rule that “to make the tile green, we need at most four yellow”.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal-tesselation.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;This picture shows that looking closely we may realize that our shiny project where everything is on track actually has a number of holes like a good &lt;a href="https://en.wikipedia.org/wiki/Emmental_cheese"&gt;Emmental cheese&lt;/a&gt;. Projects with partially-delivered tasks is the normal life of software, thus it is not a immediate cause of concern (and Swiss cheese is delicious). However it is important to understand the dynamics of the system.&lt;/p&gt; &lt;p&gt;Developers have to live in the reality of high-resolution projects, and the cavities left behind to progress on the project may cave-in as the time passes. Indeed, remember that each task in the project has a scope that may inflate (often) or deflate (rarely). If it occurs that an already-shipped feature has a vertical or horizontal scope change, then we also must make a choice between dropping a task or filling-it at 50% again. The extra difficulty is that if you drop or postpone for too long, a task that is green now will become red. Let’s illustrate again on our high-resolution picture: assume that scope changes affect two already-shipped verticals at the second horizontal-layer.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-fractal-cave-in.png" alt="scope actually are fractals" /&gt;&lt;/p&gt; &lt;p&gt;Here both affected tasks used to be filled six out of nine sub-tasks (67%) and are now filled six out of sixteen (38%)! Such a situation is dangerous. Figuratively, two of the already-shipped verticals are deemed unsatisfactory and your project risks a figurative cave-in.&lt;/p&gt; &lt;h1 id="summary"&gt;Summary&lt;/h1&gt; &lt;p&gt;We’ve studied a simple model of software project which is split into tasks to fill a given scope. Project scopes can be described along a number of axes, we focus in particular on the feature-scope (verticals) and on the technical-scope (horizontals). Adding a new vertical has low impact besides prioritization. Adding a new horizontal forces to cut scope or heavily de-prioritization of ongoing features.&lt;/p&gt; &lt;p&gt;Scope is discovered as the project progresses: the scope inflates. Beginning of projects often have a steep inflationnary phase and then the scope accrues more requirements at a lower rate as the project matures. Occasionally, the scope deflates. As delivery of tasks progresses, features get shipped and the coverage of the scope effectively grows in increments. When the scope changes, you risk a cave-in effect where already-shipped features are no-longer passing the bar can no longer be considered as filling the user needs.&lt;/p&gt; &lt;p&gt;All of this can be summarized in the following picture.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/project-scope-timeline.png" alt="scope can suffer from cave-in" /&gt;&lt;/p&gt; &lt;p&gt;In the next article, which we can expect in a few weeks (meanwhile you can see the &lt;a href="/always-refactoring.html"&gt;progress in draft&lt;/a&gt;), we’ll discuss what refactorings are and how they help avoid cave-ins.&lt;/p&gt; &lt;div class="note"&gt; &lt;p&gt;This article also now has an accompanying &lt;code&gt;micro-application&lt;/code&gt; at &lt;a href="/scope-explorer.html"&gt;Scope Explorer&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/what-is-the-project-scope.html" rel="alternate"/>
        <summary type="text">
            In past experiences I ran into a number of product-owner and staekholders puzzled by how often developers in their team express a need to "refactor". Cannot they do it once for the quarter? This prompted me to write some notes and eventually an article. This article will be followed by a second part focused on the topic of refactoring. However before jumping directly into hard topics, we must discuss some key dynamics of a #project, in particular regarding the scope of projects (#project-scope).
        </summary>
    </entry>
    <entry>
        <id>
            https://dicioccio.fr/tactical-projects.html
        </id>
        <title type="text">
            Succeeding in tactical projects
        </title>
        <updated>
            2022-04-19T12:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Roughly one year ago I handed over a software project that I bootstrapped for an internal project to build an &lt;a href="https://aide.vente-privee.com/category/703-re-cycle"&gt;innovative e-commerce business around second-hand garnment and sustainable clothing (&lt;span class="emoji" data-emoji="fr"&gt;🇫🇷&lt;/span&gt;)&lt;/a&gt;. The time-window was pretty short (six weeks for the first PoC) and there was only one extra developer on the project but we made it and I could transfer the project to perpetuate and stabilize the business while I moved to other opportunities. At the same company a few years before I was invited to fix a pressing issue that could have led to severe liabilities. An important pipeline was stalling and risked putting many business processes to a halt. Institutional knowledge was partly lost and mostly transmitted by oral lore. Recovering the pipeline backlog and deprecating this pipeline took months, this project had from six to a dozen of people depending on how you count. The company is still around, so we can also call that project a success.&lt;/p&gt; &lt;p&gt;In both cases these projects were recognized as &lt;em&gt;tactical&lt;/em&gt; endeavours. That is, one-time feats to achieve, with a fair amount of freedom to digress from some company guidelines and processes. Even though the scale and timeframe differed, what made both these critical topics click was not the technology, but the team dynamics. I made some internal presentations for each of the project, but I also wanted to share a bit to the outside world how I approach these projects. This article discusses my &lt;em&gt;recipe&lt;/em&gt; to tactical projects.&lt;/p&gt; &lt;h1 id="a-recipe-for-tactical-projects"&gt;A recipe for tactical projects&lt;/h1&gt; &lt;p&gt;I wrote a couple of Twitter threads relating how I approach these tactical projects. A first &lt;a href="https://twitter.com/lucasdicioccio/status/1329847102843838466"&gt;lengthy thread&lt;/a&gt; discusses briefly my &lt;em&gt;checklist&lt;/em&gt; and then motivates some items. The checklist gives you &lt;strong&gt;a set of tools&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://twitter.com/lucasdicioccio/status/1340257658121691136"&gt;follow up thread&lt;/a&gt; is much shorter and stresses the approach and the importance of giving boundaries more than instructions. This approach gives you &lt;strong&gt;a set of behaviours&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;We’ll get through the checklist then discuss key behaviours to encourage during tactical projects.&lt;/p&gt; &lt;h2 id="a-checklist-of-communication-tools"&gt;A checklist of communication tools&lt;/h2&gt; &lt;p&gt;Successful projects require communication. If we stretch a bit, all the tools from the checklist I am about to give are a form of communication support. Communicating efficiently is hard because abundant communication is noisy: you cannot just fix communication issues with more communication but with &lt;em&gt;better&lt;/em&gt; communication. In tactical projects, I believe that better means &lt;em&gt;intentional&lt;/em&gt; communication. That is, do not multiply communication supports and focus on one usage per support. Such intentionality leaves no room for ambiguity as where to look for information and where to publish information.&lt;/p&gt; &lt;p&gt;Here is the checklist:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="book"&gt;📖&lt;/span&gt; one jargon-doc to map concepts &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="calendar"&gt;📆&lt;/span&gt; one periodic-meetings doc &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="libra"&gt;♎&lt;/span&gt; one open-point/arbitrage doc &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="raising_hand"&gt;🙋&lt;/span&gt; one communication channel for people &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="robot"&gt;🤖&lt;/span&gt; one dump channel for robots &lt;/li&gt; &lt;li&gt;&lt;span class="emoji" data-emoji="point_left"&gt;👈&lt;/span&gt; one entry-point doc which links to all the other docs &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As for the specific tool you use for these documents and chats, the offering is pretty good today as long as they allow an online and direct-edition mode. Examples of good tools for such docs are &lt;strong&gt;GoogleDocs&lt;/strong&gt;, &lt;strong&gt;Notion&lt;/strong&gt;, &lt;strong&gt;Confluence&lt;/strong&gt;. Pick the ones you are familiar with and that you already use.&lt;/p&gt; &lt;p&gt;Let’s now dig a bit each of the checklist item.&lt;/p&gt; &lt;h2 id="in-depth-review-of-the-checklist-items"&gt;In depth review of the checklist items&lt;/h2&gt; &lt;p&gt;This section just dives deeper in each topic. Each item deserves a lenghty discussion but I will be concise for the brevity of the whole article. Do not hesitate to &lt;a href="/about-me.html"&gt;contact me&lt;/a&gt; if you want me to expand on one aspect.&lt;/p&gt; &lt;h3 id="the-jargon-document"&gt;the jargon document&lt;/h3&gt; &lt;p&gt;There is some selection bias in so-called tactical-projects, and often such projects will have the characteristics of the difficult project to rescue: business rules are blurry if not lost, documentation and specification may have drifted enough that even subject-matter experts have forgotten there is a documentation.&lt;/p&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/rosetta-stone.jpeg" alt="rosetta stone" /&gt;&lt;/p&gt; &lt;p&gt;The Rosetta Stone (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;The problem you face with such a situation is the inability to get started, and the risk of having to roll back a lot of work once it is delivered because code is written with some miscommunicated assumption. Indeed, oftentimes terms may be overloaded and a same word will have different meaning depending on the interlocutor. The worst I have seen was a term that was defined in French, but when translated to English, was a slightly different concept for the same stakeholder. A seasoned engineer was agast when I told him so, because the code would not make a difference (and business-wise, the two concepts would coincide often enough for the happy cases, but could lead to corny edge cases otherwise). To solve communication issues, the first step is to have some mutual understanding between stakeholders.&lt;/p&gt; &lt;p&gt;Your role here is not to fix everybody’s language. That would be hopeless and too disturbing for most people anyway. Are we stuck then? Of course not! all hope is not lost: you can bring mutual understanding by exposing the differences in concepts for the same word. A common mistake I have seen is to write a glossary. &lt;strong&gt;You do not need a glossary, what you really need is a Rosetta stone&lt;/strong&gt; .&lt;/p&gt; &lt;p&gt;I provide an example jargon-file in this &lt;a href="https://docs.google.com/spreadsheets/d/1bJpqpAxFFoViP9XEDwKRzm1Od1g6w9DtwYTDzlMkwQs/edit?usp=sharing"&gt;jargon spreadsheet&lt;/a&gt; . Of importance is that you leave room for each stakeholder to disagree with your use of a term. In this way, everyone feels respected because there is no bias favoring the viewpoint of the file author. This is why the jargon file has a matrix of terms and stakeholders.&lt;/p&gt; &lt;h3 id="the-periodic-meetings-doc"&gt;the periodic-meetings doc&lt;/h3&gt; &lt;p&gt;When in the heat of tactical projects, you need some amount of synchronization with all stakeholders and teamates. Often, a few topics will be the focus of attention for a couple of days or weeks. You should forget synchronization emails because emails sent to many people invite cross-talk in replies and re-sharing truncated bits. If you use email to communicate, only use email for outbound communications to less-involved stakeholders (e.g., C-level executives).&lt;/p&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/livre-de-bord.jpeg" alt="livre de bord" /&gt;&lt;/p&gt; &lt;p&gt;Livre de bord (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/9/95/Grand_Turk%2834%29.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Instead, I posit that you want some form of journal where you synthetically review these topics. At the same time, when reviewing these topics, it is marginally more expensive to review exhaustively what is on the plate of whom. Indeed, most of your efforts should be focused on the key topics du jour and only a few will work on other topics. Giving attention to these secondary topics is also important for the morale of those and for the habits of everyone because the focus will eventually shift. Additionally, keep some room to review HR topics, especially days off so that no-one is surprised when someone leaves for two weeks.&lt;/p&gt; &lt;p&gt;The following link is a &lt;a href="https://docs.google.com/document/d/1_1an91IYoZwecigqwtsIPQ5ivxp4aS9sv_DaVRScvqU/edit?usp=sharing"&gt;template for periodic-meeting notes&lt;/a&gt; I like to use. You do not have to follow this template but I’ll tell how to use it. For each team meeting, add a section by copying the &lt;code&gt;template&lt;/code&gt; section just below in the doucment and editing the date. You can prepare a section ahead of time and should encourage to fill-it in as they progresss (in my example “dany” has marked an update in advance). During meetings, review items, prioritizing new entries on key topics and action items from previous meeting. Copy and indicate carried over entries from previous meetings until resolution or decision to drop. Ensure that there is some markup to quickly identify people and action-items with their current state (e.g. &lt;code&gt;AI&lt;/code&gt; for action item, &lt;code&gt;@name&lt;/code&gt; of &lt;code&gt;[name]&lt;/code&gt; for people, bold fonts, strikethrough for done tasks). It’s better to be clear than to be consistent. Updates should be synthetic and provide links to other work document to follow the specific topic in more detail (e.g., tasks in issue trackers).&lt;/p&gt; &lt;p&gt;The document will grow, I’ve seen such a document with hundreds of pages on Google Docs and they work pretty well. Only create a new periodic-meetings doc if editing the current one becomes unbearable (e.g., the software becomes too slow). Sticking to a single document has a multiple benefits: First, you have a single entry point to know what are the topics du jour and the blockers on these topics. Second, you get a quick access to who-works on what and a sense of who-needs support (e.g., if a name does not show up, maybe the person is suffering a loss of motivation). Finally, the document is easy to search with &lt;code&gt;ctrl-F&lt;/code&gt;: everyone knows how to do that and the UX typically is better than cross-documents searches.&lt;/p&gt; &lt;h3 id="open-pointarbitrage"&gt;open-point/arbitrage&lt;/h3&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/balance-of-justice.jpeg" alt="balance of justice" /&gt;&lt;/p&gt; &lt;p&gt;The balance of Justice (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/f/f1/Estatueta_Justi%C3%A7a.JPG"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Tactical projects will mix people with different seniority. Further, you will need to pro-actively cut corners. Sometimes you will have to hand-over the project at the end of the tactical mission. Thus, it is better to keep track of all the key arbitrages in a single document. Arbitrage will often be required for technical aspects (e.g., architecture, database structures, naming conventions) but could also span business aspects (e.g., decision to drop or limit data-recovery to a time-bound).&lt;/p&gt; &lt;p&gt;I provide a design-document template in my &lt;a href="/talks.html"&gt;talks&lt;/a&gt; section, which I recommend for large projects. For tactical projects you will not have the luxury of doing such good and time-consuming work. That said, you still want the benefits from some formal process: you want a minimal context and a listing of alternatives one can think about, then a status.&lt;/p&gt; &lt;p&gt;It is useful to have a table of content and a todo/done status in the titles to quickly see what has been decided yet and what needs arbitration.&lt;/p&gt; &lt;p&gt;Once the document is in place, spam it around. Encourage people to submit new open-points, link to them during the periodic-meeting.&lt;/p&gt; &lt;p&gt;As for the two previous checklist item, you can find &lt;a href="https://docs.google.com/document/d/13vuImyR-qNiZ4GEoyAhgUts1PkrQYYRnvLD5IvvSa-0/edit?usp=sharing"&gt;an example open-points document&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="one-communication-channel-for-people"&gt;one communication channel for people&lt;/h3&gt; &lt;p&gt;Modern organization use some online group chats tools. If you don’t, start with this. Group chats are easy to adapt to different processes and work organizations. I’ve seen as many group-chats organizations as I have seen teams: some teams used a single channel, some other teams would create transient channels for open points. Overall I’ve seen success and failures in either setups. For a tactical project, I tend to prefer having a single communication channel. Indeed, the size of teams in tactical projects allow a single channel to be busy without becoming jammed (if you need to involve many teams, maybe you’re not on a tactical project but would need a whole backbone of engineering management).&lt;/p&gt; &lt;p&gt;The one communication channel serves for orchestration rather than as a support for communications. That is, use the channel to schedule/reschedule the periodic-meeting and ping people that the meeting starts. Also use the channel to first notify that something of note requires attention or requires arbitration. Key points should be discussed and related in the periodic-meeting notes or in the arbitration docs.&lt;/p&gt; &lt;p&gt;Avoid multiplying channels for open points because you will churn through them and lose track of what is ongoing and what is done. Having many chats with distinct and partially-overlapping sets of interlocutors is a recipe for cross-talks. You end up bringing the wrong topic in the wrong chat by mistake, when you need someone that was not invited first, they will lack the history (let’s be honest, chats history are horrible to process for humans).&lt;/p&gt; &lt;p&gt;If your channel tool allows to annotate channels with some topic message, link to the periodic-meeting notes in the channel topic.&lt;/p&gt; &lt;p&gt;An exception to have a few more channels is if you have regulatory requirements (e.g., some info must stay more confidential or require some clearance). But for this use case, private chats probably are a better venue as they feel more transient&lt;/p&gt; &lt;h3 id="one-communication-channel-for-robots"&gt;one communication channel for robots&lt;/h3&gt; &lt;p&gt;Automation is a special case that warrants an online chat as well. Automation will spam you about CI runs, people who pushed code etc. Overall, automation is screamy, pollutes, and does not respect your daily break.&lt;/p&gt; &lt;p&gt;Avoid overloading the communication channel for people with automated messages. This distinction is less important if all the stakeholders are tech people who understand that an “alert” may not be a reason for alert, nor that daily failures are expected.&lt;/p&gt; &lt;p&gt;The same points against multiplying channels as for the communication for people apply: you should favor a single channel until it becomes unbearable. Co-locating alerts with deployments notifications may help spot regression as well.&lt;/p&gt; &lt;h3 id="one-entry-point-doc-to-bind-them-all"&gt;one entry-point doc to bind them all&lt;/h3&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/savoy-menu.jpeg" alt="large menu" /&gt;&lt;/p&gt; &lt;p&gt;The menu at the Savoy Hotel (credits WikiMedia &lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Savoy_Hotels_meny_fr%C3%A5n_%C3%A5r_1900_-_Hallwylska_museet_-_100667.tif/lossy-page1-800px-Savoy_Hotels_meny_fr%C3%A5n_%C3%A5r_1900_-_Hallwylska_museet_-_100667.tif.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Even though we introduced only five tools, that’s already five things to remember. An unreasonably cost-effective to help people navigate your tactical project is to curate some form of &lt;em&gt;entry-point document&lt;/em&gt; that links to other documents like a menu. No discussion should occur in this document. It’s purely a for-consumption information to locate notable pieces of information pertaining to the project.&lt;/p&gt; &lt;p&gt;The list of things you can communicate in such a simple document is completely open. The entry-point document would typically carry links to some forsaken specifications or some internal report from external consultants five years ago. Linking these in the entry-point document should help distributing lost knowledge. Sometimes it is useful also to pinpoint one specific function in some source code and that is key in a business process (e.g., where some complicate computation runs).&lt;/p&gt; &lt;p&gt;One could argue that bookmarks are &lt;a href="https://www.hillelwayne.com/right-tool/"&gt;the right tool for this job&lt;/a&gt;, however the bookmark UX is really poor on average. Bookmarks are hard to share and synchronize. Few people likely have the habits to organize bookmarks. Plus, sometimes the content you want to likn-to is only on a file-system share, which you cannot easily put in web-bookmarks. This entry-point doc itself could be a bookmark you suggest, if not THE only bookmark.&lt;/p&gt; &lt;p&gt;Be generous in what you list in this document, the barrier to entry should be low enough. Avoid spamming anything you find so that people find value in browsing through the entry-point doc. I would say, any document or piece of code that is a reference and that has some time-validity in months or more is welcome in such a document. Do not link every ticket, pull request, version of data extracts from this document (the periodic-meeting notes should discuss these). If you prefer accepting junk rather than missing nuggets, add some visual separation between what entries made it into the list with versus without proper vetting.&lt;/p&gt; &lt;p&gt;Keeping the entry-point doc up to date is everybody’s duty, but you’ll have to evangelize this duty. Keep uttering the sentence “you’ll find a link in the entry-point doc” and be a good role model (say “I’ve added the link to the entry-point doc” until the other party gets into the habit of linking into the doc pro-actively). The tipping point where people see the benefit generally happens when you are faster to find a link for some piece of work than the author of the work.&lt;/p&gt; &lt;p&gt;The document itself does not need a lot of organizing, again Ctrl-F searches do wonder. You could use some spreadsheet or another shared doc. I’m giving an example as &lt;a href="https://docs.google.com/document/d/1XybK4q6q7GnzBhRWFMow78FhfxjxLbzekX84se82HMY/edit#"&gt;yet another google doc&lt;/a&gt;. Spreadsheet are really useful when you want to add coloring with automated formatting.&lt;/p&gt; &lt;h2 id="final-words-regarding-the-checklist"&gt;final words regarding the checklist&lt;/h2&gt; &lt;p&gt;My checklist is based on experience with a number of tactical projects plus a few large projects that needed course-correction. I have not needed all of the items all the time, but the periodic-meeting notes is probably the most useful one. Indeed, filling the periodic-meeting document is a forcing function for many beneficial behaviours (e.g., it reinforces the team-spirit with the shared ceremony when reviewing the document, it identifies blockers fast, it let you plan ahead).&lt;/p&gt; &lt;p&gt;Lightweight processes and low-tech tools are enough for tactical projects. However, do not be fooled, tools are merely tools. Tools are here to reduce friction and relieve people from typical corporate aches. Reducing friction is not enough to build momentum. Successful tactical projects also require a fair amount of energy spent on keeping the team members productive, efficient, and motivated. We discuss these aspects of successful tactical project in the next section.&lt;/p&gt; &lt;h1 id="behavioral-aspects"&gt;Behavioral aspects&lt;/h1&gt; &lt;p&gt;Having nimble and intentional communication tools should lessen the friction and encourage discussions towards fast-decision-making. That said, nothing will happen if no-one leads the group and no-one champions the tools. You’ll probably need to initiate some management-style changes. The tactical project lead will act like a maestro giving rythm to the team, you’ll need some light ceremonies to build momentum, and give the right degree of freedom to individuals. Let’s unroll all of this.&lt;/p&gt; &lt;h2 id="the-maestro-analogy"&gt;The maestro analogy&lt;/h2&gt; &lt;div class="pic-with-caption"&gt; &lt;p&gt;&lt;img src="/images/von-karajan.jpeg" alt="von Karajan" /&gt;&lt;/p&gt; &lt;p&gt;Von Karajan directing a concert (credits WikiMedia &lt;a href="https://en.wikipedia.org/wiki/Maestro#/media/File:Bundesarchiv_Bild_183-R92264,_Herbert_von_Karajan.jpg"&gt;original link&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;p&gt;A team is a social group, with complicated interactions and tensions between individual and the group. To achieve a tactical mission you need to ensure the team members feel motivated and energized on an individual level. At a same time the whole group must find the right tempo. As a tactical project leader, it is you role to set the tempo for the team.&lt;/p&gt; &lt;p&gt;I think that the orchestra and maestro analogy is a good fit for tactical projects. Think of individuals as players of different instruments, some play brass and some others may play strings. Each player has their own favorite style: some play jazz, some prefer classical. For your tactical project you may need them to play modern chamber music, hence contenting no-one. Even if you cannot play all instruments, you should know how the music should sound and have a good understanding of the partition a few measures ahead. As the person in charge of the tempo you need to know when to race and when to pause, you need to prepare transitions from adagio movements to presto sequences. In summary, setting the right tempo is not synonym with racing at the maximum speed.&lt;/p&gt; &lt;p&gt;How does the maestro analogy translates in the practice of tech teams? I would say that the most important thing is to ensure that every team member understands the tactical mission and how they contribute to it. The maestro does not play instruments but coordinates when individuals need to start, slow down, etc. Every music performer understand they are needed for the whole play to sounds great. For your tactical &lt;a href="/hashtags/project.html"&gt;&lt;span class="hashtag" data-hashtag="project"&gt;#project&lt;/span&gt;&lt;/a&gt;, everyone should be able to understand if they are on track or late, if they are facing a roadblock or if they have spare energy to help a stuck colleague. Such an awareness level requires careful attention to how knowledge is distributed: who knows which system the best? who can be onboarded on which parts of the project? and how long would such a transfer take? Only individuals can answer these questions, and to ensure that you get honest answers, you need to make sure that people feel safe to discuss their worries openly. In particular, you need to validate individuals as the right owners for their project-scope if you want everyone to be committed to the success of the tactical mission.&lt;/p&gt; &lt;p&gt;Once you have individuals that are committed, you get momentum. Your second goal is to keep the momentum – a goal best achieved by reducing friction. In particular, every team member should understand the group dynamics. This aspect is where your energy will yield the best lever: you should lead by example and encourage people (sometimes “vigourously encourage people”) to use the shared communication tools. For instance, to ensure the entry-point doc is up-to-date do not say “please add it to the entry-point doc”, rather you do it yourself but vocalise something like “ok, I’ve added it to the entry-point doc, took me ten seconds”. Publicly take notes on the periodic-meeting notes, and at some point your teammates will pro-actively do it. In short, demonstrate that you are adhering to the behaviors you want to encourage, and since you will be spending most of your time communicating, this will translate into an increased usage of the agreed-upon communication tools. At the risk of repeating myself, ceremonies are the easiest way to foster such behaviour changes. So let’s discuss it separately now.&lt;/p&gt; &lt;h2 id="ceremonies"&gt;Ceremonies&lt;/h2&gt; &lt;p&gt;Ceremonies such as stand-up meetings with all the team members are common in tech companies. In general, such ceremonies are good in tactical projects as well because they help consolidate the team interactions. That said, like the checklist of communication tools, ceremonies are merely tools and they will not solve your problem.&lt;/p&gt; &lt;p&gt;An under-appreciated value of recurring ceremonies is their agenda-locking power: people have fewer pretexts to daze-off a known-recurring meeting. I find that daily meetings are too much overhead because there rarely is much ongoing in a single day (people may even resent days when they have no updates). At the opposite end, bi-weekly or monthly starts to be too far apart. Put in simple mathematical lingo, the number of updates is roughly proportional to the amount of work done. Too-close meetings will lead to low-value overhead, whereas too far-apart meetings become longer and harder for everyone to follow. Is there an optimal spacing then? well, unlikely, and even if there were one formula, the formula would require information you do not have. Fortunately, the tactical leader sets the tempo. Thus, you can adapt the schedule of such ceremonies to the number of people around and the urgency of the next deliveries. Daily meetings and even twice-daily meetings could be a perfectly-fine setup when you are very near a deadline. A set of rules is that there is almost no point in meeting if your feedback loop is slower than the delay between two ceremonies (you should here focus your effort on speeding up your feedback loop). If your feedback loop is very fast (e.g., you can try changes and analyze results multiple times a day) you are in a spectacularly good place: but to avoid fully-saturating everyone’s agenda you should encourage people to try multiple things and aggregate learnings of multiple rounds during full-team ceremonies. Thus, feel free to adapt, but be listening to people in order to avoid erratic schedules.&lt;/p&gt; &lt;p&gt;In my typical tactical project setup, I generally try to have a weekly to twice-weekly meetings. During these meetings we beam the &lt;code&gt;periodic-meeting notes&lt;/code&gt; on the screen and we go through updating and reviewing all items together. Thus, everyone can see the notes in live and everybody can see people editing the notes in live. We do not do a full round asking people taking turn. We primarily focus on what the document contains. People who make the effort to list their updates in the doc get their topic discussed first. At the beginning of the project, I type out all updates myself so that people understand what I expect of them regarding the level of details, the conventions for highlighting action items etc. Then, as momentum builds up, I no longer need to take on this job as people pro-actively fill-in the updates. If a person has no updates for one meeting it’s ok, when an absence of updates is recurring, you likely need to dig more into the situation and sense if you need to unlock something.&lt;/p&gt; &lt;p&gt;Lage ceremonies are taxing, and for you as a leader, doubly so. Spend some effort to ensure that people get motivated during ceremonies. Time-keeping is a simple way ensure there is some rythm during ceremonies. Then, find ways to spice-up meetings. Sometimes subtle changes are enough to relieve some pressure off people and remind them there is life outside work. Simple things like changing the template on special dates (e.g., add an Easter Bunny &lt;span class="emoji" data-emoji="rabbit"&gt;🐰&lt;/span&gt; emoji around mid-April) or adding memes relevant to a recent achievement along the way are enough to break the bureaucratic routine of work ceremonies.&lt;/p&gt; &lt;p&gt;If you succeed in setting the right tempo, you will notice that people welcome the time of the ceremony. If you are the one who is late they will ping you and ask you whether to start without you (and you should definitely answer ‘yes’). If you are absent, delegate and you will be surprised that the output in your periodic-meeting notes is consistent with when you are present. From experience, the lack of a timekeeper is the first flaw to appear in ceremonies if you are absent for too long, but if you stress this point enough, handing-over the token of ‘ceremony leader’ should be easy.&lt;/p&gt; &lt;p&gt;To summarize, keep your ceremony predictable. Invest a lot of personal energy into setting these ceremonies up: lead by example, set the tempo, be a good time-keeper and time-sharer. Maximize re-use with the periodic-meetings notes document. Ultimately, no-one will dread a regular ceremony where the organization is smooth and where everybody can get a chance to voice concern or receive praise.&lt;/p&gt; &lt;p&gt;The only thing you may get irrecorevably wrong while setting up a recurring ceremony is if you are (or appear as) “the one giving orders”. One way to prevent such a situation is to adopt a directing style where individual have a lot of agency. Such a style deserves a discussion in itself. Thus, let’s discuss how to set boundaries so that individual can roam freely within the boundaries and impress you with their results.&lt;/p&gt; &lt;h2 id="directing-with-boundaries"&gt;Directing with boundaries&lt;/h2&gt; &lt;p&gt;People sincerely hate micro-management. The key difficulty when managing people, and probably even more so in tactical projects, is that you do not know what people judge as micro-management versus honest sheppherding. Individuals have different history and hence they also differ in perception and tolerance threshold. As a result, you have to probe with trial and error. Be carefull how strict or permissive you are with each individual. This style requires two things: empower individuals, and properly set boundaries.&lt;/p&gt; &lt;p&gt;To empower individual, remind individuals that they are the expert in their specific zone. Indeed, in tactical projects, there will often be little overlap between topics as the team is spread thin. Therefore, even a junior engineer will soon become the best person knowledgeable on some piece of code or some lost business rules. All it takes, i a couple of focused days studying the gory details of your forsaken system. Remind them of this simple fact, praise them as they become the go-to person for some fields in your project. Praising is a double-edged sword: people may feel the impostor syndrome. If there is enough emulation in the group, impostor syndrome should not be an issue. There will be more than enough energy in the air for everyone to course-correct lack of confidence or self-esteem.&lt;/p&gt; &lt;p&gt;If you empower individuals and give them a lot of wiggle room to implement solutions, you then need to properly set boundaries to avoid two things: one the one hand you need to prevent territorial issues when scopes may collide (e.g., some technical work and some business-rules work which both led to changes on the same system but with diverging visions regarding technical choices or implementation schedules). On the other hand, you may end up with a dysfunctional system because some key assumptions you hoped to leverage was not properly communicated and overlooked (e.g., you wanted some new function to be idempotent because down the road you plan to change the architecture and are at the early phases). In both cases, the main risk is a breach of trust, which will have compounding effects for the remainder of the mission. In short, boundaries are good for the group.&lt;/p&gt; &lt;p&gt;Boundaries that are good for the group are in tension with empowering individuals. Hence, it is worth practicing the art of designing boundaries. Instead of providing schemas of what to build, rather, you explain some key behavior or invariants that you would like to see being built. Provide some toy examples, agree to validate that the individual understood the concept (e.g., you commit to personally review the tests). Motivate, and rephrase boundaries, informally (e.g., the zorgulino criterion is that all time you make a change, you need to see only diffs in the positive direction in the all-accounts total) and formally (e.g.,this value is non-decreasing of version numbers etc.). Adapt your message to how your peer answers, some will prefer the informal style, some will prefer the formal one. Some will want the whole explanation, others will want the description of the problem and will want to guess the consequences. It is extra work to explain (and sometimes repeat many times) what are key invariants and key properties that you want in your system. Repeating is worth all the time it took. On the first hand, articulating such properties to a peer will clarify and sediment your understanding. On the other hand, keep in mind that you have smart individuals who can also see issues that you have missed and anticipate second-order effects that you had discounted too fast. These are the characteristics of a win-win situation.&lt;/p&gt; &lt;p&gt;If you manage with boundaries, you will enable the best of the individual, and the best of what the team can achieve: the most favorable conditions for your tactical project.&lt;/p&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Tactical projects are stressful, the specific problem at hand may not be super appealing (forsaken data pipelines with unclear business rules, desperate deadlines for some uncertain business with apparently more career risks than opportunities). You may not be able to establish yourself in the long term in the company if you only do tactical projects. However, these projects can be fun and rewarding.&lt;/p&gt; &lt;p&gt;Tactical projects ask for a lot of energy, especially when setting up the team structure and building the initial momentum. Tooling and procedures should privilege low-tech tools so that no time is lost installing or learning tools and procedures. Tools help you minimize friction. You can significantly reduce friction if there always is the same answer to ‘where do you find the doc’ or ‘what did we decide about’: lookup the entry-point doc and follow the links. After the initial phase, you will also need to consistenlty spend efforts on adapting the tempo. Ensure that people are energized and get some rests and some small achievements. Pick one ceremony and make the most out of it: engage your teammates. Verify that they have enough but not too much on their plate. And when directing individuals, ensure they have agency to operate on well-defined boundaries. Things will click and you’ll meet success.&lt;/p&gt; &lt;p&gt;A number of the above &lt;strong&gt;teachings are also applicable to organizations of larger sizes&lt;/strong&gt; than a tactical project. Some adaptation to the checklist will be in order. However I believe that what you really need is to relay and repeat the pattern at different scales. It is definitely possible to have one ceremony with team-leads of a dozen of &lt;a href="/hashtags/teams.html"&gt;&lt;span class="hashtag" data-hashtag="teams"&gt;#teams&lt;/span&gt;&lt;/a&gt; sharing a periodic-meeting notes and a large jargon file. It is still possible to settle boundaries for teams, which will help you devise and follow up on larger plans. However you will face scaling issues as you will need to get a good sense of what a team is working on at different scales (a problem we are helping you solve at &lt;a href="https://www.echoeshq.com/"&gt;EchoesHQ&lt;/a&gt;, my current employer). You will not have the energy to give the tempo into every team and every individuals, you may face alignment issues, leading to bad team-play. That said, such a problem could be solved by empowered managers as well.&lt;/p&gt; &lt;p&gt;Some tactical-projects teammates, bystanders, recounted they have seen progress on topics they thought were doomed. Individual in tactical teams told me how they were considering to leave the company or ask for an internal move, but stuck as they saw something different and started learning from other team members. Most importantly, I have build pretty strong bounds with a few colleagues during tactical projects because the energy in the air is vitalizing.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://dicioccio.fr/tactical-projects.html" rel="alternate"/>
        <summary type="text">
            Different projects require different organization structure. So-called tactical projects tend to fall on you rather than being planned upfront. My recipe to tackle them is a few communication tools and empowered individuals free to roam within constraints.
        </summary>
    </entry>
</feed>
